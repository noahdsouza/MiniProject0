
paddle.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	76 33 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	76 33 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	76 33 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	76 33 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	76 33 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	76 33 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	76 33 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	76 33 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	76 33 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	76 33 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	76 33 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	76 33 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	76 33 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	76 33 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	76 33 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	76 33 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	76 33 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	76 33 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	76 33 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	76 33 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	76 33 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	76 33 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	76 33 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	76 33 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	76 33 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	76 33 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	76 33 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	76 33 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	76 33 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	76 33 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	76 33 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	76 33 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	76 33 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	76 33 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	76 33 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	76 33 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	76 33 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	76 33 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	76 33 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	76 33 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	76 33 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	76 33 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	76 33 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	76 33 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	76 33 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	76 33 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	76 33 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	76 33 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	76 33 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	76 33 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	76 33 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	76 33 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	76 33 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	76 33 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	76 33 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	76 33 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	76 33 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	76 33 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	76 33 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	76 33 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	76 33 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	76 33 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	76 33 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	76 33 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	76 33 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f 28 21    	mov.w     #0x1280, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	ba 00 07    	rcall     0x129a <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	80 13 23    	mov.w     #0x3138, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13> <_USB_request>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	d6 2d 02    	call      0x2dd6 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 08 20    	mov.w     #0x8a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	b6 2c 04    	goto      0x2cb6 <_postion>
    1216:	00 00 00 
    1218:	04 2d 04    	goto      0x2d04 <_modeControl>
    121a:	00 00 00 
    121c:	22 2b 04    	goto      0x2b22 <_vendor_requests>
    121e:	00 00 00 
    1220:	42 21 04    	goto      0x2142 <_usb_set_address_callback>
    1222:	00 00 00 
    1224:	84 29 04    	goto      0x2984 <_usb_send_data_packet>
    1226:	00 00 00 
    1228:	9c 12 04    	goto      0x129c <_prout>
    122a:	00 00 00 
    122c:	c6 14 04    	goto      0x14c6 <_closeall>
    122e:	00 00 00 
    1230:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1232:	00 00 00 

00001234 <_close>:
    1234:	0a 00 fa    	lnk       #0xa
    1236:	11 00 20    	mov.w     #0x1, w1
    1238:	b1 bf 9f    	mov.w     w1, [w15-10]
    123a:	c0 bf 9f    	mov.w     w0, [w15-8]
    123c:	6a 80 57    	sub.w     w15, #0xa, w0
    123e:	ef 05 07    	rcall     0x1e1e <_doclose>
    1240:	4f b8 97    	mov.w     [w15-8], w0
    1242:	00 80 fa    	ulnk      
    1244:	00 00 06    	return    

00001246 <_remove>:
    1246:	0a 00 fa    	lnk       #0xa
    1248:	51 00 20    	mov.w     #0x5, w1
    124a:	b1 bf 9f    	mov.w     w1, [w15-10]
    124c:	c0 bf 9f    	mov.w     w0, [w15-8]
    124e:	6a 80 57    	sub.w     w15, #0xa, w0
    1250:	e8 05 07    	rcall     0x1e22 <_doremove>
    1252:	5f b8 97    	mov.w     [w15-6], w0
    1254:	00 80 fa    	ulnk      
    1256:	00 00 06    	return    

00001258 <_sbrk>:
    1258:	88 9f be    	mov.d     w8, [w15++]
    125a:	80 04 78    	mov.w     w0, w9
    125c:	b0 8e 80    	mov.w     0x11d6, w0
    125e:	00 00 e0    	cp0.w     w0
    1260:	04 00 3a    	bra       NZ, 0x126a <.L2>
    1262:	0e 00 07    	rcall     0x1280 <_brk>
    1264:	00 84 eb    	setm.w    w8
    1266:	00 00 e0    	cp0.w     w0
    1268:	08 00 35    	bra       LT, 0x127a <.L3>

0000126a <.L2>:
    126a:	b8 8e 80    	mov.w     0x11d6, w8
    126c:	09 00 e0    	cp0.w     w9
    126e:	05 00 32    	bra       Z, 0x127a <.L3>
    1270:	09 00 44    	add.w     w8, w9, w0
    1272:	06 00 07    	rcall     0x1280 <_brk>
    1274:	00 00 e0    	cp0.w     w0
    1276:	01 00 3d    	bra       GE, 0x127a <.L3>
    1278:	00 84 eb    	setm.w    w8

0000127a <.L3>:
    127a:	08 00 78    	mov.w     w8, w0
    127c:	4f 04 be    	mov.d     [--w15], w8
    127e:	00 00 06    	return    

00001280 <_brk>:
    1280:	80 00 78    	mov.w     w0, w1
    1282:	01 00 e0    	cp0.w     w1
    1284:	03 00 3a    	bra       NZ, 0x128c <.L2>
    1286:	00 00 20    	mov.w     #0x0, w0
    1288:	b0 8e 88    	mov.w     w0, 0x11d6
    128a:	00 00 05    	retlw.w   #0x0, w0

0000128c <.L2>:
    128c:	00 80 eb    	setm.w    w0
    128e:	02 00 20    	mov.w     #0x0, w2
    1290:	82 8f 50    	sub.w     w1, w2, [w15]
    1292:	02 00 3e    	bra       GTU, 0x1298 <.L3>
    1294:	b1 8e 88    	mov.w     w1, 0x11d6
    1296:	00 00 eb    	clr.w     w0

00001298 <.L3>:
    1298:	00 00 06    	return    

0000129a <__crt_start_mode>:
    129a:	00 00 05    	retlw.w   #0x0, w0

0000129c <_prout>:
    129c:	88 9f be    	mov.d     w8, [w15++]
    129e:	00 04 78    	mov.w     w0, w8
    12a0:	01 00 78    	mov.w     w1, w0
    12a2:	82 04 78    	mov.w     w2, w9
    12a4:	88 01 78    	mov.w     w8, w3
    12a6:	09 01 78    	mov.w     w9, w2
    12a8:	11 00 20    	mov.w     #0x1, w1
    12aa:	0e 00 07    	rcall     0x12c8 <_fwrite>
    12ac:	89 0f 50    	sub.w     w0, w9, [w15]
    12ae:	01 00 32    	bra       Z, 0x12b2 <.L2>
    12b0:	00 04 eb    	clr.w     w8

000012b2 <.L2>:
    12b2:	08 00 78    	mov.w     w8, w0
    12b4:	4f 04 be    	mov.d     [--w15], w8
    12b6:	00 00 06    	return    

000012b8 <__printf_cdnopuxX>:
    12b8:	00 00 fa    	lnk       #0x0
    12ba:	e8 81 57    	sub.w     w15, #0x8, w3
    12bc:	4f b9 97    	mov.w     [w15-8], w2
    12be:	41 06 21    	mov.w     #0x1064, w1
    12c0:	c0 29 21    	mov.w     #0x129c, w0
    12c2:	57 01 07    	rcall     0x1572 <___Printf_cdnopuxX>
    12c4:	00 80 fa    	ulnk      
    12c6:	00 00 06    	return    

000012c8 <_fwrite>:
    12c8:	88 9f be    	mov.d     w8, [w15++]
    12ca:	8a 9f be    	mov.d     w10, [w15++]
    12cc:	8c 9f be    	mov.d     w12, [w15++]
    12ce:	8e 1f 78    	mov.w     w14, [w15++]
    12d0:	00 06 78    	mov.w     w0, w12
    12d2:	01 04 78    	mov.w     w1, w8
    12d4:	02 00 78    	mov.w     w2, w0
    12d6:	83 04 78    	mov.w     w3, w9
    12d8:	08 81 b9    	mul.ss    w0, w8, w2
    12da:	02 07 78    	mov.w     w2, w14
    12dc:	02 00 e0    	cp0.w     w2
    12de:	42 00 32    	bra       Z, 0x1364 <.L11>
    12e0:	08 00 e0    	cp0.w     w8
    12e2:	41 00 32    	bra       Z, 0x1366 <.L2>
    12e4:	82 05 78    	mov.w     w2, w11

000012e6 <.L8>:
    12e6:	c9 00 90    	mov.w     [w9+8], w1
    12e8:	69 00 90    	mov.w     [w9+12], w0
    12ea:	80 8f 50    	sub.w     w1, w0, [w15]
    12ec:	04 00 39    	bra       NC, 0x12f6 <.L3>
    12ee:	09 00 78    	mov.w     w9, w0
    12f0:	50 00 07    	rcall     0x1392 <__Fwprep>
    12f2:	00 00 e0    	cp0.w     w0
    12f4:	29 00 35    	bra       LT, 0x1348 <.L4>

000012f6 <.L3>:
    12f6:	00 40 20    	mov.w     #0x400, w0
    12f8:	19 00 60    	and.w     w0, [w9], w0
    12fa:	0a 00 32    	bra       Z, 0x1310 <.L12>
    12fc:	0b 01 78    	mov.w     w11, w2
    12fe:	a1 00 20    	mov.w     #0xa, w1
    1300:	0c 00 78    	mov.w     w12, w0
    1302:	36 00 07    	rcall     0x1370 <_memchr>
    1304:	80 06 78    	mov.w     w0, w13
    1306:	0d 00 e0    	cp0.w     w13
    1308:	06 00 32    	bra       Z, 0x1316 <.L13>
    130a:	61 05 16    	subr.w    w12, #0x1, w10
    130c:	0a 85 46    	add.w     w13, w10, w10
    130e:	04 00 37    	bra       0x1318 <.L5>

00001310 <.L12>:
    1310:	0b 05 78    	mov.w     w11, w10
    1312:	80 06 eb    	clr.w     w13
    1314:	01 00 37    	bra       0x1318 <.L5>

00001316 <.L13>:
    1316:	0b 05 78    	mov.w     w11, w10

00001318 <.L5>:
    1318:	49 00 90    	mov.w     [w9+8], w0
    131a:	e9 00 90    	mov.w     [w9+12], w1
    131c:	80 80 50    	sub.w     w1, w0, w1
    131e:	8a 8f 50    	sub.w     w1, w10, [w15]
    1320:	02 00 31    	bra       C, 0x1326 <.L6>
    1322:	01 05 78    	mov.w     w1, w10
    1324:	80 06 eb    	clr.w     w13

00001326 <.L6>:
    1326:	0a 01 78    	mov.w     w10, w2
    1328:	8c 00 78    	mov.w     w12, w1
    132a:	2c 00 07    	rcall     0x1384 <_memcpy>
    132c:	8a 85 55    	sub.w     w11, w10, w11
    132e:	49 00 90    	mov.w     [w9+8], w0
    1330:	0a 00 40    	add.w     w0, w10, w0
    1332:	c0 04 98    	mov.w     w0, [w9+8]
    1334:	0d 00 e0    	cp0.w     w13
    1336:	04 00 32    	bra       Z, 0x1340 <.L7>
    1338:	09 00 78    	mov.w     w9, w0
    133a:	d5 00 07    	rcall     0x14e6 <__DNKfflush>
    133c:	00 00 e0    	cp0.w     w0
    133e:	04 00 3a    	bra       NZ, 0x1348 <.L4>

00001340 <.L7>:
    1340:	0b 00 e0    	cp0.w     w11
    1342:	02 00 32    	bra       Z, 0x1348 <.L4>
    1344:	0a 06 46    	add.w     w12, w10, w12
    1346:	cf ff 37    	bra       0x12e6 <.L8>

00001348 <.L4>:
    1348:	00 80 20    	mov.w     #0x800, w0
    134a:	19 00 60    	and.w     w0, [w9], w0
    134c:	02 00 32    	bra       Z, 0x1352 <.L9>
    134e:	09 00 78    	mov.w     w9, w0
    1350:	ca 00 07    	rcall     0x14e6 <__DNKfflush>

00001352 <.L9>:
    1352:	00 c0 20    	mov.w     #0xc00, w0
    1354:	19 00 60    	and.w     w0, [w9], w0
    1356:	02 00 32    	bra       Z, 0x135c <.L10>
    1358:	49 00 90    	mov.w     [w9+8], w0
    135a:	e0 04 98    	mov.w     w0, [w9+12]

0000135c <.L10>:
    135c:	8b 05 57    	sub.w     w14, w11, w11
    135e:	11 00 09    	repeat    #0x11
    1360:	88 85 d8    	div.uw    w11, w8
    1362:	01 00 37    	bra       0x1366 <.L2>

00001364 <.L11>:
    1364:	00 00 eb    	clr.w     w0

00001366 <.L2>:
    1366:	4f 07 78    	mov.w     [--w15], w14
    1368:	4f 06 be    	mov.d     [--w15], w12
    136a:	4f 05 be    	mov.d     [--w15], w10
    136c:	4f 04 be    	mov.d     [--w15], w8
    136e:	00 00 06    	return    

00001370 <_memchr>:
    1370:	03 00 37    	bra       0x1378 <.L2>

00001372 <.L4>:
    1372:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1374:	05 00 32    	bra       Z, 0x1380 <.L5>
    1376:	02 01 e9    	dec.w     w2, w2

00001378 <.L2>:
    1378:	80 01 78    	mov.w     w0, w3
    137a:	02 00 e0    	cp0.w     w2
    137c:	fa ff 3a    	bra       NZ, 0x1372 <.L4>
    137e:	00 00 05    	retlw.w   #0x0, w0

00001380 <.L5>:
    1380:	03 00 78    	mov.w     w3, w0
    1382:	00 00 06    	return    

00001384 <_memcpy>:
    1384:	80 01 78    	mov.w     w0, w3
    1386:	02 00 37    	bra       0x138c <.L2>

00001388 <.L3>:
    1388:	b1 59 78    	mov.b     [w1++], [w3++]
    138a:	02 01 e9    	dec.w     w2, w2

0000138c <.L2>:
    138c:	02 00 e0    	cp0.w     w2
    138e:	fc ff 3a    	bra       NZ, 0x1388 <.L3>
    1390:	00 00 06    	return    

00001392 <__Fwprep>:
    1392:	88 9f be    	mov.d     w8, [w15++]
    1394:	8a 1f 78    	mov.w     w10, [w15++]
    1396:	00 04 78    	mov.w     w0, w8
    1398:	c8 00 90    	mov.w     [w8+8], w1
    139a:	68 01 90    	mov.w     [w8+12], w2
    139c:	00 00 eb    	clr.w     w0
    139e:	82 8f 50    	sub.w     w1, w2, [w15]
    13a0:	3c 00 39    	bra       NC, 0x141a <.L2>
    13a2:	18 00 78    	mov.w     [w8], w0
    13a4:	22 00 29    	mov.w     #0x9002, w2
    13a6:	02 01 60    	and.w     w0, w2, w2
    13a8:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    13aa:	07 00 32    	bra       Z, 0x13ba <.L3>
    13ac:	01 20 24    	mov.w     #0x4200, w1
    13ae:	00 00 e0    	cp0.w     w0
    13b0:	01 00 3d    	bra       GE, 0x13b4 <.L4>
    13b2:	01 20 20    	mov.w     #0x200, w1

000013b4 <.L4>:
    13b4:	00 8c 70    	ior.w     w1, w0, [w8]
    13b6:	00 80 eb    	setm.w    w0
    13b8:	30 00 37    	bra       0x141a <.L2>

000013ba <.L3>:
    13ba:	02 00 26    	mov.w     #0x6000, w2
    13bc:	02 00 60    	and.w     w0, w2, w0
    13be:	82 0f 50    	sub.w     w0, w2, [w15]
    13c0:	09 00 3a    	bra       NZ, 0x13d4 <.L5>
    13c2:	38 00 90    	mov.w     [w8+6], w0
    13c4:	80 8f 50    	sub.w     w1, w0, [w15]
    13c6:	06 00 39    	bra       NC, 0x13d4 <.L5>
    13c8:	08 00 78    	mov.w     w8, w0
    13ca:	8d 00 07    	rcall     0x14e6 <__DNKfflush>
    13cc:	80 00 78    	mov.w     w0, w1
    13ce:	00 80 eb    	setm.w    w0
    13d0:	01 00 e0    	cp0.w     w1
    13d2:	23 00 3a    	bra       NZ, 0x141a <.L2>

000013d4 <.L5>:
    13d4:	18 05 78    	mov.w     [w8], w10
    13d6:	00 c0 20    	mov.w     #0xc00, w0
    13d8:	00 00 65    	and.w     w10, w0, w0
    13da:	18 00 3a    	bra       NZ, 0x140c <.L6>
    13dc:	a8 04 90    	mov.w     [w8+4], w9
    13de:	60 02 20    	mov.w     #0x26, w0
    13e0:	08 00 40    	add.w     w0, w8, w0
    13e2:	80 8f 54    	sub.w     w9, w0, [w15]
    13e4:	13 00 3a    	bra       NZ, 0x140c <.L6>
    13e6:	00 20 20    	mov.w     #0x200, w0
    13e8:	ed 02 07    	rcall     0x19c4 <_malloc>
    13ea:	20 04 98    	mov.w     w0, [w8+4]
    13ec:	00 00 e0    	cp0.w     w0
    13ee:	05 00 3a    	bra       NZ, 0x13fa <.L7>
    13f0:	29 04 98    	mov.w     w9, [w8+4]
    13f2:	49 04 98    	mov.w     w9, [w8+8]
    13f4:	89 04 e8    	inc.w     w9, w9
    13f6:	39 04 98    	mov.w     w9, [w8+6]
    13f8:	08 00 37    	bra       0x140a <.L11>

000013fa <.L7>:
    13fa:	0a 60 a0    	bset.w    w10, #0x6
    13fc:	0a 0c 78    	mov.w     w10, [w8]
    13fe:	40 04 98    	mov.w     w0, [w8+8]
    1400:	01 20 20    	mov.w     #0x200, w1
    1402:	80 80 40    	add.w     w1, w0, w1
    1404:	31 04 98    	mov.w     w1, [w8+6]
    1406:	40 0c 98    	mov.w     w0, [w8+24]
    1408:	50 0c 98    	mov.w     w0, [w8+26]

0000140a <.L11>:
    140a:	0c 00 07    	rcall     0x1424 <__Closreg>

0000140c <.L6>:
    140c:	28 00 90    	mov.w     [w8+4], w0
    140e:	50 04 98    	mov.w     w0, [w8+10]
    1410:	38 00 90    	mov.w     [w8+6], w0
    1412:	60 04 98    	mov.w     w0, [w8+12]
    1414:	00 00 26    	mov.w     #0x6000, w0
    1416:	18 0c 70    	ior.w     w0, [w8], [w8]
    1418:	00 00 eb    	clr.w     w0

0000141a <.L2>:
    141a:	4f 05 78    	mov.w     [--w15], w10
    141c:	4f 04 be    	mov.d     [--w15], w8
    141e:	00 00 06    	return    

00001420 <_closeallreg>:
    1420:	60 4c 21    	mov.w     #0x14c6, w0
    1422:	9b 00 37    	bra       0x155a <__Atexit>

00001424 <__Closreg>:
    1424:	88 1f 78    	mov.w     w8, [w15++]
    1426:	28 1d 21    	mov.w     #0x11d2, w8
    1428:	18 04 e0    	cp0.b     [w8]
    142a:	03 00 3a    	bra       NZ, 0x1432 <.L2>
    142c:	f9 ff 07    	rcall     0x1420 <_closeallreg>
    142e:	20 c0 b3    	mov.b     #0x2, w0
    1430:	00 4c 78    	mov.b     w0, [w8]

00001432 <.L2>:
    1432:	4f 04 78    	mov.w     [--w15], w8
    1434:	00 00 06    	return    

00001436 <_fclose>:
    1436:	88 9f be    	mov.d     w8, [w15++]
    1438:	00 04 78    	mov.w     w0, w8
    143a:	08 00 78    	mov.w     w8, w0
    143c:	54 00 07    	rcall     0x14e6 <__DNKfflush>
    143e:	80 04 78    	mov.w     w0, w9
    1440:	00 04 20    	mov.w     #0x40, w0
    1442:	18 00 60    	and.w     w0, [w8], w0
    1444:	02 00 32    	bra       Z, 0x144a <.L5>
    1446:	28 00 90    	mov.w     [w8+4], w0
    1448:	58 02 07    	rcall     0x18fa <_free>

0000144a <.L5>:
    144a:	00 00 eb    	clr.w     w0
    144c:	20 04 98    	mov.w     w0, [w8+4]
    144e:	38 40 90    	mov.b     [w8+3], w0
    1450:	00 04 e0    	cp0.b     w0
    1452:	05 00 35    	bra       LT, 0x145e <.L6>
    1454:	00 00 fb    	se        w0, w0
    1456:	ee fe 07    	rcall     0x1234 <_close>
    1458:	00 00 e0    	cp0.w     w0
    145a:	01 00 32    	bra       Z, 0x145e <.L6>
    145c:	80 84 eb    	setm.w    w9

0000145e <.L6>:
    145e:	18 10 90    	mov.w     [w8+34], w0
    1460:	00 00 e0    	cp0.w     w0
    1462:	08 00 32    	bra       Z, 0x1474 <.L7>
    1464:	f0 fe 07    	rcall     0x1246 <_remove>
    1466:	00 00 e0    	cp0.w     w0
    1468:	01 00 32    	bra       Z, 0x146c <.L8>
    146a:	80 84 eb    	setm.w    w9

0000146c <.L8>:
    146c:	18 10 90    	mov.w     [w8+34], w0
    146e:	45 02 07    	rcall     0x18fa <_free>
    1470:	00 00 eb    	clr.w     w0
    1472:	10 14 98    	mov.w     w0, [w8+34]

00001474 <.L7>:
    1474:	00 08 20    	mov.w     #0x80, w0
    1476:	18 00 60    	and.w     w0, [w8], w0
    1478:	15 00 32    	bra       Z, 0x14a4 <.L9>
    147a:	00 01 eb    	clr.w     w2
    147c:	60 00 b8    	mul.uu    w0, #0x0, w0

0000147e <.L12>:
    147e:	43 0b 21    	mov.w     #0x10b4, w3
    1480:	02 02 d0    	sl.w      w2, w4
    1482:	63 02 7a    	mov.w     [w3+w4], w4
    1484:	88 0f 52    	sub.w     w4, w8, [w15]
    1486:	05 00 3a    	bra       NZ, 0x1492 <.L10>
    1488:	00 00 40    	add.w     w0, w0, w0
    148a:	81 80 48    	addc.w    w1, w1, w1
    148c:	00 80 41    	add.w     w3, w0, w0
    148e:	00 08 eb    	clr.w     [w0]
    1490:	06 00 37    	bra       0x149e <.L11>

00001492 <.L10>:
    1492:	61 00 40    	add.w     w0, #0x1, w0
    1494:	e0 80 48    	addc.w    w1, #0x0, w1
    1496:	02 01 e8    	inc.w     w2, w2
    1498:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    149a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    149c:	f0 ff 3a    	bra       NZ, 0x147e <.L12>

0000149e <.L11>:
    149e:	08 00 78    	mov.w     w8, w0
    14a0:	2c 02 07    	rcall     0x18fa <_free>
    14a2:	0e 00 37    	bra       0x14c0 <.L13>

000014a4 <.L9>:
    14a4:	00 0c 78    	mov.w     w0, [w8]
    14a6:	00 c0 eb    	setm.b    w0
    14a8:	30 44 98    	mov.b     w0, [w8+3]
    14aa:	60 02 20    	mov.w     #0x26, w0
    14ac:	08 00 40    	add.w     w0, w8, w0
    14ae:	20 04 98    	mov.w     w0, [w8+4]
    14b0:	40 04 98    	mov.w     w0, [w8+8]
    14b2:	50 04 98    	mov.w     w0, [w8+10]
    14b4:	40 0c 98    	mov.w     w0, [w8+24]
    14b6:	60 04 98    	mov.w     w0, [w8+12]
    14b8:	50 0c 98    	mov.w     w0, [w8+26]
    14ba:	70 04 98    	mov.w     w0, [w8+14]
    14bc:	76 00 44    	add.w     w8, #0x16, w0
    14be:	00 0c 98    	mov.w     w0, [w8+16]

000014c0 <.L13>:
    14c0:	09 00 78    	mov.w     w9, w0
    14c2:	4f 04 be    	mov.d     [--w15], w8
    14c4:	00 00 06    	return    

000014c6 <_closeall>:
    14c6:	88 1f 78    	mov.w     w8, [w15++]
    14c8:	00 04 eb    	clr.w     w8

000014ca <.L18>:
    14ca:	61 40 b8    	mul.uu    w8, #0x1, w0
    14cc:	e2 ff 2f    	mov.w     #0xfffe, w2
    14ce:	f3 ff 2f    	mov.w     #0xffff, w3
    14d0:	cc 04 07    	rcall     0x1e6a <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    14d2:	22 0c 21    	mov.w     #0x10c2, w2
    14d4:	62 00 78    	mov.w     [w2+w0], w0
    14d6:	00 00 e0    	cp0.w     w0
    14d8:	01 00 32    	bra       Z, 0x14dc <.L17>
    14da:	ad ff 07    	rcall     0x1436 <_fclose>

000014dc <.L17>:
    14dc:	08 04 e8    	inc.w     w8, w8
    14de:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    14e0:	f4 ff 3a    	bra       NZ, 0x14ca <.L18>
    14e2:	4f 04 78    	mov.w     [--w15], w8
    14e4:	00 00 06    	return    

000014e6 <__DNKfflush>:
    14e6:	88 9f be    	mov.d     w8, [w15++]
    14e8:	00 04 78    	mov.w     w0, w8
    14ea:	08 00 e0    	cp0.w     w8
    14ec:	0e 00 3a    	bra       NZ, 0x150a <.L2>
    14ee:	80 04 eb    	clr.w     w9

000014f0 <.L4>:
    14f0:	88 00 d0    	sl.w      w8, w1
    14f2:	40 0b 21    	mov.w     #0x10b4, w0
    14f4:	61 00 78    	mov.w     [w1+w0], w0
    14f6:	00 00 e0    	cp0.w     w0
    14f8:	04 00 32    	bra       Z, 0x1502 <.L3>
    14fa:	f5 ff 07    	rcall     0x14e6 <__DNKfflush>
    14fc:	00 00 e0    	cp0.w     w0
    14fe:	01 00 3d    	bra       GE, 0x1502 <.L3>
    1500:	80 84 eb    	setm.w    w9

00001502 <.L3>:
    1502:	08 04 e8    	inc.w     w8, w8
    1504:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1506:	f4 ff 3a    	bra       NZ, 0x14f0 <.L4>
    1508:	25 00 37    	bra       0x1554 <.L5>

0000150a <.L2>:
    150a:	00 00 22    	mov.w     #0x2000, w0
    150c:	18 00 60    	and.w     w0, [w8], w0
    150e:	80 04 eb    	clr.w     w9
    1510:	21 00 32    	bra       Z, 0x1554 <.L5>
    1512:	a8 04 90    	mov.w     [w8+4], w9
    1514:	0f 00 37    	bra       0x1534 <.L6>

00001516 <.L8>:
    1516:	09 01 51    	sub.w     w2, w9, w2
    1518:	38 40 90    	mov.b     [w8+3], w0
    151a:	00 00 fb    	se        w0, w0
    151c:	89 00 78    	mov.w     w9, w1
    151e:	f0 0d 07    	rcall     0x3100 <_write> <.LFB10> <.LFE9>
    1520:	00 00 e0    	cp0.w     w0
    1522:	07 00 3c    	bra       GT, 0x1532 <.L7>
    1524:	28 00 90    	mov.w     [w8+4], w0
    1526:	40 04 98    	mov.w     w0, [w8+8]
    1528:	60 04 98    	mov.w     w0, [w8+12]
    152a:	50 0c 98    	mov.w     w0, [w8+26]
    152c:	18 90 a0    	bset.w    [w8], #0x9
    152e:	80 84 eb    	setm.w    w9
    1530:	11 00 37    	bra       0x1554 <.L5>

00001532 <.L7>:
    1532:	80 84 44    	add.w     w9, w0, w9

00001534 <.L6>:
    1534:	48 01 90    	mov.w     [w8+8], w2
    1536:	82 8f 54    	sub.w     w9, w2, [w15]
    1538:	ee ff 39    	bra       NC, 0x1516 <.L8>
    153a:	28 00 90    	mov.w     [w8+4], w0
    153c:	40 04 98    	mov.w     w0, [w8+8]
    153e:	98 00 78    	mov.w     [w8], w1
    1540:	02 c0 20    	mov.w     #0xc00, w2
    1542:	02 81 60    	and.w     w1, w2, w2
    1544:	01 00 3a    	bra       NZ, 0x1548 <.L9>
    1546:	38 00 90    	mov.w     [w8+6], w0

00001548 <.L9>:
    1548:	01 e8 a3    	btst.z    w1, #0xe
    154a:	02 00 32    	bra       Z, 0x1550 <.L10>
    154c:	60 04 98    	mov.w     w0, [w8+12]
    154e:	01 00 37    	bra       0x1552 <.L13>

00001550 <.L10>:
    1550:	50 0c 98    	mov.w     w0, [w8+26]

00001552 <.L13>:
    1552:	80 04 eb    	clr.w     w9

00001554 <.L5>:
    1554:	09 00 78    	mov.w     w9, w0
    1556:	4f 04 be    	mov.d     [--w15], w8
    1558:	00 00 06    	return    

0000155a <__Atexit>:
    155a:	01 00 20    	mov.w     #0x0, w1
    155c:	01 00 e0    	cp0.w     w1
    155e:	08 00 32    	bra       Z, 0x1570 <.L1>
    1560:	01 00 80    	mov.w     0x0, w1
    1562:	01 00 e0    	cp0.w     w1
    1564:	05 00 32    	bra       Z, 0x1570 <.L1>
    1566:	81 00 e9    	dec.w     w1, w1
    1568:	01 00 88    	mov.w     w1, 0x0
    156a:	81 00 d0    	sl.w      w1, w1
    156c:	02 00 80    	mov.w     0x0, w2
    156e:	00 b1 78    	mov.w     w0, [w2+w1]

00001570 <.L1>:
    1570:	00 00 06    	return    

00001572 <___Printf_cdnopuxX>:
    1572:	62 00 fa    	lnk       #0x62
    1574:	88 9f be    	mov.d     w8, [w15++]
    1576:	8a 1f 78    	mov.w     w10, [w15++]
    1578:	00 05 78    	mov.w     w0, w10
    157a:	81 04 78    	mov.w     w1, w9
    157c:	02 04 78    	mov.w     w2, w8
    157e:	83 00 78    	mov.w     w3, w1
    1580:	80 f9 2f    	mov.w     #0xff98, w0
    1582:	0f 00 40    	add.w     w0, w15, w0
    1584:	4a 04 07    	rcall     0x1e1a <__Vacopy>
    1586:	9a 97 9f    	mov.w     w10, [w15-94]
    1588:	a9 97 9f    	mov.w     w9, [w15-92]
    158a:	00 00 eb    	clr.w     w0
    158c:	b0 9f 9f    	mov.w     w0, [w15-74]

0000158e <.L31>:
    158e:	18 85 fb    	ze        [w8], w10
    1590:	8a 04 fb    	se        w10, w9
    1592:	0a 05 ea    	neg.w     w10, w10
    1594:	4f 55 de    	lsr.w     w10, #0xf, w10
    1596:	50 02 20    	mov.w     #0x25, w0
    1598:	80 8f 54    	sub.w     w9, w0, [w15]
    159a:	0d 00 32    	bra       Z, 0x15b6 <.L3>
    159c:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    159e:	0b 00 3a    	bra       NZ, 0x15b6 <.L3>
    15a0:	0a 01 78    	mov.w     w10, w2
    15a2:	88 00 78    	mov.w     w8, w1
    15a4:	2f 90 97    	mov.w     [w15-92], w0
    15a6:	9f 91 97    	mov.w     [w15-94], w3
    15a8:	03 00 01    	call      w3
    15aa:	a0 97 9f    	mov.w     w0, [w15-92]
    15ac:	00 00 e0    	cp0.w     w0
    15ae:	8e 00 32    	bra       Z, 0x16cc <.L27>
    15b0:	3f 98 97    	mov.w     [w15-74], w0
    15b2:	00 00 e8    	inc.w     w0, w0
    15b4:	b0 9f 9f    	mov.w     w0, [w15-74]

000015b6 <.L3>:
    15b6:	0a 04 44    	add.w     w8, w10, w8
    15b8:	50 02 20    	mov.w     #0x25, w0
    15ba:	80 8f 54    	sub.w     w9, w0, [w15]
    15bc:	04 00 32    	bra       Z, 0x15c6 <.L5>
    15be:	09 00 e0    	cp0.w     w9
    15c0:	e6 ff 3a    	bra       NZ, 0x158e <.L31>
    15c2:	3f 98 97    	mov.w     [w15-74], w0
    15c4:	84 00 37    	bra       0x16ce <.L4>

000015c6 <.L5>:
    15c6:	00 00 eb    	clr.w     w0
    15c8:	90 9f 9f    	mov.w     w0, [w15-78]
    15ca:	80 9f 9f    	mov.w     w0, [w15-80]
    15cc:	f0 97 9f    	mov.w     w0, [w15-82]
    15ce:	e0 97 9f    	mov.w     w0, [w15-84]
    15d0:	d0 97 9f    	mov.w     w0, [w15-86]
    15d2:	c0 97 9f    	mov.w     w0, [w15-88]
    15d4:	07 00 37    	bra       0x15e4 <.L34>

000015d6 <.L8>:
    15d6:	81 1c 21    	mov.w     #0x11c8, w1
    15d8:	01 00 50    	sub.w     w0, w1, w0
    15da:	00 00 40    	add.w     w0, w0, w0
    15dc:	c1 1b 21    	mov.w     #0x11bc, w1
    15de:	61 00 78    	mov.w     [w1+w0], w0
    15e0:	df 98 97    	mov.w     [w15-70], w1
    15e2:	01 00 70    	ior.w     w0, w1, w0

000015e4 <.L34>:
    15e4:	d0 9f 9f    	mov.w     w0, [w15-70]
    15e6:	88 04 78    	mov.w     w8, w9
    15e8:	09 04 78    	mov.w     w9, w8
    15ea:	38 45 78    	mov.b     [w8++], w10
    15ec:	8a 00 fb    	se        w10, w1
    15ee:	80 1c 21    	mov.w     #0x11c8, w0
    15f0:	13 02 07    	rcall     0x1a18 <_strchr>
    15f2:	00 00 e0    	cp0.w     w0
    15f4:	f0 ff 3a    	bra       NZ, 0x15d6 <.L8>
    15f6:	a1 c2 b3    	mov.b     #0x2a, w1
    15f8:	81 4f 55    	sub.b     w10, w1, [w15]
    15fa:	0e 00 3a    	bra       NZ, 0x1618 <.L9>
    15fc:	cf 88 97    	mov.w     [w15-104], w1
    15fe:	01 80 e9    	dec2.w    w1, w0
    1600:	c0 8f 9f    	mov.w     w0, [w15-104]
    1602:	10 00 78    	mov.w     [w0], w0
    1604:	c0 9f 9f    	mov.w     w0, [w15-72]
    1606:	00 00 e0    	cp0.w     w0
    1608:	05 00 3d    	bra       GE, 0x1614 <.L10>
    160a:	00 00 ea    	neg.w     w0, w0
    160c:	c0 9f 9f    	mov.w     w0, [w15-72]
    160e:	5f 98 97    	mov.w     [w15-70], w0
    1610:	00 20 a0    	bset.w    w0, #0x2
    1612:	d0 9f 9f    	mov.w     w0, [w15-70]

00001614 <.L10>:
    1614:	09 04 e8    	inc.w     w9, w8
    1616:	0f 00 37    	bra       0x1636 <.L11>

00001618 <.L9>:
    1618:	c0 9f 9f    	mov.w     w0, [w15-72]
    161a:	00 00 eb    	clr.w     w0
    161c:	05 00 37    	bra       0x1628 <.L32>

0000161e <.L14>:
    161e:	f2 ff 27    	mov.w     #0x7fff, w2
    1620:	82 0f 50    	sub.w     w0, w2, [w15]
    1622:	02 00 32    	bra       Z, 0x1628 <.L32>
    1624:	6a 01 b9    	mul.su    w0, #0xa, w2
    1626:	02 80 40    	add.w     w1, w2, w0

00001628 <.L32>:
    1628:	09 04 78    	mov.w     w9, w8
    162a:	88 04 78    	mov.w     w8, w9
    162c:	b9 00 fb    	se        [w9++], w1
    162e:	01 03 b1    	sub.w     #0x30, w1
    1630:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1632:	f5 ff 36    	bra       LEU, 0x161e <.L14>
    1634:	c0 9f 9f    	mov.w     w0, [w15-72]

00001636 <.L11>:
    1636:	e0 c2 b3    	mov.b     #0x2e, w0
    1638:	98 4f 10    	subr.b    w0, [w8], [w15]
    163a:	02 00 32    	bra       Z, 0x1640 <.L15>
    163c:	00 80 eb    	setm.w    w0
    163e:	19 00 37    	bra       0x1672 <.L35>

00001640 <.L15>:
    1640:	a0 c2 b3    	mov.b     #0x2a, w0
    1642:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1644:	07 00 3a    	bra       NZ, 0x1654 <.L17>
    1646:	cf 88 97    	mov.w     [w15-104], w1
    1648:	01 80 e9    	dec2.w    w1, w0
    164a:	c0 8f 9f    	mov.w     w0, [w15-104]
    164c:	10 00 78    	mov.w     [w0], w0
    164e:	a0 9f 9f    	mov.w     w0, [w15-76]
    1650:	08 04 e8    	inc.w     w8, w8
    1652:	10 00 37    	bra       0x1674 <.L16>

00001654 <.L17>:
    1654:	00 00 eb    	clr.w     w0
    1656:	a0 9f 9f    	mov.w     w0, [w15-76]
    1658:	88 00 78    	mov.w     w8, w1
    165a:	05 00 37    	bra       0x1666 <.L33>

0000165c <.L20>:
    165c:	f3 ff 27    	mov.w     #0x7fff, w3
    165e:	83 0f 50    	sub.w     w0, w3, [w15]
    1660:	02 00 32    	bra       Z, 0x1666 <.L33>
    1662:	6a 02 b9    	mul.su    w0, #0xa, w4
    1664:	04 00 41    	add.w     w2, w4, w0

00001666 <.L33>:
    1666:	01 04 78    	mov.w     w1, w8
    1668:	88 00 78    	mov.w     w8, w1
    166a:	31 01 fb    	se        [w1++], w2
    166c:	02 03 b1    	sub.w     #0x30, w2
    166e:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1670:	f5 ff 36    	bra       LEU, 0x165c <.L20>

00001672 <.L35>:
    1672:	a0 9f 9f    	mov.w     w0, [w15-76]

00001674 <.L16>:
    1674:	98 44 78    	mov.b     [w8], w9
    1676:	89 00 fb    	se        w9, w1
    1678:	40 1b 21    	mov.w     #0x11b4, w0
    167a:	ce 01 07    	rcall     0x1a18 <_strchr>
    167c:	00 00 e0    	cp0.w     w0
    167e:	02 00 32    	bra       Z, 0x1684 <.L25>
    1680:	08 04 e8    	inc.w     w8, w8
    1682:	01 00 37    	bra       0x1686 <.L21>

00001684 <.L25>:
    1684:	80 44 eb    	clr.b     w9

00001686 <.L21>:
    1686:	c9 7f 9f    	mov.b     w9, [w15-68]
    1688:	80 c6 b3    	mov.b     #0x68, w0
    168a:	80 cf 54    	sub.b     w9, w0, [w15]
    168c:	04 00 3a    	bra       NZ, 0x1696 <.L22>
    168e:	98 cf 14    	subr.b    w9, [w8], [w15]
    1690:	0a 00 3a    	bra       NZ, 0x16a6 <.L23>
    1692:	66 40 50    	sub.b     w0, #0x6, w0
    1694:	06 00 37    	bra       0x16a2 <.L36>

00001696 <.L22>:
    1696:	c0 c6 b3    	mov.b     #0x6c, w0
    1698:	80 cf 54    	sub.b     w9, w0, [w15]
    169a:	05 00 3a    	bra       NZ, 0x16a6 <.L23>
    169c:	98 cf 14    	subr.b    w9, [w8], [w15]
    169e:	03 00 3a    	bra       NZ, 0x16a6 <.L23>
    16a0:	65 40 40    	add.b     w0, #0x5, w0

000016a2 <.L36>:
    16a2:	c0 7f 9f    	mov.b     w0, [w15-68]
    16a4:	08 04 e8    	inc.w     w8, w8

000016a6 <.L23>:
    16a6:	18 01 fb    	se        [w8], w2
    16a8:	e3 fb 2f    	mov.w     #0xffbe, w3
    16aa:	8f 81 41    	add.w     w3, w15, w3
    16ac:	81 f9 2f    	mov.w     #0xff98, w1
    16ae:	8f 80 40    	add.w     w1, w15, w1
    16b0:	a0 f9 2f    	mov.w     #0xff9a, w0
    16b2:	0f 00 40    	add.w     w0, w15, w0
    16b4:	10 00 07    	rcall     0x16d6 <___Putfld_cdnopuxX>
    16b6:	00 00 e0    	cp0.w     w0
    16b8:	09 00 3a    	bra       NZ, 0x16cc <.L27>
    16ba:	e1 fb 2f    	mov.w     #0xffbe, w1
    16bc:	8f 80 40    	add.w     w1, w15, w1
    16be:	a0 f9 2f    	mov.w     #0xff9a, w0
    16c0:	0f 00 40    	add.w     w0, w15, w0
    16c2:	ef 02 07    	rcall     0x1ca2 <__Puttxt>
    16c4:	00 00 e0    	cp0.w     w0
    16c6:	02 00 35    	bra       LT, 0x16cc <.L27>
    16c8:	08 04 e8    	inc.w     w8, w8
    16ca:	61 ff 37    	bra       0x158e <.L31>

000016cc <.L27>:
    16cc:	00 80 eb    	setm.w    w0

000016ce <.L4>:
    16ce:	4f 05 78    	mov.w     [--w15], w10
    16d0:	4f 04 be    	mov.d     [--w15], w8
    16d2:	00 80 fa    	ulnk      
    16d4:	00 00 06    	return    

000016d6 <___Putfld_cdnopuxX>:
    16d6:	88 9f be    	mov.d     w8, [w15++]
    16d8:	8a 9f be    	mov.d     w10, [w15++]
    16da:	e4 c6 b3    	mov.b     #0x6e, w4
    16dc:	84 4f 51    	sub.b     w2, w4, [w15]
    16de:	be 00 32    	bra       Z, 0x185c <.L7>
    16e0:	10 00 3c    	bra       GT, 0x1702 <.L9>
    16e2:	6b 42 52    	sub.b     w4, #0xb, w4
    16e4:	84 4f 51    	sub.b     w2, w4, [w15]
    16e6:	18 00 32    	bra       Z, 0x1718 <.L5>
    16e8:	05 00 3c    	bra       GT, 0x16f4 <.L10>
    16ea:	54 c2 b3    	mov.b     #0x25, w4
    16ec:	84 4f 51    	sub.b     w2, w4, [w15]
    16ee:	f6 00 32    	bra       Z, 0x18dc <.L3>
    16f0:	84 c5 b3    	mov.b     #0x58, w4
    16f2:	0f 00 37    	bra       0x1712 <.L47>

000016f4 <.L10>:
    16f4:	44 c6 b3    	mov.b     #0x64, w4
    16f6:	84 4f 51    	sub.b     w2, w4, [w15]
    16f8:	14 00 32    	bra       Z, 0x1722 <.L6>
    16fa:	65 42 42    	add.b     w4, #0x5, w4
    16fc:	84 4f 51    	sub.b     w2, w4, [w15]
    16fe:	f1 00 3a    	bra       NZ, 0x18e2 <.L2>
    1700:	10 00 37    	bra       0x1722 <.L6>

00001702 <.L9>:
    1702:	04 c7 b3    	mov.b     #0x70, w4
    1704:	84 4f 51    	sub.b     w2, w4, [w15]
    1706:	dd 00 32    	bra       Z, 0x18c2 <.L8>
    1708:	56 00 35    	bra       LT, 0x17b6 <.L4>
    170a:	65 42 42    	add.b     w4, #0x5, w4
    170c:	84 4f 51    	sub.b     w2, w4, [w15]
    170e:	53 00 32    	bra       Z, 0x17b6 <.L4>
    1710:	63 42 42    	add.b     w4, #0x3, w4

00001712 <.L47>:
    1712:	84 4f 51    	sub.b     w2, w4, [w15]
    1714:	e6 00 3a    	bra       NZ, 0x18e2 <.L2>
    1716:	4f 00 37    	bra       0x17b6 <.L4>

00001718 <.L5>:
    1718:	11 81 e9    	dec2.w    [w1], w2
    171a:	82 08 78    	mov.w     w2, [w1]
    171c:	f0 00 90    	mov.w     [w0+14], w1
    171e:	12 41 78    	mov.b     [w2], w2
    1720:	de 00 37    	bra       0x18de <.L53>

00001722 <.L6>:
    1722:	20 62 90    	mov.b     [w0+34], w4
    1724:	c5 c6 b3    	mov.b     #0x6c, w5
    1726:	85 4f 52    	sub.b     w4, w5, [w15]
    1728:	07 00 3a    	bra       NZ, 0x1738 <.L12>
    172a:	91 02 78    	mov.w     [w1], w5
    172c:	64 82 52    	sub.w     w5, #0x4, w4
    172e:	84 08 78    	mov.w     w4, [w1]
    1730:	14 02 be    	mov.d     [w4], w4
    1732:	4f ab de    	asr.w     w5, #0xf, w6
    1734:	86 03 78    	mov.w     w6, w7
    1736:	14 00 37    	bra       0x1760 <.L13>

00001738 <.L12>:
    1738:	15 c7 b3    	mov.b     #0x71, w5
    173a:	85 4f 52    	sub.b     w4, w5, [w15]
    173c:	03 00 3a    	bra       NZ, 0x1744 <.L14>
    173e:	11 04 78    	mov.w     [w1], w8
    1740:	68 02 54    	sub.w     w8, #0x8, w4
    1742:	05 00 37    	bra       0x174e <.L43>

00001744 <.L14>:
    1744:	a5 c6 b3    	mov.b     #0x6a, w5
    1746:	85 4f 52    	sub.b     w4, w5, [w15]
    1748:	06 00 3a    	bra       NZ, 0x1756 <.L15>
    174a:	91 04 78    	mov.w     [w1], w9
    174c:	68 82 54    	sub.w     w9, #0x8, w4

0000174e <.L43>:
    174e:	84 08 78    	mov.w     w4, [w1]
    1750:	54 03 be    	mov.d     [++w4], w6
    1752:	44 02 be    	mov.d     [--w4], w4
    1754:	05 00 37    	bra       0x1760 <.L13>

00001756 <.L15>:
    1756:	11 82 e9    	dec2.w    [w1], w4
    1758:	84 08 78    	mov.w     w4, [w1]
    175a:	14 02 78    	mov.w     [w4], w4
    175c:	cf a2 de    	asr.w     w4, #0xf, w5
    175e:	61 2b b9    	mul.su    w5, #0x1, w6

00001760 <.L13>:
    1760:	04 98 be    	mov.d     w4, [w0++]
    1762:	06 90 be    	mov.d     w6, [w0--]
    1764:	a0 60 90    	mov.b     [w0+34], w1
    1766:	88 c6 b3    	mov.b     #0x68, w8
    1768:	88 cf 50    	sub.b     w1, w8, [w15]
    176a:	0d 00 32    	bra       Z, 0x1786 <.L19>
    176c:	28 c6 b3    	mov.b     #0x62, w8
    176e:	88 cf 50    	sub.b     w1, w8, [w15]
    1770:	04 00 3a    	bra       NZ, 0x177a <.L18>
    1772:	04 02 fb    	se        w4, w4
    1774:	cf a2 de    	asr.w     w4, #0xf, w5
    1776:	61 2b b9    	mul.su    w5, #0x1, w6
    1778:	08 00 37    	bra       0x178a <.L44>

0000177a <.L18>:
    177a:	48 c7 b3    	mov.b     #0x74, w8
    177c:	88 cf 50    	sub.b     w1, w8, [w15]
    177e:	03 00 32    	bra       Z, 0x1786 <.L19>
    1780:	66 44 44    	add.b     w8, #0x6, w8
    1782:	88 cf 50    	sub.b     w1, w8, [w15]
    1784:	04 00 3a    	bra       NZ, 0x178e <.L17>

00001786 <.L19>:
    1786:	cf a2 de    	asr.w     w4, #0xf, w5
    1788:	61 2b b9    	mul.su    w5, #0x1, w6

0000178a <.L44>:
    178a:	04 98 be    	mov.d     w4, [w0++]
    178c:	06 90 be    	mov.d     w6, [w0--]

0000178e <.L17>:
    178e:	30 02 be    	mov.d     [w0++], w4
    1790:	20 03 be    	mov.d     [w0--], w6
    1792:	f0 00 90    	mov.w     [w0+14], w1
    1794:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1796:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1798:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    179a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    179c:	02 00 3d    	bra       GE, 0x17a2 <.L20>
    179e:	d4 c2 b3    	mov.b     #0x2d, w4
    17a0:	08 00 37    	bra       0x17b2 <.L45>

000017a2 <.L20>:
    17a2:	00 12 90    	mov.w     [w0+32], w4
    17a4:	04 18 a3    	btst.z    w4, #0x1
    17a6:	02 00 32    	bra       Z, 0x17ac <.L22>
    17a8:	b4 c2 b3    	mov.b     #0x2b, w4
    17aa:	03 00 37    	bra       0x17b2 <.L45>

000017ac <.L22>:
    17ac:	04 08 a3    	btst.z    w4, #0x0
    17ae:	51 00 32    	bra       Z, 0x1852 <.L31>
    17b0:	04 c2 b3    	mov.b     #0x20, w4

000017b2 <.L45>:
    17b2:	84 f1 78    	mov.b     w4, [w3+w1]
    17b4:	4c 00 37    	bra       0x184e <.L54>

000017b6 <.L4>:
    17b6:	20 62 90    	mov.b     [w0+34], w4
    17b8:	c5 c6 b3    	mov.b     #0x6c, w5
    17ba:	85 4f 52    	sub.b     w4, w5, [w15]
    17bc:	08 00 3a    	bra       NZ, 0x17ce <.L23>
    17be:	11 05 78    	mov.w     [w1], w10
    17c0:	64 02 55    	sub.w     w10, #0x4, w4
    17c2:	84 08 78    	mov.w     w4, [w1]
    17c4:	14 04 be    	mov.d     [w4], w8
    17c6:	60 55 b8    	mul.uu    w10, #0x0, w10
    17c8:	08 02 be    	mov.d     w8, w4
    17ca:	0a 03 be    	mov.d     w10, w6
    17cc:	14 00 37    	bra       0x17f6 <.L24>

000017ce <.L23>:
    17ce:	15 c7 b3    	mov.b     #0x71, w5
    17d0:	85 4f 52    	sub.b     w4, w5, [w15]
    17d2:	03 00 3a    	bra       NZ, 0x17da <.L25>
    17d4:	91 04 78    	mov.w     [w1], w9
    17d6:	68 82 54    	sub.w     w9, #0x8, w4
    17d8:	05 00 37    	bra       0x17e4 <.L48>

000017da <.L25>:
    17da:	a5 c6 b3    	mov.b     #0x6a, w5
    17dc:	85 4f 52    	sub.b     w4, w5, [w15]
    17de:	06 00 3a    	bra       NZ, 0x17ec <.L26>
    17e0:	11 05 78    	mov.w     [w1], w10
    17e2:	68 02 55    	sub.w     w10, #0x8, w4

000017e4 <.L48>:
    17e4:	84 08 78    	mov.w     w4, [w1]
    17e6:	54 03 be    	mov.d     [++w4], w6
    17e8:	44 02 be    	mov.d     [--w4], w4
    17ea:	05 00 37    	bra       0x17f6 <.L24>

000017ec <.L26>:
    17ec:	11 82 e9    	dec2.w    [w1], w4
    17ee:	84 08 78    	mov.w     w4, [w1]
    17f0:	14 02 78    	mov.w     [w4], w4
    17f2:	80 02 eb    	clr.w     w5
    17f4:	60 33 b8    	mul.uu    w6, #0x0, w6

000017f6 <.L24>:
    17f6:	04 98 be    	mov.d     w4, [w0++]
    17f8:	06 90 be    	mov.d     w6, [w0--]
    17fa:	a0 60 90    	mov.b     [w0+34], w1
    17fc:	88 c6 b3    	mov.b     #0x68, w8
    17fe:	88 cf 50    	sub.b     w1, w8, [w15]
    1800:	0d 00 32    	bra       Z, 0x181c <.L30>
    1802:	28 c6 b3    	mov.b     #0x62, w8
    1804:	88 cf 50    	sub.b     w1, w8, [w15]
    1806:	04 00 3a    	bra       NZ, 0x1810 <.L29>
    1808:	04 82 fb    	ze        w4, w4
    180a:	80 02 eb    	clr.w     w5
    180c:	60 33 b8    	mul.uu    w6, #0x0, w6
    180e:	08 00 37    	bra       0x1820 <.L49>

00001810 <.L29>:
    1810:	48 c7 b3    	mov.b     #0x74, w8
    1812:	88 cf 50    	sub.b     w1, w8, [w15]
    1814:	03 00 32    	bra       Z, 0x181c <.L30>
    1816:	66 44 44    	add.b     w8, #0x6, w8
    1818:	88 cf 50    	sub.b     w1, w8, [w15]
    181a:	04 00 3a    	bra       NZ, 0x1824 <.L28>

0000181c <.L30>:
    181c:	80 02 eb    	clr.w     w5
    181e:	60 33 b8    	mul.uu    w6, #0x0, w6

00001820 <.L49>:
    1820:	04 98 be    	mov.d     w4, [w0++]
    1822:	06 90 be    	mov.d     w6, [w0--]

00001824 <.L28>:
    1824:	80 10 90    	mov.w     [w0+32], w1
    1826:	01 38 a3    	btst.z    w1, #0x3
    1828:	14 00 32    	bra       Z, 0x1852 <.L31>
    182a:	30 02 be    	mov.d     [w0++], w4
    182c:	20 03 be    	mov.d     [w0--], w6
    182e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1830:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1832:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1834:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1836:	0d 00 32    	bra       Z, 0x1852 <.L31>
    1838:	81 c7 b3    	mov.b     #0x78, w1
    183a:	81 4f 51    	sub.b     w2, w1, [w15]
    183c:	03 00 32    	bra       Z, 0x1844 <.L32>
    183e:	81 c5 b3    	mov.b     #0x58, w1
    1840:	81 4f 51    	sub.b     w2, w1, [w15]
    1842:	07 00 3a    	bra       NZ, 0x1852 <.L31>

00001844 <.L32>:
    1844:	f0 00 90    	mov.w     [w0+14], w1
    1846:	04 c3 b3    	mov.b     #0x30, w4
    1848:	84 f1 78    	mov.b     w4, [w3+w1]
    184a:	81 00 e8    	inc.w     w1, w1
    184c:	82 f1 78    	mov.b     w2, [w3+w1]

0000184e <.L54>:
    184e:	81 00 e8    	inc.w     w1, w1
    1850:	71 00 98    	mov.w     w1, [w0+14]

00001852 <.L31>:
    1852:	f0 00 90    	mov.w     [w0+14], w1
    1854:	81 81 41    	add.w     w3, w1, w3
    1856:	63 00 98    	mov.w     w3, [w0+12]
    1858:	82 40 78    	mov.b     w2, w1
    185a:	3e 00 37    	bra       0x18d8 <.L52>

0000185c <.L7>:
    185c:	a0 61 90    	mov.b     [w0+34], w3
    185e:	c4 c6 b3    	mov.b     #0x6c, w4
    1860:	11 81 e9    	dec2.w    [w1], w2
    1862:	84 cf 51    	sub.b     w3, w4, [w15]
    1864:	22 00 32    	bra       Z, 0x18aa <.L37>
    1866:	0a 00 3c    	bra       GT, 0x187c <.L41>
    1868:	64 42 52    	sub.b     w4, #0x4, w4
    186a:	84 cf 51    	sub.b     w3, w4, [w15]
    186c:	25 00 32    	bra       Z, 0x18b8 <.L51>
    186e:	04 c2 e8    	inc2.b    w4, w4
    1870:	84 cf 51    	sub.b     w3, w4, [w15]
    1872:	13 00 32    	bra       Z, 0x189a <.L36>
    1874:	68 42 52    	sub.b     w4, #0x8, w4
    1876:	84 cf 51    	sub.b     w3, w4, [w15]
    1878:	1e 00 3a    	bra       NZ, 0x18b6 <.L33>
    187a:	0a 00 37    	bra       0x1890 <.L55>

0000187c <.L41>:
    187c:	44 c7 b3    	mov.b     #0x74, w4
    187e:	84 cf 51    	sub.b     w3, w4, [w15]
    1880:	1b 00 32    	bra       Z, 0x18b8 <.L51>
    1882:	66 42 42    	add.b     w4, #0x6, w4
    1884:	84 cf 51    	sub.b     w3, w4, [w15]
    1886:	18 00 32    	bra       Z, 0x18b8 <.L51>
    1888:	69 42 52    	sub.b     w4, #0x9, w4
    188a:	84 cf 51    	sub.b     w3, w4, [w15]
    188c:	14 00 3a    	bra       NZ, 0x18b6 <.L33>
    188e:	05 00 37    	bra       0x189a <.L36>

00001890 <.L55>:
    1890:	82 08 78    	mov.w     w2, [w1]
    1892:	92 00 78    	mov.w     [w2], w1
    1894:	40 58 90    	mov.b     [w0+28], w0
    1896:	80 48 78    	mov.b     w0, [w1]
    1898:	2c 00 37    	bra       0x18f2 <.L11>

0000189a <.L36>:
    189a:	82 08 78    	mov.w     w2, [w1]
    189c:	92 00 78    	mov.w     [w2], w1
    189e:	60 0a 90    	mov.w     [w0+28], w4
    18a0:	cf a2 de    	asr.w     w4, #0xf, w5
    18a2:	61 2b b9    	mul.su    w5, #0x1, w6
    18a4:	84 98 be    	mov.d     w4, [w1++]
    18a6:	86 90 be    	mov.d     w6, [w1--]
    18a8:	24 00 37    	bra       0x18f2 <.L11>

000018aa <.L37>:
    18aa:	82 08 78    	mov.w     w2, [w1]
    18ac:	92 00 78    	mov.w     [w2], w1
    18ae:	60 09 90    	mov.w     [w0+28], w2
    18b0:	cf 91 de    	asr.w     w2, #0xf, w3
    18b2:	82 88 be    	mov.d     w2, [w1]
    18b4:	1e 00 37    	bra       0x18f2 <.L11>

000018b6 <.L33>:
    18b6:	11 81 e9    	dec2.w    [w1], w2

000018b8 <.L51>:
    18b8:	82 08 78    	mov.w     w2, [w1]
    18ba:	92 00 78    	mov.w     [w2], w1
    18bc:	60 08 90    	mov.w     [w0+28], w0
    18be:	80 08 78    	mov.w     w0, [w1]
    18c0:	18 00 37    	bra       0x18f2 <.L11>

000018c2 <.L8>:
    18c2:	11 81 e9    	dec2.w    [w1], w2
    18c4:	82 08 78    	mov.w     w2, [w1]
    18c6:	12 02 78    	mov.w     [w2], w4
    18c8:	cf a2 de    	asr.w     w4, #0xf, w5
    18ca:	61 2b b9    	mul.su    w5, #0x1, w6
    18cc:	04 98 be    	mov.d     w4, [w0++]
    18ce:	06 90 be    	mov.d     w6, [w0--]
    18d0:	f0 00 90    	mov.w     [w0+14], w1
    18d2:	81 81 41    	add.w     w3, w1, w3
    18d4:	63 00 98    	mov.w     w3, [w0+12]
    18d6:	81 c7 b3    	mov.b     #0x78, w1

000018d8 <.L52>:
    18d8:	b5 00 07    	rcall     0x1a44 <__Litob>
    18da:	0b 00 37    	bra       0x18f2 <.L11>

000018dc <.L3>:
    18dc:	f0 00 90    	mov.w     [w0+14], w1

000018de <.L53>:
    18de:	82 f1 78    	mov.b     w2, [w3+w1]
    18e0:	06 00 37    	bra       0x18ee <.L50>

000018e2 <.L2>:
    18e2:	f0 00 90    	mov.w     [w0+14], w1
    18e4:	81 81 41    	add.w     w3, w1, w3
    18e6:	02 04 e0    	cp0.b     w2
    18e8:	01 00 3a    	bra       NZ, 0x18ec <.L42>
    18ea:	52 c2 b3    	mov.b     #0x25, w2

000018ec <.L42>:
    18ec:	82 49 78    	mov.b     w2, [w3]

000018ee <.L50>:
    18ee:	81 00 e8    	inc.w     w1, w1
    18f0:	71 00 98    	mov.w     w1, [w0+14]

000018f2 <.L11>:
    18f2:	00 00 eb    	clr.w     w0
    18f4:	4f 05 be    	mov.d     [--w15], w10
    18f6:	4f 04 be    	mov.d     [--w15], w8
    18f8:	00 00 06    	return    

000018fa <_free>:
    18fa:	00 00 e0    	cp0.w     w0
    18fc:	2f 00 32    	bra       Z, 0x195c <.L1>
    18fe:	c0 01 78    	mov.w     [--w0], w3
    1900:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1902:	2c 00 36    	bra       LEU, 0x195c <.L1>
    1904:	03 08 a3    	btst.z    w3, #0x0
    1906:	2a 00 3a    	bra       NZ, 0x195c <.L1>
    1908:	81 8e 80    	mov.w     0x11d0, w1
    190a:	01 00 e0    	cp0.w     w1
    190c:	02 00 32    	bra       Z, 0x1912 <.L3>
    190e:	81 0f 50    	sub.w     w0, w1, [w15]
    1910:	04 00 31    	bra       C, 0x191a <.L7>

00001912 <.L3>:
    1912:	11 00 98    	mov.w     w1, [w0+2]
    1914:	80 8e 88    	mov.w     w0, 0x11d0
    1916:	16 00 37    	bra       0x1944 <.L5>

00001918 <.L11>:
    1918:	82 00 78    	mov.w     w2, w1

0000191a <.L7>:
    191a:	11 01 90    	mov.w     [w1+2], w2
    191c:	02 00 e0    	cp0.w     w2
    191e:	02 00 32    	bra       Z, 0x1924 <.L6>
    1920:	80 0f 51    	sub.w     w2, w0, [w15]
    1922:	fa ff 39    	bra       NC, 0x1918 <.L11>

00001924 <.L6>:
    1924:	11 02 78    	mov.w     [w1], w4
    1926:	84 82 40    	add.w     w1, w4, w5
    1928:	85 0f 50    	sub.w     w0, w5, [w15]
    192a:	18 00 39    	bra       NC, 0x195c <.L1>
    192c:	80 8f 52    	sub.w     w5, w0, [w15]
    192e:	03 00 3a    	bra       NZ, 0x1936 <.L8>
    1930:	83 08 42    	add.w     w4, w3, [w1]
    1932:	01 00 78    	mov.w     w1, w0
    1934:	07 00 37    	bra       0x1944 <.L5>

00001936 <.L8>:
    1936:	02 00 e0    	cp0.w     w2
    1938:	03 00 32    	bra       Z, 0x1940 <.L9>
    193a:	83 01 40    	add.w     w0, w3, w3
    193c:	83 0f 51    	sub.w     w2, w3, [w15]
    193e:	0e 00 39    	bra       NC, 0x195c <.L1>

00001940 <.L9>:
    1940:	12 00 98    	mov.w     w2, [w0+2]
    1942:	90 00 98    	mov.w     w0, [w1+2]

00001944 <.L5>:
    1944:	90 00 90    	mov.w     [w0+2], w1
    1946:	01 00 e0    	cp0.w     w1
    1948:	09 00 32    	bra       Z, 0x195c <.L1>
    194a:	10 01 40    	add.w     w0, [w0], w2
    194c:	82 8f 50    	sub.w     w1, w2, [w15]
    194e:	06 00 3a    	bra       NZ, 0x195c <.L1>
    1950:	e2 1c 21    	mov.w     #0x11ce, w2
    1952:	00 09 eb    	clr.w     [w2]
    1954:	10 01 78    	mov.w     [w0], w2
    1956:	11 08 41    	add.w     w2, [w1], [w0]
    1958:	91 00 90    	mov.w     [w1+2], w1
    195a:	11 00 98    	mov.w     w1, [w0+2]

0000195c <.L1>:
    195c:	00 00 06    	return    

0000195e <_findmem>:
    195e:	88 9f be    	mov.d     w8, [w15++]
    1960:	00 04 78    	mov.w     w0, w8

00001962 <.L14>:
    1962:	71 8e 80    	mov.w     0x11ce, w1
    1964:	01 00 e0    	cp0.w     w1
    1966:	02 00 32    	bra       Z, 0x196c <.L2>
    1968:	01 00 78    	mov.w     w1, w0
    196a:	0d 00 37    	bra       0x1986 <.L3>

0000196c <.L2>:
    196c:	81 8e 80    	mov.w     0x11d0, w1
    196e:	00 1d 21    	mov.w     #0x11d0, w0
    1970:	04 00 37    	bra       0x197a <.L4>

00001972 <.L6>:
    1972:	91 0f 54    	sub.w     w8, [w1], [w15]
    1974:	25 00 36    	bra       LEU, 0x19c0 <.L5>
    1976:	01 80 e8    	inc2.w    w1, w0
    1978:	91 00 90    	mov.w     [w1+2], w1

0000197a <.L4>:
    197a:	01 00 e0    	cp0.w     w1
    197c:	fa ff 3a    	bra       NZ, 0x1972 <.L6>
    197e:	10 00 37    	bra       0x19a0 <.L7>

00001980 <.L8>:
    1980:	92 0f 54    	sub.w     w8, [w2], [w15]
    1982:	1e 00 36    	bra       LEU, 0x19c0 <.L5>
    1984:	02 80 e8    	inc2.w    w2, w0

00001986 <.L3>:
    1986:	10 01 78    	mov.w     [w0], w2
    1988:	02 00 e0    	cp0.w     w2
    198a:	fa ff 3a    	bra       NZ, 0x1980 <.L8>
    198c:	11 01 78    	mov.w     [w1], w2
    198e:	81 8e 80    	mov.w     0x11d0, w1
    1990:	00 1d 21    	mov.w     #0x11d0, w0
    1992:	04 00 37    	bra       0x199c <.L9>

00001994 <.L10>:
    1994:	91 0f 54    	sub.w     w8, [w1], [w15]
    1996:	14 00 36    	bra       LEU, 0x19c0 <.L5>
    1998:	01 80 e8    	inc2.w    w1, w0
    199a:	91 00 90    	mov.w     [w1+2], w1

0000199c <.L9>:
    199c:	82 8f 50    	sub.w     w1, w2, [w15]
    199e:	fa ff 3a    	bra       NZ, 0x1994 <.L10>

000019a0 <.L7>:
    19a0:	a9 8e 80    	mov.w     0x11d4, w9

000019a2 <.L13>:
    19a2:	88 8f 54    	sub.w     w9, w8, [w15]
    19a4:	01 00 31    	bra       C, 0x19a8 <.L11>
    19a6:	88 04 78    	mov.w     w8, w9

000019a8 <.L11>:
    19a8:	09 00 78    	mov.w     w9, w0
    19aa:	42 00 07    	rcall     0x1a30 <__Getmem>
    19ac:	00 00 e0    	cp0.w     w0
    19ae:	04 00 3a    	bra       NZ, 0x19b8 <.L12>
    19b0:	88 8f 54    	sub.w     w9, w8, [w15]
    19b2:	05 00 32    	bra       Z, 0x19be <.L15>
    19b4:	89 04 d1    	lsr.w     w9, w9
    19b6:	f5 ff 37    	bra       0x19a2 <.L13>

000019b8 <.L12>:
    19b8:	09 18 78    	mov.w     w9, [w0++]
    19ba:	9f ff 07    	rcall     0x18fa <_free>
    19bc:	d2 ff 37    	bra       0x1962 <.L14>

000019be <.L15>:
    19be:	00 00 eb    	clr.w     w0

000019c0 <.L5>:
    19c0:	4f 04 be    	mov.d     [--w15], w8
    19c2:	00 00 06    	return    

000019c4 <_malloc>:
    19c4:	88 1f 78    	mov.w     w8, [w15++]
    19c6:	63 04 40    	add.w     w0, #0x3, w8
    19c8:	08 00 a1    	bclr.w    w8, #0x0
    19ca:	80 00 eb    	clr.w     w1
    19cc:	80 0f 54    	sub.w     w8, w0, [w15]
    19ce:	21 00 36    	bra       LEU, 0x1a12 <.L17>
    19d0:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    19d2:	01 00 3e    	bra       GTU, 0x19d6 <.L18>
    19d4:	48 00 20    	mov.w     #0x4, w8

000019d6 <.L18>:
    19d6:	08 00 78    	mov.w     w8, w0
    19d8:	c2 ff 07    	rcall     0x195e <_findmem>
    19da:	80 00 eb    	clr.w     w1
    19dc:	00 00 e0    	cp0.w     w0
    19de:	19 00 32    	bra       Z, 0x1a12 <.L17>
    19e0:	90 00 78    	mov.w     [w0], w1
    19e2:	91 01 78    	mov.w     [w1], w3
    19e4:	64 81 51    	sub.w     w3, #0x4, w2
    19e6:	88 0f 51    	sub.w     w2, w8, [w15]
    19e8:	03 00 31    	bra       C, 0x19f0 <.L19>
    19ea:	11 01 90    	mov.w     [w1+2], w2
    19ec:	02 08 78    	mov.w     w2, [w0]
    19ee:	07 00 37    	bra       0x19fe <.L20>

000019f0 <.L19>:
    19f0:	08 81 40    	add.w     w1, w8, w2
    19f2:	02 08 78    	mov.w     w2, [w0]
    19f4:	91 01 90    	mov.w     [w1+2], w3
    19f6:	13 01 98    	mov.w     w3, [w2+2]
    19f8:	10 01 78    	mov.w     [w0], w2
    19fa:	11 09 14    	subr.w    w8, [w1], [w2]
    19fc:	88 08 78    	mov.w     w8, [w1]

000019fe <.L20>:
    19fe:	10 01 78    	mov.w     [w0], w2
    1a00:	00 00 eb    	clr.w     w0
    1a02:	02 00 e0    	cp0.w     w2
    1a04:	04 00 32    	bra       Z, 0x1a0e <.L21>
    1a06:	92 01 90    	mov.w     [w2+2], w3
    1a08:	03 00 e0    	cp0.w     w3
    1a0a:	01 00 32    	bra       Z, 0x1a0e <.L21>
    1a0c:	02 80 e8    	inc2.w    w2, w0

00001a0e <.L21>:
    1a0e:	70 8e 88    	mov.w     w0, 0x11ce
    1a10:	81 80 e8    	inc2.w    w1, w1

00001a12 <.L17>:
    1a12:	01 00 78    	mov.w     w1, w0
    1a14:	4f 04 78    	mov.w     [--w15], w8
    1a16:	00 00 06    	return    

00001a18 <_strchr>:
    1a18:	02 00 37    	bra       0x1a1e <.L2>

00001a1a <.L4>:
    1a1a:	03 04 e0    	cp0.b     w3
    1a1c:	06 00 32    	bra       Z, 0x1a2a <.L5>

00001a1e <.L2>:
    1a1e:	00 01 78    	mov.w     w0, w2
    1a20:	02 00 78    	mov.w     w2, w0
    1a22:	b0 41 78    	mov.b     [w0++], w3
    1a24:	81 cf 51    	sub.b     w3, w1, [w15]
    1a26:	f9 ff 3a    	bra       NZ, 0x1a1a <.L4>
    1a28:	01 00 37    	bra       0x1a2c <.L3>

00001a2a <.L5>:
    1a2a:	00 01 eb    	clr.w     w2

00001a2c <.L3>:
    1a2c:	02 00 78    	mov.w     w2, w0
    1a2e:	00 00 06    	return    

00001a30 <__Getmem>:
    1a30:	80 00 78    	mov.w     w0, w1
    1a32:	00 00 eb    	clr.w     w0
    1a34:	01 00 e0    	cp0.w     w1
    1a36:	05 00 34    	bra       LE, 0x1a42 <.L2>
    1a38:	01 00 78    	mov.w     w1, w0
    1a3a:	0e fc 07    	rcall     0x1258 <_sbrk>
    1a3c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a3e:	01 00 3a    	bra       NZ, 0x1a42 <.L2>
    1a40:	00 00 eb    	clr.w     w0

00001a42 <.L2>:
    1a42:	00 00 06    	return    

00001a44 <__Litob>:
    1a44:	fc 87 47    	add.w     w15, #0x1c, w15
    1a46:	88 9f be    	mov.d     w8, [w15++]
    1a48:	8a 9f be    	mov.d     w10, [w15++]
    1a4a:	8c 9f be    	mov.d     w12, [w15++]
    1a4c:	8e 1f 78    	mov.w     w14, [w15++]
    1a4e:	00 06 78    	mov.w     w0, w12
    1a50:	80 c5 b3    	mov.b     #0x58, w0
    1a52:	80 cf 50    	sub.b     w1, w0, [w15]
    1a54:	0a 00 32    	bra       Z, 0x1a6a <.L35>
    1a56:	77 40 40    	add.b     w0, #0x17, w0
    1a58:	80 cf 50    	sub.b     w1, w0, [w15]
    1a5a:	0a 00 32    	bra       Z, 0x1a70 <.L36>
    1a5c:	69 40 40    	add.b     w0, #0x9, w0
    1a5e:	80 cf 50    	sub.b     w1, w0, [w15]
    1a60:	0b 00 32    	bra       Z, 0x1a78 <.L37>
    1a62:	30 1a 21    	mov.w     #0x11a3, w0
    1a64:	80 bf 9f    	mov.w     w0, [w15-16]
    1a66:	ae 00 20    	mov.w     #0xa, w14
    1a68:	0a 00 37    	bra       0x1a7e <.L2>

00001a6a <.L35>:
    1a6a:	22 19 21    	mov.w     #0x1192, w2
    1a6c:	82 bf 9f    	mov.w     w2, [w15-16]
    1a6e:	06 00 37    	bra       0x1a7c <.L46>

00001a70 <.L36>:
    1a70:	33 1a 21    	mov.w     #0x11a3, w3
    1a72:	83 bf 9f    	mov.w     w3, [w15-16]
    1a74:	8e 00 20    	mov.w     #0x8, w14
    1a76:	03 00 37    	bra       0x1a7e <.L2>

00001a78 <.L37>:
    1a78:	34 1a 21    	mov.w     #0x11a3, w4
    1a7a:	84 bf 9f    	mov.w     w4, [w15-16]

00001a7c <.L46>:
    1a7c:	0e 01 20    	mov.w     #0x10, w14

00001a7e <.L2>:
    1a7e:	3c 02 be    	mov.d     [w12++], w4
    1a80:	2c 03 be    	mov.d     [w12--], w6
    1a82:	06 05 be    	mov.d     w6, w10
    1a84:	04 04 be    	mov.d     w4, w8
    1a86:	40 c6 b3    	mov.b     #0x64, w0
    1a88:	80 cf 50    	sub.b     w1, w0, [w15]
    1a8a:	03 00 32    	bra       Z, 0x1a92 <.L3>
    1a8c:	65 40 40    	add.b     w0, #0x5, w0
    1a8e:	80 cf 50    	sub.b     w1, w0, [w15]
    1a90:	0b 00 3a    	bra       NZ, 0x1aa8 <.L4>

00001a92 <.L3>:
    1a92:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a94:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a96:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a98:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a9a:	06 00 3d    	bra       GE, 0x1aa8 <.L4>
    1a9c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1a9e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1aa0:	04 04 50    	sub.w     w0, w4, w8
    1aa2:	85 84 58    	subb.w    w1, w5, w9
    1aa4:	06 05 59    	subb.w    w2, w6, w10
    1aa6:	87 85 59    	subb.w    w3, w7, w11

00001aa8 <.L4>:
    1aa8:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1aaa:	04 00 32    	bra       Z, 0x1ab4 <.L38>
    1aac:	40 00 20    	mov.w     #0x4, w0
    1aae:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1ab0:	38 00 3a    	bra       NZ, 0x1b22 <.L51>
    1ab2:	01 00 37    	bra       0x1ab6 <.L6>

00001ab4 <.L38>:
    1ab4:	30 00 20    	mov.w     #0x3, w0

00001ab6 <.L6>:
    1ab6:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1ab8:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1aba:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1abc:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1abe:	04 00 3a    	bra       NZ, 0x1ac8 <.L8>
    1ac0:	dc 08 90    	mov.w     [w12+26], w1
    1ac2:	8d 01 20    	mov.w     #0x18, w13
    1ac4:	01 00 e0    	cp0.w     w1
    1ac6:	06 00 32    	bra       Z, 0x1ad4 <.L9>

00001ac8 <.L8>:
    1ac8:	8e 00 e9    	dec.w     w14, w1
    1aca:	88 80 60    	and.w     w1, w8, w1
    1acc:	8f ba 97    	mov.w     [w15-16], w5
    1ace:	e5 c0 78    	mov.b     [w5+w1], w1
    1ad0:	f1 ef 9f    	mov.b     w1, [w15-17]
    1ad2:	7d 01 20    	mov.w     #0x17, w13

00001ad4 <.L9>:
    1ad4:	80 00 78    	mov.w     w0, w1

00001ad6 <.LB101>:
    1ad6:	81 00 e9    	dec.w     w1, w1
    1ad8:	05 00 33    	bra       N, 0x1ae4 <.LE101>
    1ada:	8b 05 d1    	lsr.w     w11, w11
    1adc:	0a 85 d3    	rrc.w     w10, w10
    1ade:	89 84 d3    	rrc.w     w9, w9
    1ae0:	08 84 d3    	rrc.w     w8, w8
    1ae2:	f9 ff 37    	bra       0x1ad6 <.LB101>

00001ae4 <.LE101>:
    1ae4:	08 9e be    	mov.d     w8, [w12++]
    1ae6:	0a 96 be    	mov.d     w10, [w12--]
    1ae8:	12 00 37    	bra       0x1b0e <.L10>

00001aea <.L12>:
    1aea:	8d 06 e9    	dec.w     w13, w13
    1aec:	8e 00 e9    	dec.w     w14, w1
    1aee:	84 80 60    	and.w     w1, w4, w1
    1af0:	0f b9 97    	mov.w     [w15-16], w2
    1af2:	e2 c1 78    	mov.b     [w2+w1], w3
    1af4:	82 fd 2f    	mov.w     #0xffd8, w2
    1af6:	0f 01 41    	add.w     w2, w15, w2
    1af8:	03 f1 7e    	mov.b     w3, [w2+w13]
    1afa:	80 00 78    	mov.w     w0, w1

00001afc <.LB115>:
    1afc:	81 00 e9    	dec.w     w1, w1
    1afe:	05 00 33    	bra       N, 0x1b0a <.LE115>
    1b00:	87 83 d1    	asr.w     w7, w7
    1b02:	06 83 d3    	rrc.w     w6, w6
    1b04:	85 82 d3    	rrc.w     w5, w5
    1b06:	04 82 d3    	rrc.w     w4, w4
    1b08:	f9 ff 37    	bra       0x1afc <.LB115>

00001b0a <.LE115>:
    1b0a:	04 9e be    	mov.d     w4, [w12++]
    1b0c:	06 96 be    	mov.d     w6, [w12--]

00001b0e <.L10>:
    1b0e:	3c 02 be    	mov.d     [w12++], w4
    1b10:	2c 03 be    	mov.d     [w12--], w6
    1b12:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b14:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b16:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b18:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b1a:	8b 00 34    	bra       LE, 0x1c32 <.L11>
    1b1c:	0d 00 e0    	cp0.w     w13
    1b1e:	e5 ff 3c    	bra       GT, 0x1aea <.L12>
    1b20:	88 00 37    	bra       0x1c32 <.L11>

00001b22 <.L51>:
    1b22:	2c 60 90    	mov.b     [w12+34], w0
    1b24:	81 c6 b3    	mov.b     #0x68, w1
    1b26:	81 4f 50    	sub.b     w0, w1, [w15]
    1b28:	0b 00 32    	bra       Z, 0x1b40 <.L14>
    1b2a:	06 00 3c    	bra       GT, 0x1b38 <.L16>
    1b2c:	00 04 e0    	cp0.b     w0
    1b2e:	08 00 32    	bra       Z, 0x1b40 <.L14>
    1b30:	e6 c0 50    	sub.b     w1, #0x6, w1
    1b32:	81 4f 50    	sub.b     w0, w1, [w15]
    1b34:	4e 00 3a    	bra       NZ, 0x1bd2 <.L13>
    1b36:	04 00 37    	bra       0x1b40 <.L14>

00001b38 <.L16>:
    1b38:	c1 c6 b3    	mov.b     #0x6c, w1
    1b3a:	81 4f 50    	sub.b     w0, w1, [w15]
    1b3c:	4a 00 3a    	bra       NZ, 0x1bd2 <.L13>
    1b3e:	21 00 37    	bra       0x1b82 <.L52>

00001b40 <.L14>:
    1b40:	08 00 e0    	cp0.w     w8
    1b42:	04 00 3a    	bra       NZ, 0x1b4c <.L17>
    1b44:	5c 08 90    	mov.w     [w12+26], w0
    1b46:	8d 01 20    	mov.w     #0x18, w13
    1b48:	00 00 e0    	cp0.w     w0
    1b4a:	06 00 32    	bra       Z, 0x1b58 <.L18>

00001b4c <.L17>:
    1b4c:	11 00 09    	repeat    #0x11
    1b4e:	0e 84 d8    	div.uw    w8, w14
    1b50:	0f b9 97    	mov.w     [w15-16], w2
    1b52:	e2 c0 78    	mov.b     [w2+w1], w1
    1b54:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b56:	7d 01 20    	mov.w     #0x17, w13

00001b58 <.L18>:
    1b58:	11 00 09    	repeat    #0x11
    1b5a:	0e 84 d8    	div.uw    w8, w14
    1b5c:	0a 00 37    	bra       0x1b72 <.L47>

00001b5e <.L21>:
    1b5e:	11 00 09    	repeat    #0x11
    1b60:	0e 04 d8    	div.sw    w8, w14
    1b62:	8d 06 e9    	dec.w     w13, w13
    1b64:	0e 81 b9    	mul.ss    w0, w14, w2
    1b66:	02 04 54    	sub.w     w8, w2, w8
    1b68:	8f b8 97    	mov.w     [w15-16], w1
    1b6a:	61 41 7c    	mov.b     [w1+w8], w2
    1b6c:	81 fd 2f    	mov.w     #0xffd8, w1
    1b6e:	8f 80 40    	add.w     w1, w15, w1
    1b70:	82 f0 7e    	mov.b     w2, [w1+w13]

00001b72 <.L47>:
    1b72:	00 04 78    	mov.w     w0, w8
    1b74:	08 00 e0    	cp0.w     w8
    1b76:	02 00 32    	bra       Z, 0x1b7c <.L20>
    1b78:	0d 00 e0    	cp0.w     w13
    1b7a:	f1 ff 3c    	bra       GT, 0x1b5e <.L21>

00001b7c <.L20>:
    1b7c:	cf c4 de    	asr.w     w8, #0xf, w9
    1b7e:	61 4d b9    	mul.su    w9, #0x1, w10
    1b80:	25 00 37    	bra       0x1bcc <.L50>

00001b82 <.L52>:
    1b82:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b84:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b86:	04 00 3a    	bra       NZ, 0x1b90 <.L22>
    1b88:	5c 08 90    	mov.w     [w12+26], w0
    1b8a:	8d 01 20    	mov.w     #0x18, w13
    1b8c:	00 00 e0    	cp0.w     w0
    1b8e:	07 00 32    	bra       Z, 0x1b9e <.L23>

00001b90 <.L22>:
    1b90:	61 71 b9    	mul.su    w14, #0x1, w2
    1b92:	08 00 be    	mov.d     w8, w0
    1b94:	67 01 07    	rcall     0x1e64 <___umodsi3>
    1b96:	8f b9 97    	mov.w     [w15-16], w3
    1b98:	e3 41 78    	mov.b     [w3+w0], w3
    1b9a:	f3 ef 9f    	mov.b     w3, [w15-17]
    1b9c:	7d 01 20    	mov.w     #0x17, w13

00001b9e <.L23>:
    1b9e:	61 71 b9    	mul.su    w14, #0x1, w2
    1ba0:	08 00 be    	mov.d     w8, w0
    1ba2:	50 01 07    	rcall     0x1e44 <___udivsi3>
    1ba4:	0b 00 37    	bra       0x1bbc <.L48>

00001ba6 <.L26>:
    1ba6:	61 71 b9    	mul.su    w14, #0x1, w2
    1ba8:	08 00 be    	mov.d     w8, w0
    1baa:	3d 01 07    	rcall     0x1e26 <___divsi3>
    1bac:	8d 06 e9    	dec.w     w13, w13
    1bae:	00 f1 b9    	mul.ss    w14, w0, w2
    1bb0:	02 04 54    	sub.w     w8, w2, w8
    1bb2:	0f ba 97    	mov.w     [w15-16], w4
    1bb4:	e4 42 7c    	mov.b     [w4+w8], w5
    1bb6:	84 fd 2f    	mov.w     #0xffd8, w4
    1bb8:	0f 02 42    	add.w     w4, w15, w4
    1bba:	05 f2 7e    	mov.b     w5, [w4+w13]

00001bbc <.L48>:
    1bbc:	00 04 be    	mov.d     w0, w8
    1bbe:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1bc0:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1bc2:	02 00 32    	bra       Z, 0x1bc8 <.L25>
    1bc4:	0d 00 e0    	cp0.w     w13
    1bc6:	ef ff 3c    	bra       GT, 0x1ba6 <.L26>

00001bc8 <.L25>:
    1bc8:	4f cd de    	asr.w     w9, #0xf, w10
    1bca:	8a 05 78    	mov.w     w10, w11

00001bcc <.L50>:
    1bcc:	08 9e be    	mov.d     w8, [w12++]
    1bce:	0a 96 be    	mov.d     w10, [w12--]
    1bd0:	30 00 37    	bra       0x1c32 <.L11>

00001bd2 <.L13>:
    1bd2:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1bd4:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1bd6:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1bd8:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1bda:	04 00 3a    	bra       NZ, 0x1be4 <.L27>
    1bdc:	5c 08 90    	mov.w     [w12+26], w0
    1bde:	8d 01 20    	mov.w     #0x18, w13
    1be0:	00 00 e0    	cp0.w     w0
    1be2:	09 00 32    	bra       Z, 0x1bf6 <.L28>

00001be4 <.L27>:
    1be4:	61 72 b9    	mul.su    w14, #0x1, w4
    1be6:	61 2b b9    	mul.su    w5, #0x1, w6
    1be8:	08 00 be    	mov.d     w8, w0
    1bea:	0a 01 be    	mov.d     w10, w2
    1bec:	e4 01 07    	rcall     0x1fb6 <___umoddi3>
    1bee:	0f ba 97    	mov.w     [w15-16], w4
    1bf0:	64 42 78    	mov.b     [w4+w0], w4
    1bf2:	f4 ef 9f    	mov.b     w4, [w15-17]
    1bf4:	7d 01 20    	mov.w     #0x17, w13

00001bf6 <.L28>:
    1bf6:	61 72 b9    	mul.su    w14, #0x1, w4
    1bf8:	61 2b b9    	mul.su    w5, #0x1, w6
    1bfa:	08 00 be    	mov.d     w8, w0
    1bfc:	0a 01 be    	mov.d     w10, w2
    1bfe:	d4 01 07    	rcall     0x1fa8 <___udivdi3>
    1c00:	0d 00 37    	bra       0x1c1c <.L49>

00001c02 <.L30>:
    1c02:	61 72 b9    	mul.su    w14, #0x1, w4
    1c04:	61 2b b9    	mul.su    w5, #0x1, w6
    1c06:	08 00 be    	mov.d     w8, w0
    1c08:	0a 01 be    	mov.d     w10, w2
    1c0a:	d9 01 07    	rcall     0x1fbe <___divdi3>
    1c0c:	8d 06 e9    	dec.w     w13, w13
    1c0e:	00 f2 b9    	mul.ss    w14, w0, w4
    1c10:	04 04 54    	sub.w     w8, w4, w8
    1c12:	8f ba 97    	mov.w     [w15-16], w5
    1c14:	65 42 7c    	mov.b     [w5+w8], w4
    1c16:	85 fd 2f    	mov.w     #0xffd8, w5
    1c18:	8f 82 42    	add.w     w5, w15, w5
    1c1a:	84 f2 7e    	mov.b     w4, [w5+w13]

00001c1c <.L49>:
    1c1c:	00 9e be    	mov.d     w0, [w12++]
    1c1e:	02 96 be    	mov.d     w2, [w12--]
    1c20:	3c 04 be    	mov.d     [w12++], w8
    1c22:	2c 05 be    	mov.d     [w12--], w10
    1c24:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c26:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c28:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c2a:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c2c:	02 00 34    	bra       LE, 0x1c32 <.L11>
    1c2e:	0d 00 e0    	cp0.w     w13
    1c30:	e8 ff 3c    	bra       GT, 0x1c02 <.L30>

00001c32 <.L11>:
    1c32:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1c34:	10 00 3a    	bra       NZ, 0x1c56 <.L31>
    1c36:	0c 10 90    	mov.w     [w12+32], w0
    1c38:	00 38 a3    	btst.z    w0, #0x3
    1c3a:	0d 00 32    	bra       Z, 0x1c56 <.L31>
    1c3c:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1c3e:	06 00 3e    	bra       GTU, 0x1c4c <.L32>
    1c40:	85 fd 2f    	mov.w     #0xffd8, w5
    1c42:	8f 82 42    	add.w     w5, w15, w5
    1c44:	e5 c0 7e    	mov.b     [w5+w13], w1
    1c46:	00 c3 b3    	mov.b     #0x30, w0
    1c48:	80 cf 50    	sub.b     w1, w0, [w15]
    1c4a:	05 00 32    	bra       Z, 0x1c56 <.L31>

00001c4c <.L32>:
    1c4c:	8d 06 e9    	dec.w     w13, w13
    1c4e:	02 c3 b3    	mov.b     #0x30, w2
    1c50:	81 fd 2f    	mov.w     #0xffd8, w1
    1c52:	8f 80 40    	add.w     w1, w15, w1
    1c54:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c56 <.L31>:
    1c56:	78 81 16    	subr.w    w13, #0x18, w2
    1c58:	12 0e 98    	mov.w     w2, [w12+18]
    1c5a:	6c 00 90    	mov.w     [w12+12], w0
    1c5c:	83 fd 2f    	mov.w     #0xffd8, w3
    1c5e:	8f 81 41    	add.w     w3, w15, w3
    1c60:	8d 80 41    	add.w     w3, w13, w1
    1c62:	90 fb 07    	rcall     0x1384 <_memcpy>
    1c64:	1c 08 90    	mov.w     [w12+18], w0
    1c66:	dc 08 90    	mov.w     [w12+26], w1
    1c68:	81 0f 50    	sub.w     w0, w1, [w15]
    1c6a:	06 00 3d    	bra       GE, 0x1c78 <.L33>
    1c6c:	00 80 50    	sub.w     w1, w0, w0
    1c6e:	00 0e 98    	mov.w     w0, [w12+16]
    1c70:	0c 10 90    	mov.w     [w12+32], w0
    1c72:	00 40 a1    	bclr.w    w0, #0x4
    1c74:	00 16 98    	mov.w     w0, [w12+32]
    1c76:	0f 00 37    	bra       0x1c96 <.L1>

00001c78 <.L33>:
    1c78:	01 00 e0    	cp0.w     w1
    1c7a:	0d 00 3d    	bra       GE, 0x1c96 <.L1>
    1c7c:	8c 10 90    	mov.w     [w12+32], w1
    1c7e:	f4 80 60    	and.w     w1, #0x14, w1
    1c80:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1c82:	09 00 3a    	bra       NZ, 0x1c96 <.L1>
    1c84:	7c 09 90    	mov.w     [w12+30], w2
    1c86:	fc 00 90    	mov.w     [w12+14], w1
    1c88:	81 00 51    	sub.w     w2, w1, w1
    1c8a:	0c 09 90    	mov.w     [w12+16], w2
    1c8c:	82 80 50    	sub.w     w1, w2, w1
    1c8e:	00 80 50    	sub.w     w1, w0, w0
    1c90:	42 40 a9    	bclr.b    0x42, #0x2
    1c92:	01 00 34    	bra       LE, 0x1c96 <.L1>
    1c94:	00 0e 98    	mov.w     w0, [w12+16]

00001c96 <.L1>:
    1c96:	4f 07 78    	mov.w     [--w15], w14
    1c98:	4f 06 be    	mov.d     [--w15], w12
    1c9a:	4f 05 be    	mov.d     [--w15], w10
    1c9c:	4f 04 be    	mov.d     [--w15], w8
    1c9e:	cf 01 b1    	sub.w     #0x1c, w15
    1ca0:	00 00 06    	return    

00001ca2 <__Puttxt>:
    1ca2:	04 00 fa    	lnk       #0x4
    1ca4:	88 9f be    	mov.d     w8, [w15++]
    1ca6:	8a 9f be    	mov.d     w10, [w15++]
    1ca8:	8c 1f 78    	mov.w     w12, [w15++]
    1caa:	00 04 78    	mov.w     w0, w8
    1cac:	01 06 78    	mov.w     w1, w12
    1cae:	f8 0d 90    	mov.w     [w8+30], w11
    1cb0:	78 00 90    	mov.w     [w8+14], w0
    1cb2:	80 85 55    	sub.w     w11, w0, w11
    1cb4:	08 08 90    	mov.w     [w8+16], w0
    1cb6:	80 85 55    	sub.w     w11, w0, w11
    1cb8:	18 08 90    	mov.w     [w8+18], w0
    1cba:	80 85 55    	sub.w     w11, w0, w11
    1cbc:	28 08 90    	mov.w     [w8+20], w0
    1cbe:	80 85 55    	sub.w     w11, w0, w11
    1cc0:	38 08 90    	mov.w     [w8+22], w0
    1cc2:	80 85 55    	sub.w     w11, w0, w11
    1cc4:	48 08 90    	mov.w     [w8+24], w0
    1cc6:	80 85 55    	sub.w     w11, w0, w11
    1cc8:	00 02 22    	mov.w     #0x2020, w0
    1cca:	90 bf 9f    	mov.w     w0, [w15-14]
    1ccc:	00 03 23    	mov.w     #0x3030, w0
    1cce:	a0 bf 9f    	mov.w     w0, [w15-12]
    1cd0:	08 10 90    	mov.w     [w8+32], w0
    1cd2:	00 28 a3    	btst.z    w0, #0x2
    1cd4:	15 00 3a    	bra       NZ, 0x1d00 <.L2>
    1cd6:	0b 00 e0    	cp0.w     w11
    1cd8:	13 00 34    	bra       LE, 0x1d00 <.L2>
    1cda:	0b 05 78    	mov.w     w11, w10

00001cdc <.L5>:
    1cdc:	8a 04 78    	mov.w     w10, w9
    1cde:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1ce0:	01 00 36    	bra       LEU, 0x1ce4 <.L3>
    1ce2:	29 00 20    	mov.w     #0x2, w9

00001ce4 <.L3>:
    1ce4:	c8 01 90    	mov.w     [w8+8], w3
    1ce6:	09 01 78    	mov.w     w9, w2
    1ce8:	ee 80 57    	sub.w     w15, #0xe, w1
    1cea:	58 00 90    	mov.w     [w8+10], w0
    1cec:	03 00 01    	call      w3
    1cee:	50 04 98    	mov.w     w0, [w8+10]
    1cf0:	00 00 e0    	cp0.w     w0
    1cf2:	8c 00 32    	bra       Z, 0x1e0c <.L29>
    1cf4:	68 08 90    	mov.w     [w8+28], w0
    1cf6:	09 00 40    	add.w     w0, w9, w0
    1cf8:	60 0c 98    	mov.w     w0, [w8+28]
    1cfa:	09 05 55    	sub.w     w10, w9, w10
    1cfc:	42 40 a9    	bclr.b    0x42, #0x2
    1cfe:	ee ff 3c    	bra       GT, 0x1cdc <.L5>

00001d00 <.L2>:
    1d00:	78 01 90    	mov.w     [w8+14], w2
    1d02:	02 00 e0    	cp0.w     w2
    1d04:	0c 00 34    	bra       LE, 0x1d1e <.L6>
    1d06:	c8 01 90    	mov.w     [w8+8], w3
    1d08:	8c 00 78    	mov.w     w12, w1
    1d0a:	58 00 90    	mov.w     [w8+10], w0
    1d0c:	03 00 01    	call      w3
    1d0e:	50 04 98    	mov.w     w0, [w8+10]
    1d10:	80 80 eb    	setm.w    w1
    1d12:	00 00 e0    	cp0.w     w0
    1d14:	7c 00 32    	bra       Z, 0x1e0e <.L4>
    1d16:	e8 08 90    	mov.w     [w8+28], w1
    1d18:	78 00 90    	mov.w     [w8+14], w0
    1d1a:	00 80 40    	add.w     w1, w0, w0
    1d1c:	60 0c 98    	mov.w     w0, [w8+28]

00001d1e <.L6>:
    1d1e:	88 0c 90    	mov.w     [w8+16], w9

00001d20 <.L30>:
    1d20:	09 00 e0    	cp0.w     w9
    1d22:	11 00 34    	bra       LE, 0x1d46 <.L7>
    1d24:	09 05 78    	mov.w     w9, w10
    1d26:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1d28:	01 00 36    	bra       LEU, 0x1d2c <.L8>
    1d2a:	2a 00 20    	mov.w     #0x2, w10

00001d2c <.L8>:
    1d2c:	c8 01 90    	mov.w     [w8+8], w3
    1d2e:	0a 01 78    	mov.w     w10, w2
    1d30:	ec 80 57    	sub.w     w15, #0xc, w1
    1d32:	58 00 90    	mov.w     [w8+10], w0
    1d34:	03 00 01    	call      w3
    1d36:	50 04 98    	mov.w     w0, [w8+10]
    1d38:	00 00 e0    	cp0.w     w0
    1d3a:	68 00 32    	bra       Z, 0x1e0c <.L29>
    1d3c:	68 08 90    	mov.w     [w8+28], w0
    1d3e:	0a 00 40    	add.w     w0, w10, w0
    1d40:	60 0c 98    	mov.w     w0, [w8+28]
    1d42:	8a 84 54    	sub.w     w9, w10, w9
    1d44:	ed ff 37    	bra       0x1d20 <.L30>

00001d46 <.L7>:
    1d46:	18 09 90    	mov.w     [w8+18], w2
    1d48:	02 00 e0    	cp0.w     w2
    1d4a:	0c 00 34    	bra       LE, 0x1d64 <.L10>
    1d4c:	c8 01 90    	mov.w     [w8+8], w3
    1d4e:	e8 00 90    	mov.w     [w8+12], w1
    1d50:	58 00 90    	mov.w     [w8+10], w0
    1d52:	03 00 01    	call      w3
    1d54:	50 04 98    	mov.w     w0, [w8+10]
    1d56:	80 80 eb    	setm.w    w1
    1d58:	00 00 e0    	cp0.w     w0
    1d5a:	59 00 32    	bra       Z, 0x1e0e <.L4>
    1d5c:	e8 08 90    	mov.w     [w8+28], w1
    1d5e:	18 08 90    	mov.w     [w8+18], w0
    1d60:	00 80 40    	add.w     w1, w0, w0
    1d62:	60 0c 98    	mov.w     w0, [w8+28]

00001d64 <.L10>:
    1d64:	a8 0c 90    	mov.w     [w8+20], w9

00001d66 <.L31>:
    1d66:	09 00 e0    	cp0.w     w9
    1d68:	11 00 34    	bra       LE, 0x1d8c <.L11>
    1d6a:	09 05 78    	mov.w     w9, w10
    1d6c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1d6e:	01 00 36    	bra       LEU, 0x1d72 <.L12>
    1d70:	2a 00 20    	mov.w     #0x2, w10

00001d72 <.L12>:
    1d72:	c8 01 90    	mov.w     [w8+8], w3
    1d74:	0a 01 78    	mov.w     w10, w2
    1d76:	ec 80 57    	sub.w     w15, #0xc, w1
    1d78:	58 00 90    	mov.w     [w8+10], w0
    1d7a:	03 00 01    	call      w3
    1d7c:	50 04 98    	mov.w     w0, [w8+10]
    1d7e:	00 00 e0    	cp0.w     w0
    1d80:	45 00 32    	bra       Z, 0x1e0c <.L29>
    1d82:	68 08 90    	mov.w     [w8+28], w0
    1d84:	0a 00 40    	add.w     w0, w10, w0
    1d86:	60 0c 98    	mov.w     w0, [w8+28]
    1d88:	8a 84 54    	sub.w     w9, w10, w9
    1d8a:	ed ff 37    	bra       0x1d66 <.L31>

00001d8c <.L11>:
    1d8c:	38 09 90    	mov.w     [w8+22], w2
    1d8e:	02 00 e0    	cp0.w     w2
    1d90:	0e 00 34    	bra       LE, 0x1dae <.L14>
    1d92:	e8 00 90    	mov.w     [w8+12], w1
    1d94:	18 08 90    	mov.w     [w8+18], w0
    1d96:	80 80 40    	add.w     w1, w0, w1
    1d98:	c8 01 90    	mov.w     [w8+8], w3
    1d9a:	58 00 90    	mov.w     [w8+10], w0
    1d9c:	03 00 01    	call      w3
    1d9e:	50 04 98    	mov.w     w0, [w8+10]
    1da0:	80 80 eb    	setm.w    w1
    1da2:	00 00 e0    	cp0.w     w0
    1da4:	34 00 32    	bra       Z, 0x1e0e <.L4>
    1da6:	e8 08 90    	mov.w     [w8+28], w1
    1da8:	38 08 90    	mov.w     [w8+22], w0
    1daa:	00 80 40    	add.w     w1, w0, w0
    1dac:	60 0c 98    	mov.w     w0, [w8+28]

00001dae <.L14>:
    1dae:	c8 0c 90    	mov.w     [w8+24], w9

00001db0 <.L32>:
    1db0:	09 00 e0    	cp0.w     w9
    1db2:	11 00 34    	bra       LE, 0x1dd6 <.L15>
    1db4:	09 05 78    	mov.w     w9, w10
    1db6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1db8:	01 00 36    	bra       LEU, 0x1dbc <.L16>
    1dba:	2a 00 20    	mov.w     #0x2, w10

00001dbc <.L16>:
    1dbc:	c8 01 90    	mov.w     [w8+8], w3
    1dbe:	0a 01 78    	mov.w     w10, w2
    1dc0:	ec 80 57    	sub.w     w15, #0xc, w1
    1dc2:	58 00 90    	mov.w     [w8+10], w0
    1dc4:	03 00 01    	call      w3
    1dc6:	50 04 98    	mov.w     w0, [w8+10]
    1dc8:	00 00 e0    	cp0.w     w0
    1dca:	20 00 32    	bra       Z, 0x1e0c <.L29>
    1dcc:	68 08 90    	mov.w     [w8+28], w0
    1dce:	0a 00 40    	add.w     w0, w10, w0
    1dd0:	60 0c 98    	mov.w     w0, [w8+28]
    1dd2:	8a 84 54    	sub.w     w9, w10, w9
    1dd4:	ed ff 37    	bra       0x1db0 <.L32>

00001dd6 <.L15>:
    1dd6:	08 10 90    	mov.w     [w8+32], w0
    1dd8:	80 00 eb    	clr.w     w1
    1dda:	00 28 a3    	btst.z    w0, #0x2
    1ddc:	18 00 32    	bra       Z, 0x1e0e <.L4>
    1dde:	0b 00 e0    	cp0.w     w11
    1de0:	16 00 34    	bra       LE, 0x1e0e <.L4>
    1de2:	8b 04 78    	mov.w     w11, w9

00001de4 <.L19>:
    1de4:	09 05 78    	mov.w     w9, w10
    1de6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1de8:	01 00 36    	bra       LEU, 0x1dec <.L18>
    1dea:	2a 00 20    	mov.w     #0x2, w10

00001dec <.L18>:
    1dec:	c8 01 90    	mov.w     [w8+8], w3
    1dee:	0a 01 78    	mov.w     w10, w2
    1df0:	ee 80 57    	sub.w     w15, #0xe, w1
    1df2:	58 00 90    	mov.w     [w8+10], w0
    1df4:	03 00 01    	call      w3
    1df6:	50 04 98    	mov.w     w0, [w8+10]
    1df8:	00 00 e0    	cp0.w     w0
    1dfa:	08 00 32    	bra       Z, 0x1e0c <.L29>
    1dfc:	68 08 90    	mov.w     [w8+28], w0
    1dfe:	0a 00 40    	add.w     w0, w10, w0
    1e00:	60 0c 98    	mov.w     w0, [w8+28]
    1e02:	8a 84 54    	sub.w     w9, w10, w9
    1e04:	42 40 a9    	bclr.b    0x42, #0x2
    1e06:	ee ff 3c    	bra       GT, 0x1de4 <.L19>
    1e08:	80 00 eb    	clr.w     w1
    1e0a:	01 00 37    	bra       0x1e0e <.L4>

00001e0c <.L29>:
    1e0c:	80 80 eb    	setm.w    w1

00001e0e <.L4>:
    1e0e:	01 00 78    	mov.w     w1, w0
    1e10:	4f 06 78    	mov.w     [--w15], w12
    1e12:	4f 05 be    	mov.d     [--w15], w10
    1e14:	4f 04 be    	mov.d     [--w15], w8
    1e16:	00 80 fa    	ulnk      
    1e18:	00 00 06    	return    

00001e1a <__Vacopy>:
    1e1a:	01 08 78    	mov.w     w1, [w0]
    1e1c:	00 00 06    	return    

00001e1e <_doclose>:
    1e1e:	00 c0 da    	.pword 0xdac000
    1e20:	00 00 06    	return    

00001e22 <_doremove>:
    1e22:	00 c0 da    	.pword 0xdac000
    1e24:	00 00 06    	return    

00001e26 <___divsi3>:
    1e26:	83 9f 68    	xor.w     w1, w3, [w15++]
    1e28:	01 00 e0    	cp0.w     w1
    1e2a:	02 00 3d    	bra       GE, 0x1e30 <divtestb>
    1e2c:	60 00 10    	subr.w    w0, #0x0, w0
    1e2e:	e0 80 18    	subbr.w   w1, #0x0, w1

00001e30 <divtestb>:
    1e30:	03 00 e0    	cp0.w     w3
    1e32:	02 00 3d    	bra       GE, 0x1e38 <calcquot>
    1e34:	60 01 11    	subr.w    w2, #0x0, w2
    1e36:	e0 81 19    	subbr.w   w3, #0x0, w3

00001e38 <calcquot>:
    1e38:	05 00 07    	rcall     0x1e44 <___udivsi3>
    1e3a:	4f 00 e0    	cp0.w     [--w15]
    1e3c:	02 00 3b    	bra       NN, 0x1e42 <returnq>
    1e3e:	60 00 10    	subr.w    w0, #0x0, w0
    1e40:	e0 80 18    	subbr.w   w1, #0x0, w1

00001e42 <returnq>:
    1e42:	00 00 06    	return    

00001e44 <___udivsi3>:
    1e44:	60 22 b8    	mul.uu    w4, #0x0, w4
    1e46:	06 02 20    	mov.w     #0x20, w6

00001e48 <nextbit>:
    1e48:	00 00 d0    	sl.w      w0, w0
    1e4a:	81 80 d2    	rlc.w     w1, w1
    1e4c:	04 82 d2    	rlc.w     w4, w4
    1e4e:	85 82 d2    	rlc.w     w5, w5
    1e50:	00 00 a0    	bset.w    w0, #0x0
    1e52:	02 02 52    	sub.w     w4, w2, w4
    1e54:	83 82 5a    	subb.w    w5, w3, w5
    1e56:	03 00 31    	bra       C, 0x1e5e <iterate>
    1e58:	02 02 42    	add.w     w4, w2, w4
    1e5a:	83 82 4a    	addc.w    w5, w3, w5
    1e5c:	00 00 a1    	bclr.w    w0, #0x0

00001e5e <iterate>:
    1e5e:	06 03 e9    	dec.w     w6, w6
    1e60:	f3 ff 3a    	bra       NZ, 0x1e48 <nextbit>
    1e62:	00 00 06    	return    

00001e64 <___umodsi3>:
    1e64:	ef ff 07    	rcall     0x1e44 <___udivsi3>
    1e66:	04 00 be    	mov.d     w4, w0
    1e68:	00 00 06    	return    

00001e6a <___mulp32eds3>:
    1e6a:	02 0a b9    	mul.su    w1, w2, w4
    1e6c:	00 1b b9    	mul.su    w3, w0, w6
    1e6e:	02 00 b8    	mul.uu    w0, w2, w0
    1e70:	81 00 42    	add.w     w4, w1, w1
    1e72:	81 00 43    	add.w     w6, w1, w1
    1e74:	00 00 06    	return    

00001e76 <___PplusBdi>:
    1e76:	88 9f be    	mov.d     w8, [w15++]
    1e78:	8a 9f be    	mov.d     w10, [w15++]
    1e7a:	30 04 42    	add.w     w4, [w0++], w8
    1e7c:	b0 84 4a    	addc.w    w5, [w0++], w9
    1e7e:	30 05 4b    	addc.w    w6, [w0++], w10
    1e80:	90 85 4b    	addc.w    w7, [w0], w11
    1e82:	60 00 b1    	sub.w     #0x6, w0
    1e84:	08 98 be    	mov.d     w8, [w0++]
    1e86:	0a 90 be    	mov.d     w10, [w0--]
    1e88:	04 40 e1    	cp.w      w8, w4
    1e8a:	05 c8 e1    	cpb.w     w9, w5
    1e8c:	06 d0 e1    	cpb.w     w10, w6
    1e8e:	07 d8 e1    	cpb.w     w11, w7
    1e90:	02 00 31    	bra       C, 0x1e96 <.L1>
    1e92:	68 00 40    	add.w     w0, #0x8, w0
    1e94:	10 08 e8    	inc.w     [w0], [w0]

00001e96 <.L1>:
    1e96:	4f 05 be    	mov.d     [--w15], w10
    1e98:	4f 04 be    	mov.d     [--w15], w8
    1e9a:	00 00 06    	return    

00001e9c <___PminusBdi>:
    1e9c:	88 9f be    	mov.d     w8, [w15++]
    1e9e:	8a 9f be    	mov.d     w10, [w15++]
    1ea0:	30 04 be    	mov.d     [w0++], w8
    1ea2:	20 05 be    	mov.d     [w0--], w10
    1ea4:	04 18 54    	sub.w     w8, w4, [w0++]
    1ea6:	05 98 5c    	subb.w    w9, w5, [w0++]
    1ea8:	06 18 5d    	subb.w    w10, w6, [w0++]
    1eaa:	07 98 5d    	subb.w    w11, w7, [w0++]
    1eac:	11 00 20    	mov.w     #0x1, w1
    1eae:	04 40 e1    	cp.w      w8, w4
    1eb0:	05 c8 e1    	cpb.w     w9, w5
    1eb2:	06 d0 e1    	cpb.w     w10, w6
    1eb4:	07 d8 e1    	cpb.w     w11, w7
    1eb6:	01 00 39    	bra       NC, 0x1eba <.L4>
    1eb8:	80 00 eb    	clr.w     w1

00001eba <.L4>:
    1eba:	10 88 10    	subr.w    w1, [w0], [w0]
    1ebc:	4f 05 be    	mov.d     [--w15], w10
    1ebe:	4f 04 be    	mov.d     [--w15], w8
    1ec0:	00 00 06    	return    

00001ec2 <___udivmoddi3>:
    1ec2:	12 00 fa    	lnk       #0x12
    1ec4:	88 9f be    	mov.d     w8, [w15++]
    1ec6:	8a 9f be    	mov.d     w10, [w15++]
    1ec8:	8c 9f be    	mov.d     w12, [w15++]
    1eca:	e0 b7 9f    	mov.w     w0, [w15-20]
    1ecc:	f1 b7 9f    	mov.w     w1, [w15-18]
    1ece:	82 bf 9f    	mov.w     w2, [w15-16]
    1ed0:	93 bf 9f    	mov.w     w3, [w15-14]
    1ed2:	06 05 be    	mov.d     w6, w10
    1ed4:	04 04 be    	mov.d     w4, w8
    1ed6:	00 00 eb    	clr.w     w0
    1ed8:	d0 b7 9f    	mov.w     w0, [w15-22]
    1eda:	c0 b7 9f    	mov.w     w0, [w15-24]
    1edc:	b0 b7 9f    	mov.w     w0, [w15-26]
    1ede:	a0 b7 9f    	mov.w     w0, [w15-28]
    1ee0:	90 b7 9f    	mov.w     w0, [w15-30]
    1ee2:	00 06 eb    	clr.w     w12

00001ee4 <.L9>:
    1ee4:	5f b1 97    	mov.w     [w15-22], w2
    1ee6:	cf b0 97    	mov.w     [w15-24], w1
    1ee8:	82 01 41    	add.w     w2, w2, w3
    1eea:	3f b0 97    	mov.w     [w15-26], w0
    1eec:	02 00 e0    	cp0.w     w2
    1eee:	04 00 3d    	bra       GE, 0x1ef8 <.L6>
    1ef0:	37 00 07    	rcall     0x1f60 <.LPA0>
    1ef2:	7e 80 57    	sub.w     w15, #0x1e, w0
    1ef4:	c0 ff 07    	rcall     0x1e76 <___PplusBdi>
    1ef6:	03 00 37    	bra       0x1efe <.L7>

00001ef8 <.L6>:
    1ef8:	33 00 07    	rcall     0x1f60 <.LPA0>
    1efa:	7e 80 57    	sub.w     w15, #0x1e, w0
    1efc:	cf ff 07    	rcall     0x1e9c <___PminusBdi>

00001efe <.L7>:
    1efe:	df b6 97    	mov.w     [w15-22], w13
    1f00:	0d 00 e0    	cp0.w     w13
    1f02:	0c 00 35    	bra       LT, 0x1f1c <.L8>
    1f04:	6f b2 97    	mov.w     [w15-20], w4
    1f06:	ff b2 97    	mov.w     [w15-18], w5
    1f08:	0f bb 97    	mov.w     [w15-16], w6
    1f0a:	9f bb 97    	mov.w     [w15-14], w7
    1f0c:	10 00 20    	mov.w     #0x1, w0
    1f0e:	01 00 20    	mov.w     #0x0, w1
    1f10:	60 11 b8    	mul.uu    w2, #0x0, w2
    1f12:	00 02 72    	ior.w     w4, w0, w4
    1f14:	81 82 72    	ior.w     w5, w1, w5
    1f16:	02 03 73    	ior.w     w6, w2, w6
    1f18:	83 83 73    	ior.w     w7, w3, w7
    1f1a:	1b 00 07    	rcall     0x1f52 <.LPA2>

00001f1c <.L8>:
    1f1c:	0c 06 e8    	inc.w     w12, w12
    1f1e:	01 04 20    	mov.w     #0x40, w1
    1f20:	81 0f 56    	sub.w     w12, w1, [w15]
    1f22:	e0 ff 3a    	bra       NZ, 0x1ee4 <.L9>
    1f24:	0d 00 e0    	cp0.w     w13
    1f26:	04 00 3d    	bra       GE, 0x1f30 <.L10>
    1f28:	08 02 be    	mov.d     w8, w4
    1f2a:	0a 03 be    	mov.d     w10, w6
    1f2c:	7e 80 57    	sub.w     w15, #0x1e, w0
    1f2e:	a3 ff 07    	rcall     0x1e76 <___PplusBdi>

00001f30 <.L10>:
    1f30:	5f a8 97    	mov.w     [w15-38], w0
    1f32:	00 00 e0    	cp0.w     w0
    1f34:	05 00 3a    	bra       NZ, 0x1f40 <.L11>
    1f36:	1f b2 97    	mov.w     [w15-30], w4
    1f38:	af b2 97    	mov.w     [w15-28], w5
    1f3a:	3f b3 97    	mov.w     [w15-26], w6
    1f3c:	cf b3 97    	mov.w     [w15-24], w7
    1f3e:	09 00 07    	rcall     0x1f52 <.LPA2>

00001f40 <.L11>:
    1f40:	6f b0 97    	mov.w     [w15-20], w0
    1f42:	ff b0 97    	mov.w     [w15-18], w1
    1f44:	0f b9 97    	mov.w     [w15-16], w2
    1f46:	9f b9 97    	mov.w     [w15-14], w3
    1f48:	4f 06 be    	mov.d     [--w15], w12
    1f4a:	4f 05 be    	mov.d     [--w15], w10
    1f4c:	4f 04 be    	mov.d     [--w15], w8
    1f4e:	00 80 fa    	ulnk      
    1f50:	00 00 06    	return    

00001f52 <.LPA2>:
    1f52:	01 00 07    	rcall     0x1f56 <.LPA5>
    1f54:	00 00 06    	return    

00001f56 <.LPA5>:
    1f56:	a4 b7 9f    	mov.w     w4, [w15-28]
    1f58:	b5 b7 9f    	mov.w     w5, [w15-26]
    1f5a:	c6 b7 9f    	mov.w     w6, [w15-24]
    1f5c:	d7 b7 9f    	mov.w     w7, [w15-22]
    1f5e:	00 00 06    	return    

00001f60 <.LPA0>:
    1f60:	4f 09 de    	lsr.w     w1, #0xf, w2
    1f62:	82 81 71    	ior.w     w3, w2, w3
    1f64:	b3 b7 9f    	mov.w     w3, [w15-26]
    1f66:	4f 01 de    	lsr.w     w0, #0xf, w2
    1f68:	81 80 40    	add.w     w1, w1, w1
    1f6a:	82 80 70    	ior.w     w1, w2, w1
    1f6c:	a1 b7 9f    	mov.w     w1, [w15-28]
    1f6e:	8f b0 97    	mov.w     [w15-32], w1
    1f70:	4f 09 de    	lsr.w     w1, #0xf, w2
    1f72:	00 00 40    	add.w     w0, w0, w0
    1f74:	02 00 70    	ior.w     w0, w2, w0
    1f76:	90 b7 9f    	mov.w     w0, [w15-30]
    1f78:	7f a8 97    	mov.w     [w15-34], w0
    1f7a:	4f 01 de    	lsr.w     w0, #0xf, w2
    1f7c:	81 80 40    	add.w     w1, w1, w1
    1f7e:	82 80 70    	ior.w     w1, w2, w1
    1f80:	81 b7 9f    	mov.w     w1, [w15-32]
    1f82:	0d 00 07    	rcall     0x1f9e <.LPA4>
    1f84:	4f 3a de    	lsr.w     w7, #0xf, w4
    1f86:	00 00 40    	add.w     w0, w0, w0
    1f88:	04 00 70    	ior.w     w0, w4, w0
    1f8a:	f0 af 9f    	mov.w     w0, [w15-34]
    1f8c:	08 00 07    	rcall     0x1f9e <.LPA4>
    1f8e:	04 02 42    	add.w     w4, w4, w4
    1f90:	85 82 4a    	addc.w    w5, w5, w5
    1f92:	06 03 4b    	addc.w    w6, w6, w6
    1f94:	87 83 4b    	addc.w    w7, w7, w7
    1f96:	df ff 07    	rcall     0x1f56 <.LPA5>
    1f98:	08 02 be    	mov.d     w8, w4
    1f9a:	0a 03 be    	mov.d     w10, w6
    1f9c:	00 00 06    	return    

00001f9e <.LPA4>:
    1f9e:	2f b2 97    	mov.w     [w15-28], w4
    1fa0:	bf b2 97    	mov.w     [w15-26], w5
    1fa2:	4f b3 97    	mov.w     [w15-24], w6
    1fa4:	df b3 97    	mov.w     [w15-22], w7
    1fa6:	00 00 06    	return    

00001fa8 <___udivdi3>:
    1fa8:	88 1f 78    	mov.w     w8, [w15++]
    1faa:	18 00 20    	mov.w     #0x1, w8
    1fac:	88 1f 78    	mov.w     w8, [w15++]
    1fae:	89 ff 07    	rcall     0x1ec2 <___udivmoddi3>
    1fb0:	8f 87 e9    	dec2.w    w15, w15
    1fb2:	4f 04 78    	mov.w     [--w15], w8
    1fb4:	00 00 06    	return    

00001fb6 <___umoddi3>:
    1fb6:	80 1f eb    	clr.w     [w15++]
    1fb8:	84 ff 07    	rcall     0x1ec2 <___udivmoddi3>
    1fba:	8f 87 e9    	dec2.w    w15, w15
    1fbc:	00 00 06    	return    

00001fbe <___divdi3>:
    1fbe:	88 9f be    	mov.d     w8, [w15++]
    1fc0:	8a 9f be    	mov.d     w10, [w15++]
    1fc2:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1fc4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1fc6:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1fc8:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1fca:	0c 00 3d    	bra       GE, 0x1fe4 <.L15>
    1fcc:	60 44 b8    	mul.uu    w8, #0x0, w8
    1fce:	60 55 b8    	mul.uu    w10, #0x0, w10
    1fd0:	00 00 54    	sub.w     w8, w0, w0
    1fd2:	81 80 5c    	subb.w    w9, w1, w1
    1fd4:	02 01 5d    	subb.w    w10, w2, w2
    1fd6:	83 81 5d    	subb.w    w11, w3, w3
    1fd8:	18 00 20    	mov.w     #0x1, w8
    1fda:	15 00 07    	rcall     0x2006 <.LPA3>
    1fdc:	08 00 3d    	bra       GE, 0x1fee <.L16>
    1fde:	18 00 07    	rcall     0x2010 <.LPA1>
    1fe0:	00 04 eb    	clr.w     w8
    1fe2:	05 00 37    	bra       0x1fee <.L16>

00001fe4 <.L15>:
    1fe4:	00 04 eb    	clr.w     w8
    1fe6:	0f 00 07    	rcall     0x2006 <.LPA3>
    1fe8:	02 00 3d    	bra       GE, 0x1fee <.L16>
    1fea:	12 00 07    	rcall     0x2010 <.LPA1>
    1fec:	18 00 20    	mov.w     #0x1, w8

00001fee <.L16>:
    1fee:	dc ff 07    	rcall     0x1fa8 <___udivdi3>
    1ff0:	08 00 e0    	cp0.w     w8
    1ff2:	06 00 32    	bra       Z, 0x2000 <.L17>
    1ff4:	60 22 b8    	mul.uu    w4, #0x0, w4
    1ff6:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ff8:	00 00 52    	sub.w     w4, w0, w0
    1ffa:	81 80 5a    	subb.w    w5, w1, w1
    1ffc:	02 01 5b    	subb.w    w6, w2, w2
    1ffe:	83 81 5b    	subb.w    w7, w3, w3

00002000 <.L17>:
    2000:	4f 05 be    	mov.d     [--w15], w10
    2002:	4f 04 be    	mov.d     [--w15], w8
    2004:	00 00 06    	return    

00002006 <.LPA3>:
    2006:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2008:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    200a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    200c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    200e:	00 00 06    	return    

00002010 <.LPA1>:
    2010:	60 44 b8    	mul.uu    w8, #0x0, w8
    2012:	60 55 b8    	mul.uu    w10, #0x0, w10
    2014:	04 02 54    	sub.w     w8, w4, w4
    2016:	85 82 5c    	subb.w    w9, w5, w5
    2018:	06 03 5d    	subb.w    w10, w6, w6
    201a:	87 83 5d    	subb.w    w11, w7, w7
    201c:	00 00 06    	return    

0000201e <___moddi3>:
    201e:	88 9f be    	mov.d     w8, [w15++]
    2020:	8a 9f be    	mov.d     w10, [w15++]
    2022:	8c 1f 78    	mov.w     w12, [w15++]
    2024:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2026:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2028:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    202a:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    202c:	0d 00 3d    	bra       GE, 0x2048 <.L21>
    202e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2030:	60 55 b8    	mul.uu    w10, #0x0, w10
    2032:	00 00 54    	sub.w     w8, w0, w0
    2034:	81 80 5c    	subb.w    w9, w1, w1
    2036:	02 01 5d    	subb.w    w10, w2, w2
    2038:	83 81 5d    	subb.w    w11, w3, w3
    203a:	1c 00 20    	mov.w     #0x1, w12
    203c:	08 20 e1    	cp.w      w4, w8
    203e:	09 a8 e1    	cpb.w     w5, w9
    2040:	0a b0 e1    	cpb.w     w6, w10
    2042:	0b b8 e1    	cpb.w     w7, w11
    2044:	0d 00 3d    	bra       GE, 0x2060 <.L22>
    2046:	08 00 37    	bra       0x2058 <.L26>

00002048 <.L21>:
    2048:	00 06 eb    	clr.w     w12
    204a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    204c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    204e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2050:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2052:	06 00 3d    	bra       GE, 0x2060 <.L22>
    2054:	60 44 b8    	mul.uu    w8, #0x0, w8
    2056:	60 55 b8    	mul.uu    w10, #0x0, w10

00002058 <.L26>:
    2058:	04 02 54    	sub.w     w8, w4, w4
    205a:	85 82 5c    	subb.w    w9, w5, w5
    205c:	06 03 5d    	subb.w    w10, w6, w6
    205e:	87 83 5d    	subb.w    w11, w7, w7

00002060 <.L22>:
    2060:	aa ff 07    	rcall     0x1fb6 <___umoddi3>
    2062:	0c 00 e0    	cp0.w     w12
    2064:	06 00 32    	bra       Z, 0x2072 <.L23>
    2066:	60 22 b8    	mul.uu    w4, #0x0, w4
    2068:	60 33 b8    	mul.uu    w6, #0x0, w6
    206a:	00 00 52    	sub.w     w4, w0, w0
    206c:	81 80 5a    	subb.w    w5, w1, w1
    206e:	02 01 5b    	subb.w    w6, w2, w2
    2070:	83 81 5b    	subb.w    w7, w3, w3

00002072 <.L23>:
    2072:	4f 06 78    	mov.w     [--w15], w12
    2074:	4f 05 be    	mov.d     [--w15], w10
    2076:	4f 04 be    	mov.d     [--w15], w8
    2078:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	76 33 04    	goto      0x3376 <.LFE0>
    1006:	00 00 00 
    1008:	76 33 04    	goto      0x3376 <.LFE0>
    100a:	00 00 00 
    100c:	76 33 04    	goto      0x3376 <.LFE0>
    100e:	00 00 00 
    1010:	76 33 04    	goto      0x3376 <.LFE0>
    1012:	00 00 00 
    1014:	76 33 04    	goto      0x3376 <.LFE0>
    1016:	00 00 00 
    1018:	76 33 04    	goto      0x3376 <.LFE0>
    101a:	00 00 00 
    101c:	76 33 04    	goto      0x3376 <.LFE0>
    101e:	00 00 00 
    1020:	76 33 04    	goto      0x3376 <.LFE0>
    1022:	00 00 00 
    1024:	76 33 04    	goto      0x3376 <.LFE0>
    1026:	00 00 00 
    1028:	76 33 04    	goto      0x3376 <.LFE0>
    102a:	00 00 00 
    102c:	76 33 04    	goto      0x3376 <.LFE0>
    102e:	00 00 00 
    1030:	76 33 04    	goto      0x3376 <.LFE0>
    1032:	00 00 00 
    1034:	76 33 04    	goto      0x3376 <.LFE0>
    1036:	00 00 00 
    1038:	76 33 04    	goto      0x3376 <.LFE0>
    103a:	00 00 00 
    103c:	76 33 04    	goto      0x3376 <.LFE0>
    103e:	00 00 00 
    1040:	7a 32 04    	goto      0x327a <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	18 32 04    	goto      0x3218 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	76 33 04    	goto      0x3376 <.LFE0>
    104a:	00 00 00 
    104c:	76 33 04    	goto      0x3376 <.LFE0>
    104e:	00 00 00 
    1050:	76 33 04    	goto      0x3376 <.LFE0>
    1052:	00 00 00 
    1054:	76 33 04    	goto      0x3376 <.LFE0>
    1056:	00 00 00 
    1058:	76 33 04    	goto      0x3376 <.LFE0>
    105a:	00 00 00 
    105c:	76 33 04    	goto      0x3376 <.LFE0>
    105e:	00 00 00 
    1060:	76 33 04    	goto      0x3376 <.LFE0>
    1062:	00 00 00 
    1064:	76 33 04    	goto      0x3376 <.LFE0>
    1066:	00 00 00 
    1068:	76 33 04    	goto      0x3376 <.LFE0>
    106a:	00 00 00 
    106c:	76 33 04    	goto      0x3376 <.LFE0>
    106e:	00 00 00 
    1070:	76 33 04    	goto      0x3376 <.LFE0>
    1072:	00 00 00 
    1074:	76 33 04    	goto      0x3376 <.LFE0>
    1076:	00 00 00 
    1078:	76 33 04    	goto      0x3376 <.LFE0>
    107a:	00 00 00 
    107c:	76 33 04    	goto      0x3376 <.LFE0>
    107e:	00 00 00 
    1080:	76 33 04    	goto      0x3376 <.LFE0>
    1082:	00 00 00 
    1084:	76 33 04    	goto      0x3376 <.LFE0>
    1086:	00 00 00 
    1088:	76 33 04    	goto      0x3376 <.LFE0>
    108a:	00 00 00 
    108c:	76 33 04    	goto      0x3376 <.LFE0>
    108e:	00 00 00 
    1090:	76 33 04    	goto      0x3376 <.LFE0>
    1092:	00 00 00 
    1094:	76 33 04    	goto      0x3376 <.LFE0>
    1096:	00 00 00 
    1098:	76 33 04    	goto      0x3376 <.LFE0>
    109a:	00 00 00 
    109c:	76 33 04    	goto      0x3376 <.LFE0>
    109e:	00 00 00 
    10a0:	76 33 04    	goto      0x3376 <.LFE0>
    10a2:	00 00 00 
    10a4:	76 33 04    	goto      0x3376 <.LFE0>
    10a6:	00 00 00 
    10a8:	76 33 04    	goto      0x3376 <.LFE0>
    10aa:	00 00 00 
    10ac:	76 33 04    	goto      0x3376 <.LFE0>
    10ae:	00 00 00 
    10b0:	76 33 04    	goto      0x3376 <.LFE0>
    10b2:	00 00 00 
    10b4:	76 33 04    	goto      0x3376 <.LFE0>
    10b6:	00 00 00 
    10b8:	76 33 04    	goto      0x3376 <.LFE0>
    10ba:	00 00 00 
    10bc:	76 33 04    	goto      0x3376 <.LFE0>
    10be:	00 00 00 
    10c0:	76 33 04    	goto      0x3376 <.LFE0>
    10c2:	00 00 00 
    10c4:	76 33 04    	goto      0x3376 <.LFE0>
    10c6:	00 00 00 
    10c8:	76 33 04    	goto      0x3376 <.LFE0>
    10ca:	00 00 00 
    10cc:	76 33 04    	goto      0x3376 <.LFE0>
    10ce:	00 00 00 
    10d0:	76 33 04    	goto      0x3376 <.LFE0>
    10d2:	00 00 00 
    10d4:	76 33 04    	goto      0x3376 <.LFE0>
    10d6:	00 00 00 
    10d8:	76 33 04    	goto      0x3376 <.LFE0>
    10da:	00 00 00 
    10dc:	76 33 04    	goto      0x3376 <.LFE0>
    10de:	00 00 00 
    10e0:	76 33 04    	goto      0x3376 <.LFE0>
    10e2:	00 00 00 
    10e4:	76 33 04    	goto      0x3376 <.LFE0>
    10e6:	00 00 00 
    10e8:	76 33 04    	goto      0x3376 <.LFE0>
    10ea:	00 00 00 
    10ec:	4a 33 04    	goto      0x334a <.LFE1>
    10ee:	00 00 00 
    10f0:	76 33 04    	goto      0x3376 <.LFE0>
    10f2:	00 00 00 
    10f4:	76 33 04    	goto      0x3376 <.LFE0>
    10f6:	00 00 00 
    10f8:	76 33 04    	goto      0x3376 <.LFE0>
    10fa:	00 00 00 
    10fc:	76 33 04    	goto      0x3376 <.LFE0>
    10fe:	00 00 00 
    1100:	76 33 04    	goto      0x3376 <.LFE0>
    1102:	00 00 00 
    1104:	76 33 04    	goto      0x3376 <.LFE0>
    1106:	00 00 00 
    1108:	76 33 04    	goto      0x3376 <.LFE0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	76 33 04    	goto      0x3376 <.LFE0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a07a <_Device>:
    a07a:	12 01       	.word 0x112
    a07c:	00 02       	.word 0x200
    a07e:	00 00       	.word 0
    a080:	00 40       	.word 0x4000
    a082:	66 66       	.word 0x6666
    a084:	03 00       	.word 0x3
    a086:	00 00       	.word 0
    a088:	01 02       	.word 0x201
    a08a:	00 01       	.word 0x100

0000a08c <_Configuration1>:
    a08c:	09 02       	.word 0x209
    a08e:	12 00       	.word 0x12
    a090:	01 01       	.word 0x101
    a092:	00 a0       	.word 0xa000
    a094:	32 09       	.word 0x932
    a096:	04 00       	.word 0x4
    a098:	00 00       	.word 0
    a09a:	ff 00       	.word 0xff
    a09c:	ff 00       	.word 0xff

0000a09e <_Configurations>:
    a09e:	8c a0       	.word 0xa08c

0000a0a0 <_String0>:
    a0a0:	04 03       	.word 0x304
    a0a2:	09 04       	.word 0x409

0000a0a4 <_String1>:
    a0a4:	1a 03       	.word 0x31a
    a0a6:	4f 00       	.word 0x4f
    a0a8:	6c 00       	.word 0x6c
    a0aa:	69 00       	.word 0x69
    a0ac:	6e 00       	.word 0x6e
    a0ae:	20 00       	.word 0x20
    a0b0:	43 00       	.word 0x43
    a0b2:	6f 00       	.word 0x6f
    a0b4:	6c 00       	.word 0x6c
    a0b6:	6c 00       	.word 0x6c
    a0b8:	65 00       	.word 0x65
    a0ba:	67 00       	.word 0x67
    a0bc:	65 00       	.word 0x65

0000a0be <_String2>:
    a0be:	20 03       	.word 0x320
    a0c0:	50 00       	.word 0x50
    a0c2:	49 00       	.word 0x49
    a0c4:	43 00       	.word 0x43
    a0c6:	32 00       	.word 0x32
    a0c8:	34 00       	.word 0x34
    a0ca:	46 00       	.word 0x46
    a0cc:	4a 00       	.word 0x4a
    a0ce:	31 00       	.word 0x31
    a0d0:	32 00       	.word 0x32
    a0d2:	38 00       	.word 0x38
    a0d4:	47 00       	.word 0x47
    a0d6:	42 00       	.word 0x42
    a0d8:	32 00       	.word 0x32
    a0da:	30 00       	.word 0x30
    a0dc:	36 00       	.word 0x36

0000a0de <_Strings>:
    a0de:	a0 a0       	.word 0xa0a0
    a0e0:	a4 a0       	.word 0xa0a4
    a0e2:	be a0       	.word 0xa0be

0000a0e4 <.LC0>:
    a0e4:	61 6e       	.word 0x6e61
    a0e6:	67 6c       	.word 0x6c67
    a0e8:	65 73       	.word 0x7365
    a0ea:	3a 20       	.word 0x203a
    a0ec:	25 64       	.word 0x6425
    a0ee:	0d 0a       	.word 0xa0d
    a0f0:	00 61       	.word 0x6100

0000a0f1 <.LC1>:
    a0f1:	00 00       	.word 0
    a0f3:	00 00       	.word 0
    a0f5:	00 00       	.word 0
    a0f7:	00 00       	.word 0
    a0f9:	00 00       	.word 0
    a0fb:	00 00       	.word 0
    a0fd:	00 00       	.word 0

0000a0ff <.LC2>:
    a0ff:	00 00       	.word 0
    a101:	00 00       	.word 0
	...
Disassembly of section .text:

00002104 <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    2104:	06 00 fa    	lnk       #0x6
    2106:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    2108:	a0 4a 20    	mov.w     #0x4aa, w0
    210a:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    210c:	ce 40 90    	mov.b     [w14+4], w1
    210e:	01 4f 78    	mov.b     w1, [w14]
    2110:	13 00 37    	bra       0x2138 <.L3>

00002112 <.L4>:
        U1EP[ep] = ENDPT_DISABLED;
    2112:	1e 80 fb    	ze        [w14], w0
    2114:	00 00 40    	add.w     w0, w0, w0
    2116:	9e 00 90    	mov.w     [w14+2], w1
    2118:	00 80 40    	add.w     w1, w0, w0
    211a:	80 00 eb    	clr.w     w1
    211c:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    211e:	1e 80 fb    	ze        [w14], w0
    2120:	80 00 40    	add.w     w0, w0, w1
    2122:	20 15 21    	mov.w     #0x1152, w0
    2124:	00 80 40    	add.w     w1, w0, w0
    2126:	80 00 eb    	clr.w     w1
    2128:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    212a:	1e 80 fb    	ze        [w14], w0
    212c:	80 00 40    	add.w     w0, w0, w1
    212e:	20 17 21    	mov.w     #0x1172, w0
    2130:	00 80 40    	add.w     w1, w0, w0
    2132:	80 00 eb    	clr.w     w1
    2134:	01 08 78    	mov.w     w1, [w0]
    2136:	1e 4f e8    	inc.b     [w14], [w14]

00002138 <.L3>:
    2138:	1e 40 78    	mov.b     [w14], w0
    213a:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    213c:	ea ff 36    	bra       LEU, 0x2112 <.L4>
    }
}
    213e:	00 80 fa    	ulnk      
    2140:	00 00 06    	return    

00002142 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    2142:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    2144:	60 14 21    	mov.w     #0x1146, w0
    2146:	10 40 78    	mov.b     [w0], w0
    2148:	00 80 fb    	ze        w0, w0
    214a:	b0 24 88    	mov.w     w0, 0x496
    214c:	b0 24 80    	mov.w     0x496, w0
    214e:	00 00 e0    	cp0.w     w0
    2150:	03 00 3a    	bra       NZ, 0x2158 <.L9>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    2152:	10 c0 b3    	mov.b     #0x1, w0
    2154:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    2156:	02 00 37    	bra       0x215c <.L8>

00002158 <.L9>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    2158:	20 c0 b3    	mov.b     #0x2, w0
    215a:	10 e8 b7    	mov.b     WREG, 0x810

0000215c <.L8>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    215c:	00 00 eb    	clr.w     w0
    215e:	90 8a 88    	mov.w     w0, 0x1152
}
    2160:	00 80 fa    	ulnk      
    2162:	00 00 06    	return    

00002164 <_init_usb>:

void init_usb(void) {
    2164:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    2166:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    2168:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    216a:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    216c:	f0 0f 20    	mov.w     #0xff, w0
    216e:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    2170:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    2172:	00 40 eb    	clr.b     w0
    2174:	c7 ff 07    	rcall     0x2104 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    2176:	d0 00 20    	mov.w     #0xd, w0
    2178:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    217a:	00 20 21    	mov.w     #0x1200, w0
    217c:	01 c4 b3    	mov.b     #0x40, w1
    217e:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2180:	40 0c 21    	mov.w     #0x10c4, w0
    2182:	10 90 88    	mov.w     w0, 0x1202
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    2184:	10 20 21    	mov.w     #0x1201, w0
    2186:	81 c8 b3    	mov.b     #0x88, w1
    2188:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    218a:	40 10 21    	mov.w     #0x1104, w0
    218c:	30 90 88    	mov.w     w0, 0x1206
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    218e:	50 20 21    	mov.w     #0x1205, w0
    2190:	81 c0 b3    	mov.b     #0x8, w1
    2192:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    2194:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    2196:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    2198:	00 20 21    	mov.w     #0x1200, w0
    219a:	48 00 de    	lsr.w     w0, #0x8, w0
    219c:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    219e:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    21a0:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    21a2:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    21a4:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    21a6:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    21a8:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    21aa:	10 c0 b3    	mov.b     #0x1, w0
    21ac:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    21ae:	40 14 21    	mov.w     #0x1144, w0
    21b0:	80 c0 eb    	setm.b    w1
    21b2:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    21b4:	50 14 21    	mov.w     #0x1145, w0
    21b6:	80 c0 eb    	setm.b    w1
    21b8:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    21ba:	00 00 eb    	clr.w     w0
    21bc:	70 8a 88    	mov.w     w0, 0x114e
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    21be:	00 00 eb    	clr.w     w0
    21c0:	80 8a 88    	mov.w     w0, 0x1150
    while (U1CONbits.SE0) {}
    21c2:	00 00 00    	nop       

000021c4 <.L11>:
    21c4:	a1 24 80    	mov.w     0x494, w1
    21c6:	00 04 20    	mov.w     #0x40, w0
    21c8:	00 80 60    	and.w     w1, w0, w0
    21ca:	00 00 e0    	cp0.w     w0
    21cc:	fb ff 3a    	bra       NZ, 0x21c4 <.L11>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    21ce:	f0 0f 20    	mov.w     #0xff, w0
    21d0:	60 24 88    	mov.w     w0, 0x48c
    U1EIE = 0xFF;
    21d2:	f0 0f 20    	mov.w     #0xff, w0
    21d4:	80 24 88    	mov.w     w0, 0x490
    IFS5bits.USB1IF = 0;
    21d6:	8e c0 a9    	bclr.b    0x8e, #0x6
    IEC5bits.USB1IE = 1;
    21d8:	9e c0 a8    	bset.b    0x9e, #0x6
#endif
}
    21da:	00 80 fa    	ulnk      
    21dc:	00 00 06    	return    

000021de <_usb_service>:

void usb_service(void) {
    21de:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    21e0:	50 24 80    	mov.w     0x48a, w0
    21e2:	62 00 60    	and.w     w0, #0x2, w0
    21e4:	00 00 e0    	cp0.w     w0
    21e6:	05 00 32    	bra       Z, 0x21f2 <.L13>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    21e8:	f0 0f 20    	mov.w     #0xff, w0
    21ea:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    21ec:	20 00 20    	mov.w     #0x2, w0
    21ee:	50 24 88    	mov.w     w0, 0x48a
    21f0:	ba 00 37    	bra       0x2366 <.L14>

000021f2 <.L13>:
    } else if (U1IRbits.SOFIF) {
    21f2:	50 24 80    	mov.w     0x48a, w0
    21f4:	64 00 60    	and.w     w0, #0x4, w0
    21f6:	00 00 e0    	cp0.w     w0
    21f8:	03 00 32    	bra       Z, 0x2200 <.L15>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    21fa:	40 00 20    	mov.w     #0x4, w0
    21fc:	50 24 88    	mov.w     w0, 0x48a
    21fe:	b3 00 37    	bra       0x2366 <.L14>

00002200 <.L15>:
    } else if (U1IRbits.IDLEIF) {
    2200:	50 24 80    	mov.w     0x48a, w0
    2202:	70 00 60    	and.w     w0, #0x10, w0
    2204:	00 00 e0    	cp0.w     w0
    2206:	03 00 32    	bra       Z, 0x220e <.L16>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    2208:	00 01 20    	mov.w     #0x10, w0
    220a:	50 24 88    	mov.w     w0, 0x48a
    220c:	ac 00 37    	bra       0x2366 <.L14>

0000220e <.L16>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    220e:	51 24 80    	mov.w     0x48a, w1
    2210:	00 02 20    	mov.w     #0x20, w0
    2212:	00 80 60    	and.w     w1, w0, w0
    2214:	00 00 e0    	cp0.w     w0
    2216:	03 00 32    	bra       Z, 0x221e <.L17>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    2218:	00 02 20    	mov.w     #0x20, w0
    221a:	50 24 88    	mov.w     w0, 0x48a
    221c:	a4 00 37    	bra       0x2366 <.L14>

0000221e <.L17>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    221e:	51 24 80    	mov.w     0x48a, w1
    2220:	00 08 20    	mov.w     #0x80, w0
    2222:	00 80 60    	and.w     w1, w0, w0
    2224:	00 00 e0    	cp0.w     w0
    2226:	03 00 32    	bra       Z, 0x222e <.L18>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    2228:	00 08 20    	mov.w     #0x80, w0
    222a:	50 24 88    	mov.w     w0, 0x48a
    222c:	9c 00 37    	bra       0x2366 <.L14>

0000222e <.L18>:
    } else if (U1IRbits.URSTIF) {
    222e:	50 24 80    	mov.w     0x48a, w0
    2230:	61 00 60    	and.w     w0, #0x1, w0
    2232:	00 00 e0    	cp0.w     w0
    2234:	27 00 32    	bra       Z, 0x2284 <.L19>
        USB_curr_config = 0;
    2236:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    2238:	08 00 37    	bra       0x224a <.L20>

0000223a <.L21>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    223a:	80 00 20    	mov.w     #0x8, w0
    223c:	50 24 88    	mov.w     w0, 0x48a
	...

0000224a <.L20>:
    224a:	50 24 80    	mov.w     0x48a, w0
    224c:	68 00 60    	and.w     w0, #0x8, w0
    224e:	00 00 e0    	cp0.w     w0
    2250:	f4 ff 3a    	bra       NZ, 0x223a <.L21>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    2252:	00 40 eb    	clr.b     w0
    2254:	57 ff 07    	rcall     0x2104 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2256:	00 20 21    	mov.w     #0x1200, w0
    2258:	01 c4 b3    	mov.b     #0x40, w1
    225a:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    225c:	40 0c 21    	mov.w     #0x10c4, w0
    225e:	10 90 88    	mov.w     w0, 0x1202
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    2260:	10 20 21    	mov.w     #0x1201, w0
    2262:	81 c8 b3    	mov.b     #0x88, w1
    2264:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    2266:	40 10 21    	mov.w     #0x1104, w0
    2268:	30 90 88    	mov.w     w0, 0x1206
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    226a:	50 20 21    	mov.w     #0x1205, w0
    226c:	81 c0 b3    	mov.b     #0x8, w1
    226e:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    2270:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    2272:	f0 0f 20    	mov.w     #0xff, w0
    2274:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    2276:	d0 00 20    	mov.w     #0xd, w0
    2278:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    227a:	10 c0 b3    	mov.b     #0x1, w0
    227c:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    227e:	10 c0 b3    	mov.b     #0x1, w0
    2280:	0e e8 b7    	mov.b     WREG, 0x80e
    2282:	71 00 37    	bra       0x2366 <.L14>

00002284 <.L19>:
    } else if (U1IRbits.TRNIF) {
    2284:	50 24 80    	mov.w     0x48a, w0
    2286:	68 00 60    	and.w     w0, #0x8, w0
    2288:	00 00 e0    	cp0.w     w0
    228a:	6d 00 32    	bra       Z, 0x2366 <.L14>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    228c:	90 24 80    	mov.w     0x492, w0
    228e:	43 00 de    	lsr.w     w0, #0x3, w0
    2290:	c2 00 dd    	sl.w      w0, #0x2, w1
    2292:	00 20 21    	mov.w     #0x1200, w0
    2294:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	10 40 90    	mov.b     [w0+1], w0
    229a:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	10 40 78    	mov.b     [w0], w0
    22a0:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	10 00 90    	mov.w     [w0+2], w0
    22a6:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    22a8:	90 24 80    	mov.w     0x492, w0
    22aa:	00 40 78    	mov.b     w0, w0
    22ac:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    22ae:	80 00 20    	mov.w     #0x8, w0
    22b0:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    22b2:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    22b4:	01 c8 bf    	mov.b     0x801, WREG
    22b6:	80 80 fb    	ze        w0, w1
    22b8:	c0 03 20    	mov.w     #0x3c, w0
    22ba:	00 80 60    	and.w     w1, w0, w0
    22bc:	41 02 20    	mov.w     #0x24, w1
    22be:	81 0f 50    	sub.w     w0, w1, [w15]
    22c0:	08 00 32    	bra       Z, 0x22d2 <.L24>
    22c2:	41 03 20    	mov.w     #0x34, w1
    22c4:	81 0f 50    	sub.w     w0, w1, [w15]
    22c6:	03 00 32    	bra       Z, 0x22ce <.L25>
    22c8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    22ca:	17 00 32    	bra       Z, 0x22fa <.L23>
    22cc:	3d 00 37    	bra       0x2348 <.L22>

000022ce <.L25>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    22ce:	4e 00 07    	rcall     0x236c <_usb_process_setup_token> <.LFB5> <.LFE4>
                break;
    22d0:	3b 00 37    	bra       0x2348 <.L22>

000022d2 <.L24>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    22d2:	0f c8 bf    	mov.b     0x80f, WREG
    22d4:	00 80 fb    	ze        w0, w0
    22d6:	44 00 de    	lsr.w     w0, #0x4, w0
    22d8:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    22da:	2e 40 90    	mov.b     [w14+2], w0
    22dc:	00 80 fb    	ze        w0, w0
    22de:	80 00 40    	add.w     w0, w0, w1
    22e0:	20 15 21    	mov.w     #0x1152, w0
    22e2:	00 80 40    	add.w     w1, w0, w0
    22e4:	10 00 78    	mov.w     [w0], w0
    22e6:	00 00 e0    	cp0.w     w0
    22e8:	2e 00 32    	bra       Z, 0x2346 <.L28>
                    USB_in_callbacks[ep]();
    22ea:	2e 40 90    	mov.b     [w14+2], w0
    22ec:	00 80 fb    	ze        w0, w0
    22ee:	80 00 40    	add.w     w0, w0, w1
    22f0:	20 15 21    	mov.w     #0x1152, w0
    22f2:	00 80 40    	add.w     w1, w0, w0
    22f4:	10 00 78    	mov.w     [w0], w0
    22f6:	00 00 01    	call      w0
                break;
    22f8:	27 00 37    	bra       0x2348 <.L22>

000022fa <.L23>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    22fa:	0f c8 bf    	mov.b     0x80f, WREG
    22fc:	00 80 fb    	ze        w0, w0
    22fe:	44 00 de    	lsr.w     w0, #0x4, w0
    2300:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    2302:	2e 40 90    	mov.b     [w14+2], w0
    2304:	00 80 fb    	ze        w0, w0
    2306:	80 00 40    	add.w     w0, w0, w1
    2308:	20 17 21    	mov.w     #0x1172, w0
    230a:	00 80 40    	add.w     w1, w0, w0
    230c:	10 00 78    	mov.w     [w0], w0
    230e:	00 00 e0    	cp0.w     w0
    2310:	07 00 32    	bra       Z, 0x2320 <.L27>
                    USB_out_callbacks[ep]();
    2312:	2e 40 90    	mov.b     [w14+2], w0
    2314:	00 80 fb    	ze        w0, w0
    2316:	80 00 40    	add.w     w0, w0, w1
    2318:	20 17 21    	mov.w     #0x1172, w0
    231a:	00 80 40    	add.w     w1, w0, w0
    231c:	10 00 78    	mov.w     [w0], w0
    231e:	00 00 01    	call      w0

00002320 <.L27>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    2320:	2e 40 90    	mov.b     [w14+2], w0
    2322:	00 04 e0    	cp0.b     w0
    2324:	11 00 3a    	bra       NZ, 0x2348 <.L22>
    2326:	70 8a 80    	mov.w     0x114e, w0
    2328:	00 00 e0    	cp0.w     w0
    232a:	0e 00 3a    	bra       NZ, 0x2348 <.L22>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    232c:	00 20 21    	mov.w     #0x1200, w0
    232e:	01 c4 b3    	mov.b     #0x40, w1
    2330:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    2332:	10 20 21    	mov.w     #0x1201, w0
    2334:	81 c8 b3    	mov.b     #0x88, w1
    2336:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    2338:	40 20 21    	mov.w     #0x1204, w0
    233a:	80 40 eb    	clr.b     w1
    233c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    233e:	50 20 21    	mov.w     #0x1205, w0
    2340:	81 cc b3    	mov.b     #0xc8, w1
    2342:	01 48 78    	mov.b     w1, [w0]
    2344:	01 00 37    	bra       0x2348 <.L22>

00002346 <.L28>:
    2346:	00 00 00    	nop       

00002348 <.L22>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    2348:	0c c8 bf    	mov.b     0x80c, WREG
    234a:	00 80 fb    	ze        w0, w0
    234c:	61 00 60    	and.w     w0, #0x1, w0
    234e:	00 40 78    	mov.b     w0, w0
    2350:	00 04 e0    	cp0.b     w0
    2352:	09 00 32    	bra       Z, 0x2366 <.L14>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    2354:	00 20 21    	mov.w     #0x1200, w0
    2356:	01 c4 b3    	mov.b     #0x40, w1
    2358:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    235a:	50 20 21    	mov.w     #0x1205, w0
    235c:	41 c8 b3    	mov.b     #0x84, w1
    235e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    2360:	10 20 21    	mov.w     #0x1201, w0
    2362:	41 c8 b3    	mov.b     #0x84, w1
    2364:	01 48 78    	mov.b     w1, [w0]

00002366 <.L14>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    2366:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    2368:	00 80 fa    	ulnk      
    236a:	00 00 06    	return    

0000236c <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    236c:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    236e:	11 40 80    	mov.w     0x802, w1
    2370:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    2372:	1e 00 78    	mov.w     [w14], w0
    2374:	90 40 78    	mov.b     [w0], w1
    2376:	40 80 20    	mov.w     #0x804, w0
    2378:	01 48 78    	mov.b     w1, [w0]
    237a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    237c:	1e 00 78    	mov.w     [w14], w0
    237e:	90 40 78    	mov.b     [w0], w1
    2380:	40 80 20    	mov.w     #0x804, w0
    2382:	11 40 98    	mov.b     w1, [w0+1]
    2384:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    2386:	1e 00 78    	mov.w     [w14], w0
    2388:	90 40 78    	mov.b     [w0], w1
    238a:	40 80 20    	mov.w     #0x804, w0
    238c:	21 40 98    	mov.b     w1, [w0+2]
    238e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    2390:	1e 00 78    	mov.w     [w14], w0
    2392:	90 40 78    	mov.b     [w0], w1
    2394:	40 80 20    	mov.w     #0x804, w0
    2396:	31 40 98    	mov.b     w1, [w0+3]
    2398:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    239a:	1e 00 78    	mov.w     [w14], w0
    239c:	90 40 78    	mov.b     [w0], w1
    239e:	40 80 20    	mov.w     #0x804, w0
    23a0:	41 40 98    	mov.b     w1, [w0+4]
    23a2:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    23a4:	1e 00 78    	mov.w     [w14], w0
    23a6:	90 40 78    	mov.b     [w0], w1
    23a8:	40 80 20    	mov.w     #0x804, w0
    23aa:	51 40 98    	mov.b     w1, [w0+5]
    23ac:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    23ae:	1e 00 78    	mov.w     [w14], w0
    23b0:	90 40 78    	mov.b     [w0], w1
    23b2:	40 80 20    	mov.w     #0x804, w0
    23b4:	61 40 98    	mov.b     w1, [w0+6]
    23b6:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    23b8:	1e 00 78    	mov.w     [w14], w0
    23ba:	90 40 78    	mov.b     [w0], w1
    23bc:	40 80 20    	mov.w     #0x804, w0
    23be:	71 40 98    	mov.b     w1, [w0+7]
    23c0:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    23c2:	00 20 21    	mov.w     #0x1200, w0
    23c4:	01 c4 b3    	mov.b     #0x40, w1
    23c6:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    23c8:	50 20 21    	mov.w     #0x1205, w0
    23ca:	81 c0 b3    	mov.b     #0x8, w1
    23cc:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    23ce:	40 80 20    	mov.w     #0x804, w0
    23d0:	10 40 78    	mov.b     [w0], w0
    23d2:	00 04 e0    	cp0.b     w0
    23d4:	06 00 35    	bra       LT, 0x23e2 <.L30>
    23d6:	40 80 20    	mov.w     #0x804, w0
    23d8:	30 00 90    	mov.w     [w0+6], w0
    23da:	00 00 e0    	cp0.w     w0
    23dc:	02 00 32    	bra       Z, 0x23e2 <.L30>
    23de:	80 cc b3    	mov.b     #0xc8, w0
    23e0:	01 00 37    	bra       0x23e4 <.L31>

000023e2 <.L30>:
    23e2:	80 c8 b3    	mov.b     #0x88, w0

000023e4 <.L31>:
    23e4:	11 20 21    	mov.w     #0x1201, w1
    23e6:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    23e8:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    23ea:	40 14 21    	mov.w     #0x1144, w0
    23ec:	80 c0 eb    	setm.b    w1
    23ee:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    23f0:	50 14 21    	mov.w     #0x1145, w0
    23f2:	80 c0 eb    	setm.b    w1
    23f4:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    23f6:	00 00 eb    	clr.w     w0
    23f8:	70 8a 88    	mov.w     w0, 0x114e
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    23fa:	00 00 eb    	clr.w     w0
    23fc:	80 8a 88    	mov.w     w0, 0x1150
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    23fe:	40 80 20    	mov.w     #0x804, w0
    2400:	10 40 78    	mov.b     [w0], w0
    2402:	80 80 fb    	ze        w0, w1
    2404:	00 06 20    	mov.w     #0x60, w0
    2406:	00 80 60    	and.w     w1, w0, w0
    2408:	01 02 20    	mov.w     #0x20, w1
    240a:	81 0f 50    	sub.w     w0, w1, [w15]
    240c:	11 00 32    	bra       Z, 0x2430 <.L34>
    240e:	01 04 20    	mov.w     #0x40, w1
    2410:	81 0f 50    	sub.w     w0, w1, [w15]
    2412:	04 00 32    	bra       Z, 0x241c <.L35>
    2414:	00 00 e0    	cp0.w     w0
    2416:	16 00 3a    	bra       NZ, 0x2444 <.L41>
        case STANDARD_REQ:
            usb_standard_requests();
    2418:	1a 00 07    	rcall     0x244e <_usb_standard_requests> <.LFB6> <.LFE5>
            break;
    241a:	17 00 37    	bra       0x244a <.L29>

0000241c <.L35>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    241c:	c0 40 80    	mov.w     0x818, w0
    241e:	00 00 e0    	cp0.w     w0
    2420:	03 00 32    	bra       Z, 0x2428 <.L37>
                USB_setup_vendor_callback();
    2422:	c0 40 80    	mov.w     0x818, w0
    2424:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    2426:	11 00 37    	bra       0x244a <.L29>

00002428 <.L37>:
    2428:	0c c8 bf    	mov.b     0x80c, WREG
    242a:	00 04 a0    	bset.b    w0, #0x0
    242c:	0c e8 b7    	mov.b     WREG, 0x80c
    242e:	0d 00 37    	bra       0x244a <.L29>

00002430 <.L34>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    2430:	b0 40 80    	mov.w     0x816, w0
    2432:	00 00 e0    	cp0.w     w0
    2434:	03 00 32    	bra       Z, 0x243c <.L39>
                USB_setup_class_callback();
    2436:	b0 40 80    	mov.w     0x816, w0
    2438:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    243a:	07 00 37    	bra       0x244a <.L29>

0000243c <.L39>:
    243c:	0c c8 bf    	mov.b     0x80c, WREG
    243e:	00 04 a0    	bset.b    w0, #0x0
    2440:	0c e8 b7    	mov.b     WREG, 0x80c
    2442:	03 00 37    	bra       0x244a <.L29>

00002444 <.L41>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    2444:	0c c8 bf    	mov.b     0x80c, WREG
    2446:	00 04 a0    	bset.b    w0, #0x0
    2448:	0c e8 b7    	mov.b     WREG, 0x80c

0000244a <.L29>:
    }
}
    244a:	00 80 fa    	ulnk      
    244c:	00 00 06    	return    

0000244e <_usb_standard_requests>:

void usb_standard_requests(void) {
    244e:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    2450:	40 80 20    	mov.w     #0x804, w0
    2452:	10 40 90    	mov.b     [w0+1], w0
    2454:	00 80 fb    	ze        w0, w0
    2456:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2458:	ba 01 32    	bra       Z, 0x27ce <.L47>
    245a:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    245c:	0c 00 3c    	bra       GT, 0x2476 <.L52>
    245e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2460:	c1 00 32    	bra       Z, 0x25e4 <.L45>
    2462:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2464:	03 00 3c    	bra       GT, 0x246c <.L53>
    2466:	00 00 e0    	cp0.w     w0
    2468:	12 00 32    	bra       Z, 0x248e <.L44>
    246a:	85 02 37    	bra       0x2976 <.L43>

0000246c <.L53>:
    246c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    246e:	ba 00 32    	bra       Z, 0x25e4 <.L45>
    2470:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2472:	8b 01 32    	bra       Z, 0x278a <.L46>
    2474:	80 02 37    	bra       0x2976 <.L43>

00002476 <.L52>:
    2476:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    2478:	20 02 32    	bra       Z, 0x28ba <.L49>
    247a:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    247c:	03 00 3c    	bra       GT, 0x2484 <.L54>
    247e:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    2480:	11 02 32    	bra       Z, 0x28a4 <.L48>
    2482:	79 02 37    	bra       0x2976 <.L43>

00002484 <.L54>:
    2484:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    2486:	3b 02 32    	bra       Z, 0x28fe <.L50>
    2488:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    248a:	54 02 32    	bra       Z, 0x2934 <.L51>
    248c:	74 02 37    	bra       0x2976 <.L43>

0000248e <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    248e:	40 80 20    	mov.w     #0x804, w0
    2490:	10 40 78    	mov.b     [w0], w0
    2492:	00 80 fb    	ze        w0, w0
    2494:	7f 00 60    	and.w     w0, #0x1f, w0
    2496:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2498:	13 00 32    	bra       Z, 0x24c0 <.L57>
    249a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    249c:	32 00 32    	bra       Z, 0x2502 <.L58>
    249e:	00 00 e0    	cp0.w     w0
    24a0:	9c 00 3a    	bra       NZ, 0x25da <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    24a2:	30 90 80    	mov.w     0x1206, w0
    24a4:	e1 80 20    	mov.w     #0x80e, w1
    24a6:	91 40 78    	mov.b     [w1], w1
    24a8:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    24aa:	30 90 80    	mov.w     0x1206, w0
    24ac:	00 00 e8    	inc.w     w0, w0
    24ae:	80 40 eb    	clr.b     w1
    24b0:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    24b2:	40 20 21    	mov.w     #0x1204, w0
    24b4:	21 c0 b3    	mov.b     #0x2, w1
    24b6:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    24b8:	50 20 21    	mov.w     #0x1205, w0
    24ba:	81 cc b3    	mov.b     #0xc8, w1
    24bc:	01 48 78    	mov.b     w1, [w0]
                    break;
    24be:	91 00 37    	bra       0x25e2 <.L59>

000024c0 <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    24c0:	10 c8 bf    	mov.b     0x810, WREG
    24c2:	00 80 fb    	ze        w0, w0
    24c4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    24c6:	03 00 32    	bra       Z, 0x24ce <.L61>
    24c8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    24ca:	05 00 32    	bra       Z, 0x24d6 <.L62>
    24cc:	19 00 37    	bra       0x2500 <.L60>

000024ce <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    24ce:	0c c8 bf    	mov.b     0x80c, WREG
    24d0:	00 04 a0    	bset.b    w0, #0x0
    24d2:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    24d4:	15 00 37    	bra       0x2500 <.L60>

000024d6 <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    24d6:	40 80 20    	mov.w     #0x804, w0
    24d8:	40 40 90    	mov.b     [w0+4], w0
    24da:	00 04 e0    	cp0.b     w0
    24dc:	0e 00 3a    	bra       NZ, 0x24fa <.L63>
                                BD[EP0IN].address[0] = 0;
    24de:	30 90 80    	mov.w     0x1206, w0
    24e0:	80 40 eb    	clr.b     w1
    24e2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    24e4:	30 90 80    	mov.w     0x1206, w0
    24e6:	00 00 e8    	inc.w     w0, w0
    24e8:	80 40 eb    	clr.b     w1
    24ea:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    24ec:	40 20 21    	mov.w     #0x1204, w0
    24ee:	21 c0 b3    	mov.b     #0x2, w1
    24f0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    24f2:	50 20 21    	mov.w     #0x1205, w0
    24f4:	81 cc b3    	mov.b     #0xc8, w1
    24f6:	01 48 78    	mov.b     w1, [w0]
    24f8:	03 00 37    	bra       0x2500 <.L60>

000024fa <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    24fa:	0c c8 bf    	mov.b     0x80c, WREG
    24fc:	00 04 a0    	bset.b    w0, #0x0
    24fe:	0c e8 b7    	mov.b     WREG, 0x80c

00002500 <.L60>:
                            }
                    }
                    break;
    2500:	70 00 37    	bra       0x25e2 <.L59>

00002502 <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    2502:	10 c8 bf    	mov.b     0x810, WREG
    2504:	00 80 fb    	ze        w0, w0
    2506:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2508:	03 00 32    	bra       Z, 0x2510 <.L65>
    250a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    250c:	29 00 32    	bra       Z, 0x2560 <.L66>
    250e:	61 00 37    	bra       0x25d2 <.L135>

00002510 <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    2510:	40 80 20    	mov.w     #0x804, w0
    2512:	40 40 90    	mov.b     [w0+4], w0
    2514:	00 80 fb    	ze        w0, w0
    2516:	6f 00 60    	and.w     w0, #0xf, w0
    2518:	00 00 e0    	cp0.w     w0
    251a:	1e 00 3a    	bra       NZ, 0x2558 <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    251c:	31 90 80    	mov.w     0x1206, w1
    251e:	40 80 20    	mov.w     #0x804, w0
    2520:	40 40 90    	mov.b     [w0+4], w0
    2522:	00 04 e0    	cp0.b     w0
    2524:	07 00 3d    	bra       GE, 0x2534 <.L68>
    2526:	50 20 21    	mov.w     #0x1205, w0
    2528:	10 40 78    	mov.b     [w0], w0
    252a:	00 80 fb    	ze        w0, w0
    252c:	64 00 60    	and.w     w0, #0x4, w0
    252e:	42 80 de    	asr.w     w0, #0x2, w0
    2530:	00 40 78    	mov.b     w0, w0
    2532:	06 00 37    	bra       0x2540 <.L69>

00002534 <.L68>:
    2534:	10 20 21    	mov.w     #0x1201, w0
    2536:	10 40 78    	mov.b     [w0], w0
    2538:	00 80 fb    	ze        w0, w0
    253a:	64 00 60    	and.w     w0, #0x4, w0
    253c:	42 80 de    	asr.w     w0, #0x2, w0
    253e:	00 40 78    	mov.b     w0, w0

00002540 <.L69>:
    2540:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    2542:	30 90 80    	mov.w     0x1206, w0
    2544:	00 00 e8    	inc.w     w0, w0
    2546:	80 40 eb    	clr.b     w1
    2548:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    254a:	40 20 21    	mov.w     #0x1204, w0
    254c:	21 c0 b3    	mov.b     #0x2, w1
    254e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2550:	50 20 21    	mov.w     #0x1205, w0
    2552:	81 cc b3    	mov.b     #0xc8, w1
    2554:	01 48 78    	mov.b     w1, [w0]
    2556:	03 00 37    	bra       0x255e <.L70>

00002558 <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    2558:	0c c8 bf    	mov.b     0x80c, WREG
    255a:	00 04 a0    	bset.b    w0, #0x0
    255c:	0c e8 b7    	mov.b     WREG, 0x80c

0000255e <.L70>:
                            }
                            break;
    255e:	3c 00 37    	bra       0x25d8 <.L71>

00002560 <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    2560:	a0 4a 20    	mov.w     #0x4aa, w0
    2562:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    2564:	40 80 20    	mov.w     #0x804, w0
    2566:	40 40 90    	mov.b     [w0+4], w0
    2568:	6f 40 60    	and.b     w0, #0xf, w0
    256a:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    256c:	2e 40 90    	mov.b     [w14+2], w0
    256e:	00 80 fb    	ze        w0, w0
    2570:	00 00 40    	add.w     w0, w0, w0
    2572:	80 00 78    	mov.w     w0, w1
    2574:	40 80 20    	mov.w     #0x804, w0
    2576:	40 40 90    	mov.b     [w0+4], w0
    2578:	00 00 fb    	se        w0, w0
    257a:	4f 00 de    	lsr.w     w0, #0xf, w0
    257c:	01 00 70    	ior.w     w0, w1, w0
    257e:	c2 00 dd    	sl.w      w0, #0x2, w1
    2580:	00 20 21    	mov.w     #0x1200, w0
    2582:	00 80 40    	add.w     w1, w0, w0
    2584:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    2586:	2e 40 90    	mov.b     [w14+2], w0
    2588:	00 80 fb    	ze        w0, w0
    258a:	00 00 40    	add.w     w0, w0, w0
    258c:	1e 00 40    	add.w     w0, [w14], w0
    258e:	90 00 78    	mov.w     [w0], w1
    2590:	40 80 20    	mov.w     #0x804, w0
    2592:	40 40 90    	mov.b     [w0+4], w0
    2594:	00 04 e0    	cp0.b     w0
    2596:	02 00 3d    	bra       GE, 0x259c <.L72>
    2598:	40 00 20    	mov.w     #0x4, w0
    259a:	01 00 37    	bra       0x259e <.L73>

0000259c <.L72>:
    259c:	80 00 20    	mov.w     #0x8, w0

0000259e <.L73>:
    259e:	00 80 60    	and.w     w1, w0, w0
    25a0:	00 00 e0    	cp0.w     w0
    25a2:	13 00 32    	bra       Z, 0x25ca <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    25a4:	30 90 80    	mov.w     0x1206, w0
    25a6:	ae 00 90    	mov.w     [w14+4], w1
    25a8:	91 40 90    	mov.b     [w1+1], w1
    25aa:	81 80 fb    	ze        w1, w1
    25ac:	e4 80 60    	and.w     w1, #0x4, w1
    25ae:	c2 88 de    	asr.w     w1, #0x2, w1
    25b0:	81 40 78    	mov.b     w1, w1
    25b2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    25b4:	30 90 80    	mov.w     0x1206, w0
    25b6:	00 00 e8    	inc.w     w0, w0
    25b8:	80 40 eb    	clr.b     w1
    25ba:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    25bc:	40 20 21    	mov.w     #0x1204, w0
    25be:	21 c0 b3    	mov.b     #0x2, w1
    25c0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    25c2:	50 20 21    	mov.w     #0x1205, w0
    25c4:	81 cc b3    	mov.b     #0xc8, w1
    25c6:	01 48 78    	mov.b     w1, [w0]
    25c8:	03 00 37    	bra       0x25d0 <.L75>

000025ca <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    25ca:	0c c8 bf    	mov.b     0x80c, WREG
    25cc:	00 04 a0    	bset.b    w0, #0x0
    25ce:	0c e8 b7    	mov.b     WREG, 0x80c

000025d0 <.L75>:
                            }
                            break;
    25d0:	03 00 37    	bra       0x25d8 <.L71>

000025d2 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    25d2:	0c c8 bf    	mov.b     0x80c, WREG
    25d4:	00 04 a0    	bset.b    w0, #0x0
    25d6:	0c e8 b7    	mov.b     WREG, 0x80c

000025d8 <.L71>:
                    }
                    break;
    25d8:	04 00 37    	bra       0x25e2 <.L59>

000025da <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    25da:	0c c8 bf    	mov.b     0x80c, WREG
    25dc:	00 04 a0    	bset.b    w0, #0x0
    25de:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    25e0:	cf 01 37    	bra       0x2980 <.L42>

000025e2 <.L59>:
    25e2:	ce 01 37    	bra       0x2980 <.L42>

000025e4 <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    25e4:	40 80 20    	mov.w     #0x804, w0
    25e6:	10 40 78    	mov.b     [w0], w0
    25e8:	00 80 fb    	ze        w0, w0
    25ea:	7f 00 60    	and.w     w0, #0x1f, w0
    25ec:	00 00 e0    	cp0.w     w0
    25ee:	03 00 32    	bra       Z, 0x25f6 <.L78>
    25f0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    25f2:	1c 00 32    	bra       Z, 0x262c <.L79>
    25f4:	c5 00 37    	bra       0x2780 <.L136>

000025f6 <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    25f6:	40 80 20    	mov.w     #0x804, w0
    25f8:	20 40 90    	mov.b     [w0+2], w0
    25fa:	00 80 fb    	ze        w0, w0
    25fc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25fe:	12 00 3a    	bra       NZ, 0x2624 <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    2600:	40 80 20    	mov.w     #0x804, w0
    2602:	10 40 90    	mov.b     [w0+1], w0
    2604:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2606:	04 00 3a    	bra       NZ, 0x2610 <.L82>
                                USB_device_status &= 0xFE;
    2608:	0e c8 bf    	mov.b     0x80e, WREG
    260a:	00 04 a1    	bclr.b    w0, #0x0
    260c:	0e e8 b7    	mov.b     WREG, 0x80e
    260e:	03 00 37    	bra       0x2616 <.L83>

00002610 <.L82>:
                            else
                                USB_device_status |= 0x01;
    2610:	0e c8 bf    	mov.b     0x80e, WREG
    2612:	00 04 a0    	bset.b    w0, #0x0
    2614:	0e e8 b7    	mov.b     WREG, 0x80e

00002616 <.L83>:
                            BD[EP0IN].bytecount = 0;
    2616:	40 20 21    	mov.w     #0x1204, w0
    2618:	80 40 eb    	clr.b     w1
    261a:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    261c:	50 20 21    	mov.w     #0x1205, w0
    261e:	81 cc b3    	mov.b     #0xc8, w1
    2620:	01 48 78    	mov.b     w1, [w0]
                            break;
    2622:	03 00 37    	bra       0x262a <.L84>

00002624 <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    2624:	0c c8 bf    	mov.b     0x80c, WREG
    2626:	00 04 a0    	bset.b    w0, #0x0
    2628:	0c e8 b7    	mov.b     WREG, 0x80c

0000262a <.L84>:
                    }
                    break;
    262a:	ae 00 37    	bra       0x2788 <.L85>

0000262c <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    262c:	10 c8 bf    	mov.b     0x810, WREG
    262e:	00 80 fb    	ze        w0, w0
    2630:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2632:	03 00 32    	bra       Z, 0x263a <.L87>
    2634:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2636:	12 00 32    	bra       Z, 0x265c <.L88>
    2638:	9f 00 37    	bra       0x2778 <.L138>

0000263a <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    263a:	40 80 20    	mov.w     #0x804, w0
    263c:	40 40 90    	mov.b     [w0+4], w0
    263e:	00 80 fb    	ze        w0, w0
    2640:	6f 00 60    	and.w     w0, #0xf, w0
    2642:	00 00 e0    	cp0.w     w0
    2644:	07 00 3a    	bra       NZ, 0x2654 <.L89>
                                BD[EP0IN].bytecount = 0;
    2646:	40 20 21    	mov.w     #0x1204, w0
    2648:	80 40 eb    	clr.b     w1
    264a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    264c:	50 20 21    	mov.w     #0x1205, w0
    264e:	81 cc b3    	mov.b     #0xc8, w1
    2650:	01 48 78    	mov.b     w1, [w0]
    2652:	03 00 37    	bra       0x265a <.L90>

00002654 <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    2654:	0c c8 bf    	mov.b     0x80c, WREG
    2656:	00 04 a0    	bset.b    w0, #0x0
    2658:	0c e8 b7    	mov.b     WREG, 0x80c

0000265a <.L90>:
                            }
                            break;
    265a:	91 00 37    	bra       0x277e <.L91>

0000265c <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    265c:	a0 4a 20    	mov.w     #0x4aa, w0
    265e:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    2660:	40 80 20    	mov.w     #0x804, w0
    2662:	40 40 90    	mov.b     [w0+4], w0
    2664:	6f 40 60    	and.b     w0, #0xf, w0
    2666:	20 47 98    	mov.b     w0, [w14+2]
    2668:	2e 40 90    	mov.b     [w14+2], w0
    266a:	00 04 e0    	cp0.b     w0
    266c:	79 00 32    	bra       Z, 0x2760 <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    266e:	2e 40 90    	mov.b     [w14+2], w0
    2670:	00 80 fb    	ze        w0, w0
    2672:	00 00 40    	add.w     w0, w0, w0
    2674:	80 00 78    	mov.w     w0, w1
    2676:	40 80 20    	mov.w     #0x804, w0
    2678:	40 40 90    	mov.b     [w0+4], w0
    267a:	00 00 fb    	se        w0, w0
    267c:	4f 00 de    	lsr.w     w0, #0xf, w0
    267e:	01 00 70    	ior.w     w0, w1, w0
    2680:	c2 00 dd    	sl.w      w0, #0x2, w1
    2682:	00 20 21    	mov.w     #0x1200, w0
    2684:	00 80 40    	add.w     w1, w0, w0
    2686:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    2688:	40 80 20    	mov.w     #0x804, w0
    268a:	40 40 90    	mov.b     [w0+4], w0
    268c:	00 04 e0    	cp0.b     w0
    268e:	30 00 3d    	bra       GE, 0x26f0 <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    2690:	2e 40 90    	mov.b     [w14+2], w0
    2692:	00 80 fb    	ze        w0, w0
    2694:	00 00 40    	add.w     w0, w0, w0
    2696:	1e 00 40    	add.w     w0, [w14], w0
    2698:	10 00 78    	mov.w     [w0], w0
    269a:	64 00 60    	and.w     w0, #0x4, w0
    269c:	00 00 e0    	cp0.w     w0
    269e:	24 00 32    	bra       Z, 0x26e8 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    26a0:	40 80 20    	mov.w     #0x804, w0
    26a2:	10 40 90    	mov.b     [w0+1], w0
    26a4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    26a6:	19 00 3a    	bra       NZ, 0x26da <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    26a8:	2e 40 90    	mov.b     [w14+2], w0
    26aa:	00 80 fb    	ze        w0, w0
    26ac:	00 00 40    	add.w     w0, w0, w0
    26ae:	9e 00 40    	add.w     w0, [w14], w1
    26b0:	2e 40 90    	mov.b     [w14+2], w0
    26b2:	00 80 fb    	ze        w0, w0
    26b4:	00 00 40    	add.w     w0, w0, w0
    26b6:	1e 00 40    	add.w     w0, [w14], w0
    26b8:	10 01 78    	mov.w     [w0], w2
    26ba:	d0 0f 20    	mov.w     #0xfd, w0
    26bc:	00 00 61    	and.w     w2, w0, w0
    26be:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    26c0:	2e 00 90    	mov.w     [w14+4], w0
    26c2:	10 40 90    	mov.b     [w0+1], w0
    26c4:	80 40 78    	mov.b     w0, w1
    26c6:	01 24 a1    	bclr.b    w1, #0x2
    26c8:	2e 00 90    	mov.w     [w14+4], w0
    26ca:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    26cc:	2e 00 90    	mov.w     [w14+4], w0
    26ce:	10 40 90    	mov.b     [w0+1], w0
    26d0:	80 40 78    	mov.b     w0, w1
    26d2:	01 64 a0    	bset.b    w1, #0x6
    26d4:	2e 00 90    	mov.w     [w14+4], w0
    26d6:	11 40 98    	mov.b     w1, [w0+1]
    26d8:	43 00 37    	bra       0x2760 <.L92>

000026da <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    26da:	2e 00 90    	mov.w     [w14+4], w0
    26dc:	10 40 90    	mov.b     [w0+1], w0
    26de:	80 40 78    	mov.b     w0, w1
    26e0:	01 24 a0    	bset.b    w1, #0x2
    26e2:	2e 00 90    	mov.w     [w14+4], w0
    26e4:	11 40 98    	mov.b     w1, [w0+1]
    26e6:	3c 00 37    	bra       0x2760 <.L92>

000026e8 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    26e8:	0c c8 bf    	mov.b     0x80c, WREG
    26ea:	00 04 a0    	bset.b    w0, #0x0
    26ec:	0c e8 b7    	mov.b     WREG, 0x80c
    26ee:	38 00 37    	bra       0x2760 <.L92>

000026f0 <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    26f0:	2e 40 90    	mov.b     [w14+2], w0
    26f2:	00 80 fb    	ze        w0, w0
    26f4:	00 00 40    	add.w     w0, w0, w0
    26f6:	1e 00 40    	add.w     w0, [w14], w0
    26f8:	10 00 78    	mov.w     [w0], w0
    26fa:	68 00 60    	and.w     w0, #0x8, w0
    26fc:	00 00 e0    	cp0.w     w0
    26fe:	2d 00 32    	bra       Z, 0x275a <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    2700:	40 80 20    	mov.w     #0x804, w0
    2702:	10 40 90    	mov.b     [w0+1], w0
    2704:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2706:	19 00 3a    	bra       NZ, 0x273a <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    2708:	2e 40 90    	mov.b     [w14+2], w0
    270a:	00 80 fb    	ze        w0, w0
    270c:	00 00 40    	add.w     w0, w0, w0
    270e:	9e 00 40    	add.w     w0, [w14], w1
    2710:	2e 40 90    	mov.b     [w14+2], w0
    2712:	00 80 fb    	ze        w0, w0
    2714:	00 00 40    	add.w     w0, w0, w0
    2716:	1e 00 40    	add.w     w0, [w14], w0
    2718:	10 01 78    	mov.w     [w0], w2
    271a:	d0 0f 20    	mov.w     #0xfd, w0
    271c:	00 00 61    	and.w     w2, w0, w0
    271e:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    2720:	2e 00 90    	mov.w     [w14+4], w0
    2722:	10 40 90    	mov.b     [w0+1], w0
    2724:	80 40 78    	mov.b     w0, w1
    2726:	01 24 a1    	bclr.b    w1, #0x2
    2728:	2e 00 90    	mov.w     [w14+4], w0
    272a:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    272c:	2e 00 90    	mov.w     [w14+4], w0
    272e:	10 40 90    	mov.b     [w0+1], w0
    2730:	80 40 78    	mov.b     w0, w1
    2732:	01 64 a1    	bclr.b    w1, #0x6
    2734:	2e 00 90    	mov.w     [w14+4], w0
    2736:	11 40 98    	mov.b     w1, [w0+1]
    2738:	06 00 37    	bra       0x2746 <.L98>

0000273a <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    273a:	2e 00 90    	mov.w     [w14+4], w0
    273c:	10 40 90    	mov.b     [w0+1], w0
    273e:	80 40 78    	mov.b     w0, w1
    2740:	01 24 a0    	bset.b    w1, #0x2
    2742:	2e 00 90    	mov.w     [w14+4], w0
    2744:	11 40 98    	mov.b     w1, [w0+1]

00002746 <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    2746:	40 80 20    	mov.w     #0x804, w0
    2748:	10 40 90    	mov.b     [w0+1], w0
    274a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    274c:	02 00 3a    	bra       NZ, 0x2752 <.L99>
    274e:	80 c8 b3    	mov.b     #0x88, w0
    2750:	01 00 37    	bra       0x2754 <.L100>

00002752 <.L99>:
    2752:	40 c8 b3    	mov.b     #0x84, w0

00002754 <.L100>:
    2754:	ae 00 90    	mov.w     [w14+4], w1
    2756:	90 40 98    	mov.b     w0, [w1+1]
    2758:	03 00 37    	bra       0x2760 <.L92>

0000275a <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    275a:	0c c8 bf    	mov.b     0x80c, WREG
    275c:	00 04 a0    	bset.b    w0, #0x0
    275e:	0c e8 b7    	mov.b     WREG, 0x80c

00002760 <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    2760:	0c c8 bf    	mov.b     0x80c, WREG
    2762:	00 80 fb    	ze        w0, w0
    2764:	61 00 60    	and.w     w0, #0x1, w0
    2766:	00 00 e0    	cp0.w     w0
    2768:	06 00 3a    	bra       NZ, 0x2776 <.L101>
                                BD[EP0IN].bytecount = 0;
    276a:	40 20 21    	mov.w     #0x1204, w0
    276c:	80 40 eb    	clr.b     w1
    276e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    2770:	50 20 21    	mov.w     #0x1205, w0
    2772:	81 cc b3    	mov.b     #0xc8, w1
    2774:	01 48 78    	mov.b     w1, [w0]

00002776 <.L101>:
                            }
                            break;
    2776:	03 00 37    	bra       0x277e <.L91>

00002778 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    2778:	0c c8 bf    	mov.b     0x80c, WREG
    277a:	00 04 a0    	bset.b    w0, #0x0
    277c:	0c e8 b7    	mov.b     WREG, 0x80c

0000277e <.L91>:
                    }
                    break;
    277e:	04 00 37    	bra       0x2788 <.L85>

00002780 <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    2780:	0c c8 bf    	mov.b     0x80c, WREG
    2782:	00 04 a0    	bset.b    w0, #0x0
    2784:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    2786:	fc 00 37    	bra       0x2980 <.L42>

00002788 <.L85>:
    2788:	fb 00 37    	bra       0x2980 <.L42>

0000278a <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    278a:	40 80 20    	mov.w     #0x804, w0
    278c:	20 40 90    	mov.b     [w0+2], w0
    278e:	00 04 e0    	cp0.b     w0
    2790:	04 00 3d    	bra       GE, 0x279a <.L102>
                USB_error_flags |= REQUEST_ERROR;
    2792:	0c c8 bf    	mov.b     0x80c, WREG
    2794:	00 04 a0    	bset.b    w0, #0x0
    2796:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    2798:	f3 00 37    	bra       0x2980 <.L42>

0000279a <.L102>:
    279a:	40 80 20    	mov.w     #0x804, w0
    279c:	90 40 78    	mov.b     [w0], w1
    279e:	40 14 21    	mov.w     #0x1144, w0
    27a0:	01 48 78    	mov.b     w1, [w0]
    27a2:	40 80 20    	mov.w     #0x804, w0
    27a4:	90 40 90    	mov.b     [w0+1], w1
    27a6:	50 14 21    	mov.w     #0x1145, w0
    27a8:	01 48 78    	mov.b     w1, [w0]
    27aa:	40 80 20    	mov.w     #0x804, w0
    27ac:	10 00 90    	mov.w     [w0+2], w0
    27ae:	30 8a 88    	mov.w     w0, 0x1146
    27b0:	40 80 20    	mov.w     #0x804, w0
    27b2:	20 00 90    	mov.w     [w0+4], w0
    27b4:	40 8a 88    	mov.w     w0, 0x1148
    27b6:	40 80 20    	mov.w     #0x804, w0
    27b8:	30 00 90    	mov.w     [w0+6], w0
    27ba:	50 8a 88    	mov.w     w0, 0x114a
    27bc:	20 14 22    	mov.w     #0x2142, w0
    27be:	90 8a 88    	mov.w     w0, 0x1152
    27c0:	40 20 21    	mov.w     #0x1204, w0
    27c2:	80 40 eb    	clr.b     w1
    27c4:	01 48 78    	mov.b     w1, [w0]
    27c6:	50 20 21    	mov.w     #0x1205, w0
    27c8:	81 cc b3    	mov.b     #0xc8, w1
    27ca:	01 48 78    	mov.b     w1, [w0]
    27cc:	d9 00 37    	bra       0x2980 <.L42>

000027ce <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    27ce:	40 80 20    	mov.w     #0x804, w0
    27d0:	90 40 78    	mov.b     [w0], w1
    27d2:	40 14 21    	mov.w     #0x1144, w0
    27d4:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    27d6:	40 80 20    	mov.w     #0x804, w0
    27d8:	90 40 90    	mov.b     [w0+1], w1
    27da:	50 14 21    	mov.w     #0x1145, w0
    27dc:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    27de:	40 80 20    	mov.w     #0x804, w0
    27e0:	10 00 90    	mov.w     [w0+2], w0
    27e2:	30 8a 88    	mov.w     w0, 0x1146
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    27e4:	40 80 20    	mov.w     #0x804, w0
    27e6:	20 00 90    	mov.w     [w0+4], w0
    27e8:	40 8a 88    	mov.w     w0, 0x1148
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    27ea:	40 80 20    	mov.w     #0x804, w0
    27ec:	30 00 90    	mov.w     [w0+6], w0
    27ee:	50 8a 88    	mov.w     w0, 0x114a
            switch (USB_setup.wValue.b[1]) {
    27f0:	40 80 20    	mov.w     #0x804, w0
    27f2:	30 40 90    	mov.b     [w0+3], w0
    27f4:	00 80 fb    	ze        w0, w0
    27f6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27f8:	0b 00 32    	bra       Z, 0x2810 <.L106>
    27fa:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    27fc:	24 00 32    	bra       Z, 0x2846 <.L107>
    27fe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2800:	37 00 3a    	bra       NZ, 0x2870 <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    2802:	a0 07 2a    	mov.w     #0xa07a, w0
    2804:	60 8a 88    	mov.w     w0, 0x114c
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    2806:	60 8a 80    	mov.w     0x114c, w0
    2808:	10 40 78    	mov.b     [w0], w0
    280a:	00 80 fb    	ze        w0, w0
    280c:	70 8a 88    	mov.w     w0, 0x114e
                    break;
    280e:	39 00 37    	bra       0x2882 <.L108>

00002810 <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    2810:	40 80 20    	mov.w     #0x804, w0
    2812:	20 40 90    	mov.b     [w0+2], w0
    2814:	00 04 e0    	cp0.b     w0
    2816:	13 00 3a    	bra       NZ, 0x283e <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    2818:	40 80 20    	mov.w     #0x804, w0
    281a:	20 40 90    	mov.b     [w0+2], w0
    281c:	00 80 fb    	ze        w0, w0
    281e:	80 00 40    	add.w     w0, w0, w1
    2820:	e0 09 2a    	mov.w     #0xa09e, w0
    2822:	00 80 40    	add.w     w1, w0, w0
    2824:	10 00 78    	mov.w     [w0], w0
    2826:	60 8a 88    	mov.w     w0, 0x114c
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    2828:	60 8a 80    	mov.w     0x114c, w0
    282a:	00 80 e8    	inc2.w    w0, w0
    282c:	90 40 78    	mov.b     [w0], w1
    282e:	e0 14 21    	mov.w     #0x114e, w0
    2830:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    2832:	60 8a 80    	mov.w     0x114c, w0
    2834:	63 00 40    	add.w     w0, #0x3, w0
    2836:	90 40 78    	mov.b     [w0], w1
    2838:	f0 14 21    	mov.w     #0x114f, w0
    283a:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    283c:	22 00 37    	bra       0x2882 <.L108>

0000283e <.L109>:
    283e:	0c c8 bf    	mov.b     0x80c, WREG
    2840:	00 04 a0    	bset.b    w0, #0x0
    2842:	0c e8 b7    	mov.b     WREG, 0x80c
    2844:	1e 00 37    	bra       0x2882 <.L108>

00002846 <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    2846:	40 80 20    	mov.w     #0x804, w0
    2848:	20 40 90    	mov.b     [w0+2], w0
    284a:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    284c:	0d 00 3e    	bra       GTU, 0x2868 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    284e:	40 80 20    	mov.w     #0x804, w0
    2850:	20 40 90    	mov.b     [w0+2], w0
    2852:	00 80 fb    	ze        w0, w0
    2854:	80 00 40    	add.w     w0, w0, w1
    2856:	e0 0d 2a    	mov.w     #0xa0de, w0
    2858:	00 80 40    	add.w     w1, w0, w0
    285a:	10 00 78    	mov.w     [w0], w0
    285c:	60 8a 88    	mov.w     w0, 0x114c
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    285e:	60 8a 80    	mov.w     0x114c, w0
    2860:	10 40 78    	mov.b     [w0], w0
    2862:	00 80 fb    	ze        w0, w0
    2864:	70 8a 88    	mov.w     w0, 0x114e
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    2866:	0d 00 37    	bra       0x2882 <.L108>

00002868 <.L111>:
    2868:	0c c8 bf    	mov.b     0x80c, WREG
    286a:	00 04 a0    	bset.b    w0, #0x0
    286c:	0c e8 b7    	mov.b     WREG, 0x80c
    286e:	09 00 37    	bra       0x2882 <.L108>

00002870 <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    2870:	a0 40 80    	mov.w     0x814, w0
    2872:	00 00 e0    	cp0.w     w0
    2874:	03 00 32    	bra       Z, 0x287c <.L113>
                        USB_get_descriptor_callback();
    2876:	a0 40 80    	mov.w     0x814, w0
    2878:	00 00 01    	call      w0
    287a:	03 00 37    	bra       0x2882 <.L108>

0000287c <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    287c:	0c c8 bf    	mov.b     0x80c, WREG
    287e:	00 04 a0    	bset.b    w0, #0x0
    2880:	0c e8 b7    	mov.b     WREG, 0x80c

00002882 <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    2882:	0c c8 bf    	mov.b     0x80c, WREG
    2884:	00 80 fb    	ze        w0, w0
    2886:	61 00 60    	and.w     w0, #0x1, w0
    2888:	00 00 e0    	cp0.w     w0
    288a:	79 00 3a    	bra       NZ, 0x297e <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    288c:	40 98 22    	mov.w     #0x2984, w0
    288e:	90 8a 88    	mov.w     w0, 0x1152
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    2890:	40 80 20    	mov.w     #0x804, w0
    2892:	b0 00 90    	mov.w     [w0+6], w1
    2894:	70 8a 80    	mov.w     0x114e, w0
    2896:	80 8f 50    	sub.w     w1, w0, [w15]
    2898:	03 00 31    	bra       C, 0x28a0 <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    289a:	40 80 20    	mov.w     #0x804, w0
    289c:	30 00 90    	mov.w     [w0+6], w0
    289e:	70 8a 88    	mov.w     w0, 0x114e

000028a0 <.L115>:
                usb_send_data_packet();
    28a0:	71 00 07    	rcall     0x2984 <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    28a2:	6e 00 37    	bra       0x2980 <.L42>

000028a4 <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    28a4:	30 90 80    	mov.w     0x1206, w0
    28a6:	d1 80 20    	mov.w     #0x80d, w1
    28a8:	91 40 78    	mov.b     [w1], w1
    28aa:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    28ac:	40 20 21    	mov.w     #0x1204, w0
    28ae:	11 c0 b3    	mov.b     #0x1, w1
    28b0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    28b2:	50 20 21    	mov.w     #0x1205, w0
    28b4:	81 cc b3    	mov.b     #0xc8, w1
    28b6:	01 48 78    	mov.b     w1, [w0]
            break;
    28b8:	63 00 37    	bra       0x2980 <.L42>

000028ba <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    28ba:	40 80 20    	mov.w     #0x804, w0
    28bc:	20 40 90    	mov.b     [w0+2], w0
    28be:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    28c0:	1a 00 3e    	bra       GTU, 0x28f6 <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    28c2:	10 c0 b3    	mov.b     #0x1, w0
    28c4:	1f fc 07    	rcall     0x2104 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    28c6:	40 80 20    	mov.w     #0x804, w0
    28c8:	20 40 90    	mov.b     [w0+2], w0
    28ca:	0d e8 b7    	mov.b     WREG, 0x80d
    28cc:	0d c8 bf    	mov.b     0x80d, WREG
    28ce:	00 80 fb    	ze        w0, w0
    28d0:	00 00 e0    	cp0.w     w0
    28d2:	03 00 3a    	bra       NZ, 0x28da <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    28d4:	20 c0 b3    	mov.b     #0x2, w0
    28d6:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    28d8:	07 00 37    	bra       0x28e8 <.L119>

000028da <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    28da:	30 c0 b3    	mov.b     #0x3, w0
    28dc:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    28de:	90 40 80    	mov.w     0x812, w0
    28e0:	00 00 e0    	cp0.w     w0
    28e2:	02 00 32    	bra       Z, 0x28e8 <.L119>
                            USB_set_config_callback();
    28e4:	90 40 80    	mov.w     0x812, w0
    28e6:	00 00 01    	call      w0

000028e8 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    28e8:	40 20 21    	mov.w     #0x1204, w0
    28ea:	80 40 eb    	clr.b     w1
    28ec:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    28ee:	50 20 21    	mov.w     #0x1205, w0
    28f0:	81 cc b3    	mov.b     #0xc8, w1
    28f2:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    28f4:	45 00 37    	bra       0x2980 <.L42>

000028f6 <.L116>:
    28f6:	0c c8 bf    	mov.b     0x80c, WREG
    28f8:	00 04 a0    	bset.b    w0, #0x0
    28fa:	0c e8 b7    	mov.b     WREG, 0x80c
    28fc:	41 00 37    	bra       0x2980 <.L42>

000028fe <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    28fe:	10 c8 bf    	mov.b     0x810, WREG
    2900:	00 80 fb    	ze        w0, w0
    2902:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2904:	13 00 3a    	bra       NZ, 0x292c <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    2906:	40 80 20    	mov.w     #0x804, w0
    2908:	40 40 90    	mov.b     [w0+4], w0
    290a:	00 04 e0    	cp0.b     w0
    290c:	0a 00 3a    	bra       NZ, 0x2922 <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    290e:	30 90 80    	mov.w     0x1206, w0
    2910:	80 40 eb    	clr.b     w1
    2912:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    2914:	40 20 21    	mov.w     #0x1204, w0
    2916:	11 c0 b3    	mov.b     #0x1, w1
    2918:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    291a:	50 20 21    	mov.w     #0x1205, w0
    291c:	81 cc b3    	mov.b     #0xc8, w1
    291e:	01 48 78    	mov.b     w1, [w0]
    2920:	03 00 37    	bra       0x2928 <.L124>

00002922 <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    2922:	0c c8 bf    	mov.b     0x80c, WREG
    2924:	00 04 a0    	bset.b    w0, #0x0
    2926:	0c e8 b7    	mov.b     WREG, 0x80c

00002928 <.L124>:
                    }
                    break;
    2928:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    292a:	2a 00 37    	bra       0x2980 <.L42>

0000292c <.L141>:
    292c:	0c c8 bf    	mov.b     0x80c, WREG
    292e:	00 04 a0    	bset.b    w0, #0x0
    2930:	0c e8 b7    	mov.b     WREG, 0x80c
    2932:	26 00 37    	bra       0x2980 <.L42>

00002934 <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    2934:	10 c8 bf    	mov.b     0x810, WREG
    2936:	00 80 fb    	ze        w0, w0
    2938:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    293a:	19 00 3a    	bra       NZ, 0x296e <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    293c:	40 80 20    	mov.w     #0x804, w0
    293e:	40 40 90    	mov.b     [w0+4], w0
    2940:	00 04 e0    	cp0.b     w0
    2942:	10 00 3a    	bra       NZ, 0x2964 <.L128>
                        switch (USB_setup.wValue.b[0]) {
    2944:	40 80 20    	mov.w     #0x804, w0
    2946:	20 40 90    	mov.b     [w0+2], w0
    2948:	00 80 fb    	ze        w0, w0
    294a:	00 00 e0    	cp0.w     w0
    294c:	07 00 3a    	bra       NZ, 0x295c <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    294e:	40 20 21    	mov.w     #0x1204, w0
    2950:	80 40 eb    	clr.b     w1
    2952:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    2954:	50 20 21    	mov.w     #0x1205, w0
    2956:	81 cc b3    	mov.b     #0xc8, w1
    2958:	01 48 78    	mov.b     w1, [w0]
                                break;
    295a:	07 00 37    	bra       0x296a <.L132>

0000295c <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    295c:	0c c8 bf    	mov.b     0x80c, WREG
    295e:	00 04 a0    	bset.b    w0, #0x0
    2960:	0c e8 b7    	mov.b     WREG, 0x80c
    2962:	03 00 37    	bra       0x296a <.L132>

00002964 <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    2964:	0c c8 bf    	mov.b     0x80c, WREG
    2966:	00 04 a0    	bset.b    w0, #0x0
    2968:	0c e8 b7    	mov.b     WREG, 0x80c

0000296a <.L132>:
                    }
                    break;
    296a:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    296c:	09 00 37    	bra       0x2980 <.L42>

0000296e <.L142>:
    296e:	0c c8 bf    	mov.b     0x80c, WREG
    2970:	00 04 a0    	bset.b    w0, #0x0
    2972:	0c e8 b7    	mov.b     WREG, 0x80c
    2974:	05 00 37    	bra       0x2980 <.L42>

00002976 <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    2976:	0c c8 bf    	mov.b     0x80c, WREG
    2978:	00 04 a0    	bset.b    w0, #0x0
    297a:	0c e8 b7    	mov.b     WREG, 0x80c
    297c:	01 00 37    	bra       0x2980 <.L42>

0000297e <.L144>:
    297e:	00 00 00    	nop       

00002980 <.L42>:
    }
}
    2980:	00 80 fa    	ulnk      
    2982:	00 00 06    	return    

00002984 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    2984:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    2986:	71 8a 80    	mov.w     0x114e, w1
    2988:	f0 03 20    	mov.w     #0x3f, w0
    298a:	80 8f 50    	sub.w     w1, w0, [w15]
    298c:	05 00 3e    	bra       GTU, 0x2998 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    298e:	70 8a 80    	mov.w     0x114e, w0
    2990:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    2992:	00 00 eb    	clr.w     w0
    2994:	70 8a 88    	mov.w     w0, 0x114e
    2996:	05 00 37    	bra       0x29a2 <.L147>

00002998 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    2998:	00 c4 b3    	mov.b     #0x40, w0
    299a:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    299c:	70 8a 80    	mov.w     0x114e, w0
    299e:	00 04 b1    	sub.w     #0x40, w0
    29a0:	70 8a 88    	mov.w     w0, 0x114e

000029a2 <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    29a2:	00 40 eb    	clr.b     w0
    29a4:	10 47 98    	mov.b     w0, [w14+1]
    29a6:	0c 00 37    	bra       0x29c0 <.L148>

000029a8 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    29a8:	31 90 80    	mov.w     0x1206, w1
    29aa:	1e 40 90    	mov.b     [w14+1], w0
    29ac:	00 80 fb    	ze        w0, w0
    29ae:	80 80 40    	add.w     w1, w0, w1
    29b0:	60 8a 80    	mov.w     0x114c, w0
    29b2:	10 41 78    	mov.b     [w0], w2
    29b4:	82 48 78    	mov.b     w2, [w1]
    29b6:	00 00 e8    	inc.w     w0, w0
    29b8:	60 8a 88    	mov.w     w0, 0x114c
    29ba:	1e 40 90    	mov.b     [w14+1], w0
    29bc:	00 40 e8    	inc.b     w0, w0
    29be:	10 47 98    	mov.b     w0, [w14+1]

000029c0 <.L148>:
    29c0:	1e 40 90    	mov.b     [w14+1], w0
    29c2:	9e 4f 50    	sub.b     w0, [w14], [w15]
    29c4:	f1 ff 39    	bra       NC, 0x29a8 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    29c6:	40 20 21    	mov.w     #0x1204, w0
    29c8:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    29ca:	50 20 21    	mov.w     #0x1205, w0
    29cc:	10 40 78    	mov.b     [w0], w0
    29ce:	00 c0 ea    	com.b     w0, w0
    29d0:	02 c4 b3    	mov.b     #0x40, w2
    29d2:	82 40 60    	and.b     w0, w2, w1
    29d4:	80 c8 b3    	mov.b     #0x88, w0
    29d6:	00 c0 70    	ior.b     w1, w0, w0
    29d8:	80 40 78    	mov.b     w0, w1
    29da:	50 20 21    	mov.w     #0x1205, w0
    29dc:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    29de:	70 8a 80    	mov.w     0x114e, w0
    29e0:	00 00 e0    	cp0.w     w0
    29e2:	0f 00 3a    	bra       NZ, 0x2a02 <.L145>
        if (USB_request.done_callback)
    29e4:	80 8a 80    	mov.w     0x1150, w0
    29e6:	00 00 e0    	cp0.w     w0
    29e8:	02 00 32    	bra       Z, 0x29ee <.L151>
            USB_request.done_callback();
    29ea:	80 8a 80    	mov.w     0x1150, w0
    29ec:	00 00 01    	call      w0

000029ee <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    29ee:	40 14 21    	mov.w     #0x1144, w0
    29f0:	80 c0 eb    	setm.b    w1
    29f2:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    29f4:	50 14 21    	mov.w     #0x1145, w0
    29f6:	80 c0 eb    	setm.b    w1
    29f8:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    29fa:	00 00 eb    	clr.w     w0
    29fc:	80 8a 88    	mov.w     w0, 0x1150
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    29fe:	00 00 eb    	clr.w     w0
    2a00:	90 8a 88    	mov.w     w0, 0x1152

00002a02 <.L145>:
    }
}
    2a02:	00 80 fa    	ulnk      
    2a04:	00 00 06    	return    

00002a06 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    2a06:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    2a08:	00 40 eb    	clr.b     w0
    2a0a:	00 4f 78    	mov.b     w0, [w14]
    2a0c:	09 00 37    	bra       0x2a20 <.L153>

00002a0e <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    2a0e:	60 8a 80    	mov.w     0x114c, w0
    2a10:	12 90 80    	mov.w     0x1202, w2
    2a12:	9e 80 fb    	ze        [w14], w1
    2a14:	81 00 41    	add.w     w2, w1, w1
    2a16:	91 40 78    	mov.b     [w1], w1
    2a18:	01 48 78    	mov.b     w1, [w0]
    2a1a:	00 00 e8    	inc.w     w0, w0
    2a1c:	60 8a 88    	mov.w     w0, 0x114c
    2a1e:	1e 4f e8    	inc.b     [w14], [w14]

00002a20 <.L153>:
    2a20:	00 20 21    	mov.w     #0x1200, w0
    2a22:	10 40 78    	mov.b     [w0], w0
    2a24:	9e 4f 50    	sub.b     w0, [w14], [w15]
    2a26:	f3 ff 3e    	bra       GTU, 0x2a0e <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    2a28:	71 8a 80    	mov.w     0x114e, w1
    2a2a:	00 20 21    	mov.w     #0x1200, w0
    2a2c:	10 40 78    	mov.b     [w0], w0
    2a2e:	00 80 fb    	ze        w0, w0
    2a30:	00 80 50    	sub.w     w1, w0, w0
    2a32:	70 8a 88    	mov.w     w0, 0x114e
    if (USB_request.bytes_left.w > 0) {
    2a34:	70 8a 80    	mov.w     0x114e, w0
    2a36:	00 00 e0    	cp0.w     w0
    2a38:	0e 00 32    	bra       Z, 0x2a56 <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2a3a:	00 20 21    	mov.w     #0x1200, w0
    2a3c:	01 c4 b3    	mov.b     #0x40, w1
    2a3e:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    2a40:	10 20 21    	mov.w     #0x1201, w0
    2a42:	10 40 78    	mov.b     [w0], w0
    2a44:	00 c0 ea    	com.b     w0, w0
    2a46:	02 c4 b3    	mov.b     #0x40, w2
    2a48:	82 40 60    	and.b     w0, w2, w1
    2a4a:	80 c8 b3    	mov.b     #0x88, w0
    2a4c:	00 c0 70    	ior.b     w1, w0, w0
    2a4e:	80 40 78    	mov.b     w0, w1
    2a50:	10 20 21    	mov.w     #0x1201, w0
    2a52:	01 48 78    	mov.b     w1, [w0]
    2a54:	0f 00 37    	bra       0x2a74 <.L152>

00002a56 <.L155>:
    } else {
        if (USB_request.done_callback)
    2a56:	80 8a 80    	mov.w     0x1150, w0
    2a58:	00 00 e0    	cp0.w     w0
    2a5a:	02 00 32    	bra       Z, 0x2a60 <.L157>
            USB_request.done_callback();
    2a5c:	80 8a 80    	mov.w     0x1150, w0
    2a5e:	00 00 01    	call      w0

00002a60 <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    2a60:	40 14 21    	mov.w     #0x1144, w0
    2a62:	80 c0 eb    	setm.b    w1
    2a64:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    2a66:	50 14 21    	mov.w     #0x1145, w0
    2a68:	80 c0 eb    	setm.b    w1
    2a6a:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    2a6c:	00 00 eb    	clr.w     w0
    2a6e:	80 8a 88    	mov.w     w0, 0x1150
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    2a70:	00 00 eb    	clr.w     w0
    2a72:	90 8b 88    	mov.w     w0, 0x1172

00002a74 <.L152>:
    }
}
    2a74:	00 80 fa    	ulnk      
    2a76:	00 00 06    	return    

00002a78 <_even_parity>:
    2a78:	02 00 fa    	lnk       #0x2
    2a7a:	00 0f 78    	mov.w     w0, [w14]
    2a7c:	1e 00 78    	mov.w     [w14], w0
    2a7e:	48 00 de    	lsr.w     w0, #0x8, w0
    2a80:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2a82:	1e 00 78    	mov.w     [w14], w0
    2a84:	44 00 de    	lsr.w     w0, #0x4, w0
    2a86:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2a88:	1e 00 78    	mov.w     [w14], w0
    2a8a:	42 00 de    	lsr.w     w0, #0x2, w0
    2a8c:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2a8e:	1e 00 78    	mov.w     [w14], w0
    2a90:	00 00 d1    	lsr.w     w0, w0
    2a92:	1e 0f 68    	xor.w     w0, [w14], [w14]
    2a94:	9e 00 78    	mov.w     [w14], w1
    2a96:	61 80 60    	and.w     w1, #0x1, w0
    2a98:	00 80 fa    	ulnk      
    2a9a:	00 00 06    	return    

00002a9c <_enc_readReg>:
    2a9c:	08 00 fa    	lnk       #0x8
    2a9e:	88 9f be    	mov.d     w8, [w15++]
    2aa0:	00 04 78    	mov.w     w0, w8
    2aa2:	31 07 98    	mov.w     w1, [w14+6]
    2aa4:	3e 00 90    	mov.w     [w14+6], w0
    2aa6:	00 e0 a0    	bset.w    w0, #0xe
    2aa8:	10 07 98    	mov.w     w0, [w14+2]
    2aaa:	9e 04 90    	mov.w     [w14+2], w9
    2aac:	1e 00 90    	mov.w     [w14+2], w0
    2aae:	e4 ff 07    	rcall     0x2a78 <_even_parity> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2ab0:	4f 00 dd    	sl.w      w0, #0xf, w0
    2ab2:	09 00 70    	ior.w     w0, w9, w0
    2ab4:	10 07 98    	mov.w     w0, [w14+2]
    2ab6:	ea a2 a9    	bclr.b    0x2ea, #0x5
    2ab8:	3e 40 90    	mov.b     [w14+3], w0
    2aba:	00 80 fb    	ze        w0, w0
    2abc:	40 13 88    	mov.w     w0, 0x268
    2abe:	00 00 00    	nop       

00002ac0 <.L3>:
    2ac0:	00 13 80    	mov.w     0x260, w0
    2ac2:	61 00 60    	and.w     w0, #0x1, w0
    2ac4:	00 00 e0    	cp0.w     w0
    2ac6:	fc ff 32    	bra       Z, 0x2ac0 <.L3>
    2ac8:	41 13 80    	mov.w     0x268, w1
    2aca:	01 0f 78    	mov.w     w1, [w14]
    2acc:	2e 40 90    	mov.b     [w14+2], w0
    2ace:	00 80 fb    	ze        w0, w0
    2ad0:	40 13 88    	mov.w     w0, 0x268
    2ad2:	00 00 00    	nop       

00002ad4 <.L4>:
    2ad4:	00 13 80    	mov.w     0x260, w0
    2ad6:	61 00 60    	and.w     w0, #0x1, w0
    2ad8:	00 00 e0    	cp0.w     w0
    2ada:	fc ff 32    	bra       Z, 0x2ad4 <.L4>
    2adc:	41 13 80    	mov.w     0x268, w1
    2ade:	01 0f 78    	mov.w     w1, [w14]
    2ae0:	ea a2 a8    	bset.b    0x2ea, #0x5
	...
    2aee:	ea a2 a9    	bclr.b    0x2ea, #0x5
    2af0:	68 22 ef    	clr.w     0x268
    2af2:	00 00 00    	nop       

00002af4 <.L5>:
    2af4:	00 13 80    	mov.w     0x260, w0
    2af6:	61 00 60    	and.w     w0, #0x1, w0
    2af8:	00 00 e0    	cp0.w     w0
    2afa:	fc ff 32    	bra       Z, 0x2af4 <.L5>
    2afc:	40 13 80    	mov.w     0x268, w0
    2afe:	00 40 78    	mov.b     w0, w0
    2b00:	50 47 98    	mov.b     w0, [w14+5]
    2b02:	68 22 ef    	clr.w     0x268
    2b04:	00 00 00    	nop       

00002b06 <.L6>:
    2b06:	00 13 80    	mov.w     0x260, w0
    2b08:	61 00 60    	and.w     w0, #0x1, w0
    2b0a:	00 00 e0    	cp0.w     w0
    2b0c:	fc ff 32    	bra       Z, 0x2b06 <.L6>
    2b0e:	40 13 80    	mov.w     0x268, w0
    2b10:	00 40 78    	mov.b     w0, w0
    2b12:	40 47 98    	mov.b     w0, [w14+4]
    2b14:	ea a2 a8    	bset.b    0x2ea, #0x5
    2b16:	ae 00 90    	mov.w     [w14+4], w1
    2b18:	01 0c 78    	mov.w     w1, [w8]
    2b1a:	08 00 78    	mov.w     w8, w0
    2b1c:	4f 04 be    	mov.d     [--w15], w8
    2b1e:	00 80 fa    	ulnk      
    2b20:	00 00 06    	return    

00002b22 <_vendor_requests>:
    2b22:	04 00 fa    	lnk       #0x4
    2b24:	f0 ff 23    	mov.w     #0x3fff, w0
    2b26:	00 0f 78    	mov.w     w0, [w14]
    2b28:	40 80 20    	mov.w     #0x804, w0
    2b2a:	10 40 90    	mov.b     [w0+1], w0
    2b2c:	00 80 fb    	ze        w0, w0
    2b2e:	cf 80 de    	asr.w     w0, #0xf, w1
    2b30:	92 00 20    	mov.w     #0x9, w2
    2b32:	03 00 20    	mov.w     #0x0, w3
    2b34:	82 0f 50    	sub.w     w0, w2, [w15]
    2b36:	83 8f 58    	subb.w    w1, w3, [w15]
    2b38:	b9 00 3e    	bra       GTU, 0x2cac <.L8>
    2b3a:	00 60 01    	bra       w0
    2b3c:	09 00 37    	bra       0x2b50 <.L9> <.LBB2>
    2b3e:	15 00 37    	bra       0x2b6a <.L10>
    2b40:	22 00 37    	bra       0x2b86 <.L11>
    2b42:	30 00 37    	bra       0x2ba4 <.L12>
    2b44:	3d 00 37    	bra       0x2bc0 <.L13>
    2b46:	4d 00 37    	bra       0x2be2 <.L14>
    2b48:	5d 00 37    	bra       0x2c04 <.L15>
    2b4a:	86 00 37    	bra       0x2c58 <.L16>
    2b4c:	8f 00 37    	bra       0x2c6c <.L17>
    2b4e:	9e 00 37    	bra       0x2c8c <.L18>

00002b50 <.L9>:
    2b50:	dc e2 a8    	bset.b    0x2dc, #0x7
    2b52:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2b54:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2b56:	24 28 ef    	clr.w     0x824
    2b58:	10 00 20    	mov.w     #0x1, w0
    2b5a:	00 41 88    	mov.w     w0, 0x820
    2b5c:	40 20 21    	mov.w     #0x1204, w0
    2b5e:	80 40 eb    	clr.b     w1
    2b60:	01 48 78    	mov.b     w1, [w0]
    2b62:	50 20 21    	mov.w     #0x1205, w0
    2b64:	81 cc b3    	mov.b     #0xc8, w1
    2b66:	01 48 78    	mov.b     w1, [w0]
    2b68:	a4 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002b6a <.L10>:
    2b6a:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2b6c:	ec 02 a8    	bset.b    0x2ec, #0x0
    2b6e:	ec 22 a9    	bclr.b    0x2ec, #0x1
    2b70:	10 00 20    	mov.w     #0x1, w0
    2b72:	20 41 88    	mov.w     w0, 0x824
    2b74:	10 00 20    	mov.w     #0x1, w0
    2b76:	00 41 88    	mov.w     w0, 0x820
    2b78:	40 20 21    	mov.w     #0x1204, w0
    2b7a:	80 40 eb    	clr.b     w1
    2b7c:	01 48 78    	mov.b     w1, [w0]
    2b7e:	50 20 21    	mov.w     #0x1205, w0
    2b80:	81 cc b3    	mov.b     #0xc8, w1
    2b82:	01 48 78    	mov.b     w1, [w0]
    2b84:	96 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002b86 <.L11>:
    2b86:	dc e2 a9    	bclr.b    0x2dc, #0x7
    2b88:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2b8a:	ec 22 a8    	bset.b    0x2ec, #0x1
    2b8c:	20 00 20    	mov.w     #0x2, w0
    2b8e:	20 41 88    	mov.w     w0, 0x824
    2b90:	10 00 20    	mov.w     #0x1, w0
    2b92:	00 41 88    	mov.w     w0, 0x820
    2b94:	db 42 a8    	bset.b    0x2db, #0x2
    2b96:	40 20 21    	mov.w     #0x1204, w0
    2b98:	80 40 eb    	clr.b     w1
    2b9a:	01 48 78    	mov.b     w1, [w0]
    2b9c:	50 20 21    	mov.w     #0x1205, w0
    2b9e:	81 cc b3    	mov.b     #0xc8, w1
    2ba0:	01 48 78    	mov.b     w1, [w0]
    2ba2:	87 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002ba4 <.L12>:
    2ba4:	dc e2 a8    	bset.b    0x2dc, #0x7
    2ba6:	ec 02 a9    	bclr.b    0x2ec, #0x0
    2ba8:	ec 22 a8    	bset.b    0x2ec, #0x1
    2baa:	30 00 20    	mov.w     #0x3, w0
    2bac:	20 41 88    	mov.w     w0, 0x824
    2bae:	10 00 20    	mov.w     #0x1, w0
    2bb0:	00 41 88    	mov.w     w0, 0x820
    2bb2:	40 20 21    	mov.w     #0x1204, w0
    2bb4:	80 40 eb    	clr.b     w1
    2bb6:	01 48 78    	mov.b     w1, [w0]
    2bb8:	50 20 21    	mov.w     #0x1205, w0
    2bba:	81 cc b3    	mov.b     #0xc8, w1
    2bbc:	01 48 78    	mov.b     w1, [w0]
    2bbe:	79 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002bc0 <.L13>:
    2bc0:	30 90 80    	mov.w     0x1206, w0
    2bc2:	92 16 80    	mov.w     0x2d2, w2
    2bc4:	01 00 21    	mov.w     #0x1000, w1
    2bc6:	81 00 61    	and.w     w2, w1, w1
    2bc8:	01 f0 a7    	btsc.w    w1, #0xf
    2bca:	81 00 ea    	neg.w     w1, w1
    2bcc:	81 00 ea    	neg.w     w1, w1
    2bce:	cf 08 de    	lsr.w     w1, #0xf, w1
    2bd0:	81 40 78    	mov.b     w1, w1
    2bd2:	01 48 78    	mov.b     w1, [w0]
    2bd4:	40 20 21    	mov.w     #0x1204, w0
    2bd6:	11 c0 b3    	mov.b     #0x1, w1
    2bd8:	01 48 78    	mov.b     w1, [w0]
    2bda:	50 20 21    	mov.w     #0x1205, w0
    2bdc:	81 cc b3    	mov.b     #0xc8, w1
    2bde:	01 48 78    	mov.b     w1, [w0]
    2be0:	68 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002be2 <.L14>:
    2be2:	30 90 80    	mov.w     0x1206, w0
    2be4:	52 16 80    	mov.w     0x2ca, w2
    2be6:	01 00 21    	mov.w     #0x1000, w1
    2be8:	81 00 61    	and.w     w2, w1, w1
    2bea:	01 f0 a7    	btsc.w    w1, #0xf
    2bec:	81 00 ea    	neg.w     w1, w1
    2bee:	81 00 ea    	neg.w     w1, w1
    2bf0:	cf 08 de    	lsr.w     w1, #0xf, w1
    2bf2:	81 40 78    	mov.b     w1, w1
    2bf4:	01 48 78    	mov.b     w1, [w0]
    2bf6:	40 20 21    	mov.w     #0x1204, w0
    2bf8:	11 c0 b3    	mov.b     #0x1, w1
    2bfa:	01 48 78    	mov.b     w1, [w0]
    2bfc:	50 20 21    	mov.w     #0x1205, w0
    2bfe:	81 cc b3    	mov.b     #0xc8, w1
    2c00:	01 48 78    	mov.b     w1, [w0]
    2c02:	57 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002c04 <.L15>:
    2c04:	0e 80 e8    	inc2.w    w14, w0
    2c06:	41 80 20    	mov.w     #0x804, w1
    2c08:	91 00 90    	mov.w     [w1+2], w1
    2c0a:	48 ff 07    	rcall     0x2a9c <_enc_readReg> <.LFB1> <.LFE0>
    2c0c:	30 90 80    	mov.w     0x1206, w0
    2c0e:	ae 40 90    	mov.b     [w14+2], w1
    2c10:	01 48 78    	mov.b     w1, [w0]
    2c12:	30 90 80    	mov.w     0x1206, w0
    2c14:	00 00 e8    	inc.w     w0, w0
    2c16:	be 40 90    	mov.b     [w14+3], w1
    2c18:	01 48 78    	mov.b     w1, [w0]
    2c1a:	40 20 21    	mov.w     #0x1204, w0
    2c1c:	21 c0 b3    	mov.b     #0x2, w1
    2c1e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[0] = temp.b[0];
            BD[EP0IN].address[1] = temp.b[1];
            BD[EP0IN].bytecount = 2;
            // anglelast = angle;
            angle = ((temp.b[0] + (temp.b[1] << 8)) & 0x3FFF)/100;
    2c20:	2e 40 90    	mov.b     [w14+2], w0
    2c22:	80 80 fb    	ze        w0, w1
    2c24:	3e 40 90    	mov.b     [w14+3], w0
    2c26:	00 80 fb    	ze        w0, w0
    2c28:	48 00 dd    	sl.w      w0, #0x8, w0
    2c2a:	80 80 40    	add.w     w1, w0, w1
    2c2c:	f0 ff 23    	mov.w     #0x3fff, w0
    2c2e:	00 81 60    	and.w     w1, w0, w2
    2c30:	b0 47 21    	mov.w     #0x147b, w0
    2c32:	00 90 b9    	mul.ss    w2, w0, w0
    2c34:	c3 88 de    	asr.w     w1, #0x3, w1
    2c36:	4f 90 de    	asr.w     w2, #0xf, w0
    2c38:	00 80 50    	sub.w     w1, w0, w0
    2c3a:	f0 40 88    	mov.w     w0, 0x81e
            // angle = (temp[0] + 256 * temp[1]) && 0x3FFF;
            printf("angles: %d\r\n",angle);
    2c3c:	f0 40 80    	mov.w     0x81e, w0
    2c3e:	80 1f 78    	mov.w     w0, [w15++]
    2c40:	40 0e 2a    	mov.w     #0xa0e4, w0
    2c42:	80 1f 78    	mov.w     w0, [w15++]
    2c44:	39 f3 07    	rcall     0x12b8 <__printf_cdnopuxX>
    2c46:	e4 87 57    	sub.w     w15, #0x4, w15
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    2c48:	50 20 21    	mov.w     #0x1205, w0
    2c4a:	81 cc b3    	mov.b     #0xc8, w1
    2c4c:	01 48 78    	mov.b     w1, [w0]


            postion();
    2c4e:	60 cb 22    	mov.w     #0x2cb6, w0
    2c50:	00 00 01    	call      w0
            modeControl();
    2c52:	40 d0 22    	mov.w     #0x2d04, w0
    2c54:	00 00 01    	call      w0
            break;
    2c56:	2d 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002c58 <.L16>:
        case SET_DUTY_VAL:
            OC1R = USB_setup.wValue.w;
    2c58:	40 80 20    	mov.w     #0x804, w0
    2c5a:	10 00 90    	mov.w     [w0+2], w0
    2c5c:	b0 0c 88    	mov.w     w0, 0x196
            BD[EP0IN].bytecount = 0;
    2c5e:	40 20 21    	mov.w     #0x1204, w0
    2c60:	80 40 eb    	clr.b     w1
    2c62:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    2c64:	50 20 21    	mov.w     #0x1205, w0
    2c66:	81 cc b3    	mov.b     #0xc8, w1
    2c68:	01 48 78    	mov.b     w1, [w0]
            break;
    2c6a:	23 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002c6c <.L17>:
        case GET_DUTY_VAL:
            temp.w = OC1R;
    2c6c:	b0 0c 80    	mov.w     0x196, w0
    2c6e:	10 07 98    	mov.w     w0, [w14+2]
            BD[EP0IN].address[0] = temp.b[0];
    2c70:	30 90 80    	mov.w     0x1206, w0
    2c72:	ae 40 90    	mov.b     [w14+2], w1
    2c74:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = temp.b[1];
    2c76:	30 90 80    	mov.w     0x1206, w0
    2c78:	00 00 e8    	inc.w     w0, w0
    2c7a:	be 40 90    	mov.b     [w14+3], w1
    2c7c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;
    2c7e:	40 20 21    	mov.w     #0x1204, w0
    2c80:	21 c0 b3    	mov.b     #0x2, w1
    2c82:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    2c84:	50 20 21    	mov.w     #0x1205, w0
    2c86:	81 cc b3    	mov.b     #0xc8, w1
    2c88:	01 48 78    	mov.b     w1, [w0]
            break;
    2c8a:	13 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002c8c <.L18>:
        case GET_DUTY_MAX:
            temp.w = OC1RS;
    2c8c:	a0 0c 80    	mov.w     0x194, w0
    2c8e:	10 07 98    	mov.w     w0, [w14+2]
            BD[EP0IN].address[0] = temp.b[0];
    2c90:	30 90 80    	mov.w     0x1206, w0
    2c92:	ae 40 90    	mov.b     [w14+2], w1
    2c94:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = temp.b[1];
    2c96:	30 90 80    	mov.w     0x1206, w0
    2c98:	00 00 e8    	inc.w     w0, w0
    2c9a:	be 40 90    	mov.b     [w14+3], w1
    2c9c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;
    2c9e:	40 20 21    	mov.w     #0x1204, w0
    2ca0:	21 c0 b3    	mov.b     #0x2, w1
    2ca2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    2ca4:	50 20 21    	mov.w     #0x1205, w0
    2ca6:	81 cc b3    	mov.b     #0xc8, w1
    2ca8:	01 48 78    	mov.b     w1, [w0]
            break;
    2caa:	03 00 37    	bra       0x2cb2 <.L7> <.LBE2>

00002cac <.L8>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    2cac:	0c c8 bf    	mov.b     0x80c, WREG
    2cae:	00 04 a0    	bset.b    w0, #0x0
    2cb0:	0c e8 b7    	mov.b     WREG, 0x80c

00002cb2 <.L7>:
    }
}
    2cb2:	00 80 fa    	ulnk      
    2cb4:	00 00 06    	return    

00002cb6 <_postion>:
void postion(void){
    2cb6:	02 00 fa    	lnk       #0x2
  printf("angtemp: %d\r\n",angtemp);
    2cb8:	e0 40 80    	mov.w     0x81c, w0
    2cba:	80 1f 78    	mov.w     w0, [w15++]
    2cbc:	10 0f 2a    	mov.w     #0xa0f1, w0
    2cbe:	80 1f 78    	mov.w     w0, [w15++]
    2cc0:	fb f2 07    	rcall     0x12b8 <__printf_cdnopuxX>
    2cc2:	e4 87 57    	sub.w     w15, #0x4, w15
  if(angle != angtemp && angle != 0 && angtemp != 0 ){
    2cc4:	f1 40 80    	mov.w     0x81e, w1
    2cc6:	e0 40 80    	mov.w     0x81c, w0
    2cc8:	80 8f 50    	sub.w     w1, w0, [w15]
    2cca:	12 00 32    	bra       Z, 0x2cf0 <.L22> <.LBE3>
    2ccc:	f0 40 80    	mov.w     0x81e, w0
    2cce:	00 00 e0    	cp0.w     w0
    2cd0:	0f 00 32    	bra       Z, 0x2cf0 <.L22> <.LBE3>
    2cd2:	e0 40 80    	mov.w     0x81c, w0
    2cd4:	00 00 e0    	cp0.w     w0
    2cd6:	0c 00 32    	bra       Z, 0x2cf0 <.L22> <.LBE3>

00002cd8 <.LBB3>:
    int diff = (angle - angtemp);
    2cd8:	f1 40 80    	mov.w     0x81e, w1
    2cda:	e0 40 80    	mov.w     0x81c, w0
    2cdc:	00 8f 50    	sub.w     w1, w0, [w14]
    pos += diff;
    2cde:	d0 40 80    	mov.w     0x81a, w0
    2ce0:	1e 00 40    	add.w     w0, [w14], w0
    2ce2:	d0 40 88    	mov.w     w0, 0x81a
    printf("%d\r\n",angtemp);
    2ce4:	e0 40 80    	mov.w     0x81c, w0
    2ce6:	80 1f 78    	mov.w     w0, [w15++]
    2ce8:	f0 0f 2a    	mov.w     #0xa0ff, w0
    2cea:	80 1f 78    	mov.w     w0, [w15++]
    2cec:	e5 f2 07    	rcall     0x12b8 <__printf_cdnopuxX>
    2cee:	e4 87 57    	sub.w     w15, #0x4, w15

00002cf0 <.L22>:
  }
  angtemp = angle;
    2cf0:	f0 40 80    	mov.w     0x81e, w0
    2cf2:	e0 40 88    	mov.w     w0, 0x81c
  printf("%d\r\n",pos);
    2cf4:	d0 40 80    	mov.w     0x81a, w0
    2cf6:	80 1f 78    	mov.w     w0, [w15++]
    2cf8:	f0 0f 2a    	mov.w     #0xa0ff, w0
    2cfa:	80 1f 78    	mov.w     w0, [w15++]
    2cfc:	dd f2 07    	rcall     0x12b8 <__printf_cdnopuxX>
    2cfe:	e4 87 57    	sub.w     w15, #0x4, w15
}
    2d00:	00 80 fa    	ulnk      
    2d02:	00 00 06    	return    

00002d04 <_modeControl>:
void modeControl(void){
    2d04:	00 00 fa    	lnk       #0x0
  // printf("mode");
  switch (MODE){
    2d06:	20 41 80    	mov.w     0x824, w0
    2d08:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2d0a:	32 00 32    	bra       Z, 0x2d70 <.L26>
    2d0c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2d0e:	03 00 3c    	bra       GT, 0x2d16 <.L29>
    2d10:	00 00 e0    	cp0.w     w0
    2d12:	06 00 32    	bra       Z, 0x2d20 <.L25>
    2d14:	5d 00 37    	bra       0x2dd0 <.L24>

00002d16 <.L29>:
    2d16:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2d18:	2d 00 32    	bra       Z, 0x2d74 <.L27>
    2d1a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2d1c:	57 00 32    	bra       Z, 0x2dcc <.L28>
    2d1e:	58 00 37    	bra       0x2dd0 <.L24>

00002d20 <.L25>:
    case SPRING:   // should keep a change
        D10 = 1;
    2d20:	da 02 a8    	bset.b    0x2da, #0x0
        // //LED1 = 1; LED2 = 0; LED3 = 0; MODE = 0
        // if(angle >= 0 && angle <= 8 ){
        //   D9 = !D9;
        //   printf(" turn" );
        // }
        // D6 = 1;
        // // printf(" spring %d", angle);
        if(chan == 1){
    2d22:	00 41 80    	mov.w     0x820, w0
    2d24:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2d26:	02 00 3a    	bra       NZ, 0x2d2c <.L30>
          tempangle = 60;
    2d28:	c0 03 20    	mov.w     #0x3c, w0
    2d2a:	10 41 88    	mov.w     w0, 0x822

00002d2c <.L30>:
          // printf("%d\r\n",tempangle);
        }
        if(angle >= 0){
    2d2c:	f0 40 80    	mov.w     0x81e, w0
    2d2e:	00 00 e0    	cp0.w     w0
    2d30:	1d 00 35    	bra       LT, 0x2d6c <.L31>
        if(angle >= tempangle+2 || angle <= tempangle-2){
    2d32:	10 41 80    	mov.w     0x822, w0
    2d34:	80 80 e8    	inc2.w    w0, w1
    2d36:	f0 40 80    	mov.w     0x81e, w0
    2d38:	80 8f 50    	sub.w     w1, w0, [w15]
    2d3a:	05 00 34    	bra       LE, 0x2d46 <.L32>
    2d3c:	10 41 80    	mov.w     0x822, w0
    2d3e:	80 80 e9    	dec2.w    w0, w1
    2d40:	f0 40 80    	mov.w     0x81e, w0
    2d42:	80 8f 50    	sub.w     w1, w0, [w15]
    2d44:	10 00 35    	bra       LT, 0x2d66 <.L33>

00002d46 <.L32>:
          if(angle-tempangle > 0){
    2d46:	f1 40 80    	mov.w     0x81e, w1
    2d48:	10 41 80    	mov.w     0x822, w0
    2d4a:	00 80 50    	sub.w     w1, w0, w0
    2d4c:	00 00 e0    	cp0.w     w0
    2d4e:	03 00 34    	bra       LE, 0x2d56 <.L34>
            D10 = 0;
    2d50:	da 02 a9    	bclr.b    0x2da, #0x0
            D9 = 0;
    2d52:	db 42 a9    	bclr.b    0x2db, #0x2
    2d54:	0b 00 37    	bra       0x2d6c <.L31>

00002d56 <.L34>:
          } else if(angle-tempangle < 0){
    2d56:	f1 40 80    	mov.w     0x81e, w1
    2d58:	10 41 80    	mov.w     0x822, w0
    2d5a:	00 80 50    	sub.w     w1, w0, w0
    2d5c:	00 00 e0    	cp0.w     w0
    2d5e:	05 00 3d    	bra       GE, 0x2d6a <.L42>
            D10 = 0;
    2d60:	da 02 a9    	bclr.b    0x2da, #0x0
            D9 = 1;
    2d62:	db 42 a8    	bset.b    0x2db, #0x2
    2d64:	03 00 37    	bra       0x2d6c <.L31>

00002d66 <.L33>:
          }
        } else {D10 = 1;}}
    2d66:	da 02 a8    	bset.b    0x2da, #0x0
    2d68:	01 00 37    	bra       0x2d6c <.L31>

00002d6a <.L42>:
    2d6a:	00 00 00    	nop       

00002d6c <.L31>:
        chan = 0;
    2d6c:	20 28 ef    	clr.w     0x820
        break;
    2d6e:	31 00 37    	bra       0x2dd2 <.L23>

00002d70 <.L26>:
    case DAMPER: // should keep a change
        D6 = 1;
    2d70:	db 02 a8    	bset.b    0x2db, #0x0
        break;
    2d72:	2f 00 37    	bra       0x2dd2 <.L23>

00002d74 <.L27>:
    case TEXTURE: // should keep a change
        D10 = 1;
    2d74:	da 02 a8    	bset.b    0x2da, #0x0
        // if(angle <= (angle%7)+2 || angle >= (angle%7)-2){
        //     D10 = 0;
        //     D9 = 0;
        // } else if(angle <= (angle%13)+2 || angle >= (angle%13)-2){
        //     D10 = 0;
        //     D9 = 1;
        //   }else {D10 = 1;}
        if(angle%29>=27 || angle%29<=2){
    2d76:	f1 40 80    	mov.w     0x81e, w1
    2d78:	d0 01 20    	mov.w     #0x1d, w0
    2d7a:	00 01 78    	mov.w     w0, w2
    2d7c:	11 00 09    	repeat    #0x11
    2d7e:	82 00 d8    	div.sw    w1, w2
    2d80:	80 00 fd    	exch      w0, w1
    2d82:	fa 0f 50    	sub.w     w0, #0x1a, [w15]
    2d84:	08 00 3c    	bra       GT, 0x2d96 <.L37>
    2d86:	f1 40 80    	mov.w     0x81e, w1
    2d88:	d0 01 20    	mov.w     #0x1d, w0
    2d8a:	00 01 78    	mov.w     w0, w2
    2d8c:	11 00 09    	repeat    #0x11
    2d8e:	82 00 d8    	div.sw    w1, w2
    2d90:	80 00 fd    	exch      w0, w1
    2d92:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2d94:	03 00 3c    	bra       GT, 0x2d9c <.L38>

00002d96 <.L37>:
          D9 = 1;
    2d96:	db 42 a8    	bset.b    0x2db, #0x2
          D10 = 0;
    2d98:	da 02 a9    	bclr.b    0x2da, #0x0
    2d9a:	17 00 37    	bra       0x2dca <.L39>

00002d9c <.L38>:
          // D10 = 1;
        } else if(angle%37>=35 || angle%37<=2){
    2d9c:	f1 40 80    	mov.w     0x81e, w1
    2d9e:	50 02 20    	mov.w     #0x25, w0
    2da0:	00 01 78    	mov.w     w0, w2
    2da2:	11 00 09    	repeat    #0x11
    2da4:	82 00 d8    	div.sw    w1, w2
    2da6:	80 00 fd    	exch      w0, w1
    2da8:	80 00 78    	mov.w     w0, w1
    2daa:	20 02 20    	mov.w     #0x22, w0
    2dac:	80 8f 50    	sub.w     w1, w0, [w15]
    2dae:	08 00 3c    	bra       GT, 0x2dc0 <.L40>
    2db0:	f1 40 80    	mov.w     0x81e, w1
    2db2:	50 02 20    	mov.w     #0x25, w0
    2db4:	00 01 78    	mov.w     w0, w2
    2db6:	11 00 09    	repeat    #0x11
    2db8:	82 00 d8    	div.sw    w1, w2
    2dba:	80 00 fd    	exch      w0, w1
    2dbc:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2dbe:	03 00 3c    	bra       GT, 0x2dc6 <.L41>

00002dc0 <.L40>:
          D9 = 0;
    2dc0:	db 42 a9    	bclr.b    0x2db, #0x2
          D10 = 0;
    2dc2:	da 02 a9    	bclr.b    0x2da, #0x0
    2dc4:	02 00 37    	bra       0x2dca <.L39>

00002dc6 <.L41>:
          // D10 = 1;
        } else{D10 = 1;}
    2dc6:	da 02 a8    	bset.b    0x2da, #0x0

        break;              // should addd the 4th button
    2dc8:	04 00 37    	bra       0x2dd2 <.L23>

00002dca <.L39>:
    2dca:	03 00 37    	bra       0x2dd2 <.L23>

00002dcc <.L28>:
    case WALL: // should keep a change
        D6 = 1;
    2dcc:	db 02 a8    	bset.b    0x2db, #0x0
        break;
    2dce:	01 00 37    	bra       0x2dd2 <.L23>

00002dd0 <.L24>:
    default:
        D6 = 1;
    2dd0:	db 02 a8    	bset.b    0x2db, #0x0

00002dd2 <.L23>:
  }
  // printf("\r\n");
}
    2dd2:	00 80 fa    	ulnk      
    2dd4:	00 00 06    	return    

00002dd6 <_main>:

int16_t main(void) {
    2dd6:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    init_elecanisms();
    2dd8:	7b 02 07    	rcall     0x32d0 <_init_elecanisms> <.L0> <.LFB0> <.Ltext0> <.LFE2>
    init_ajuart();
    2dda:	5c 00 07    	rcall     0x2e94 <_init_ajuart> <.L0> <.LFB0> <.LFE5> <.Letext0> <.Ltext0>

    // Configure pin D13 to produce a 1-kHz PWM signal with a 25% duty cycle
    // using the OC1 module.

    // Configure encoder pins and connect them to SPI2
    ENC_CSn_DIR = OUT; ENC_CSn = 1;
    2ddc:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    2dde:	ea a2 a8    	bset.b    0x2ea, #0x5
    ENC_SCK_DIR = OUT; ENC_SCK = 0;
    2de0:	e8 82 a9    	bclr.b    0x2e8, #0x4
    2de2:	ea 82 a9    	bclr.b    0x2ea, #0x4
    ENC_MOSI_DIR = OUT; ENC_MOSI = 0;
    2de4:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    2de6:	da a2 a9    	bclr.b    0x2da, #0x5
    ENC_MISO_DIR = IN;
    2de8:	d8 82 a8    	bset.b    0x2d8, #0x4

    RPOR = (uint8_t *)&RPOR0;
    2dea:	00 6c 20    	mov.w     #0x6c0, w0
    2dec:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    2dee:	00 68 20    	mov.w     #0x680, w0
    2df0:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2df2:	11 3a 80    	mov.w     0x742, w1
    2df4:	f0 0b 20    	mov.w     #0xbf, w0
    2df6:	00 81 60    	and.w     w1, w0, w2
    2df8:	60 04 20    	mov.w     #0x46, w0
    2dfa:	71 05 20    	mov.w     #0x57, w1
    2dfc:	23 74 20    	mov.w     #0x742, w3
    2dfe:	80 49 78    	mov.b     w0, [w3]
    2e00:	81 49 78    	mov.b     w1, [w3]
    2e02:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO2_RP] = ENC_MISO_RP;
    2e04:	1e 00 90    	mov.w     [w14+2], w0
    2e06:	c0 02 b0    	add.w     #0x2c, w0
    2e08:	91 c1 b3    	mov.b     #0x19, w1
    2e0a:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_MOSI_RP] = MOSI2_RP;
    2e0c:	9e 00 78    	mov.w     [w14], w1
    2e0e:	74 80 40    	add.w     w1, #0x14, w0
    2e10:	a1 c0 b3    	mov.b     #0xa, w1
    2e12:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_SCK_RP] = SCK2OUT_RP;
    2e14:	9e 00 78    	mov.w     [w14], w1
    2e16:	6a 80 40    	add.w     w1, #0xa, w0
    2e18:	b1 c0 b3    	mov.b     #0xb, w1
    2e1a:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2e1c:	10 3a 80    	mov.w     0x742, w0
    2e1e:	00 01 78    	mov.w     w0, w2
    2e20:	02 60 a0    	bset.w    w2, #0x6
    2e22:	60 04 20    	mov.w     #0x46, w0
    2e24:	71 05 20    	mov.w     #0x57, w1
    2e26:	23 74 20    	mov.w     #0x742, w3
    2e28:	80 49 78    	mov.b     w0, [w3]
    2e2a:	81 49 78    	mov.b     w1, [w3]
    2e2c:	82 49 78    	mov.b     w2, [w3]

    SPI2CON1 = 0x003B;              // SPI2 mode = 1, SCK freq = 8 MHz
    2e2e:	b0 03 20    	mov.w     #0x3b, w0
    2e30:	10 13 88    	mov.w     w0, 0x262
    SPI2CON2 = 0;
    2e32:	64 22 ef    	clr.w     0x264
    SPI2STAT = 0x8000;
    2e34:	00 00 28    	mov.w     #0x8000, w0
    2e36:	00 13 88    	mov.w     w0, 0x260

    // D13_DIR = OUT;      // configure D13 to be a digital output
    // D13 = 0;            // set D13 low

    D10_DIR = OUT;
    2e38:	d8 02 a9    	bclr.b    0x2d8, #0x0
    D9_DIR = OUT;
    2e3a:	d9 42 a9    	bclr.b    0x2d9, #0x2
    D9 = 0;
    2e3c:	db 42 a9    	bclr.b    0x2db, #0x2
    D10 = 1;
    2e3e:	da 02 a8    	bset.b    0x2da, #0x0
    D5_DIR = OUT;
    2e40:	e8 62 a9    	bclr.b    0x2e8, #0x3
    D8 = 0;
    2e42:	db 22 a9    	bclr.b    0x2db, #0x1

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2e44:	11 3a 80    	mov.w     0x742, w1
    2e46:	f0 0b 20    	mov.w     #0xbf, w0
    2e48:	00 81 60    	and.w     w1, w0, w2
    2e4a:	60 04 20    	mov.w     #0x46, w0
    2e4c:	71 05 20    	mov.w     #0x57, w1
    2e4e:	23 74 20    	mov.w     #0x742, w3
    2e50:	80 49 78    	mov.b     w0, [w3]
    2e52:	81 49 78    	mov.b     w1, [w3]
    2e54:	82 49 78    	mov.b     w2, [w3]
    RPOR[D8_RP] = OC1_RP;  // connect the OC1 module output to pin D13
    2e56:	9e 00 78    	mov.w     [w14], w1
    2e58:	64 80 40    	add.w     w1, #0x4, w0
    2e5a:	21 c1 b3    	mov.b     #0x12, w1
    2e5c:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2e5e:	10 3a 80    	mov.w     0x742, w0
    2e60:	00 01 78    	mov.w     w0, w2
    2e62:	02 60 a0    	bset.w    w2, #0x6
    2e64:	60 04 20    	mov.w     #0x46, w0
    2e66:	71 05 20    	mov.w     #0x57, w1
    2e68:	23 74 20    	mov.w     #0x742, w3
    2e6a:	80 49 78    	mov.b     w0, [w3]
    2e6c:	81 49 78    	mov.b     w1, [w3]
    2e6e:	82 49 78    	mov.b     w2, [w3]

    OC1CON1 = 0x1C06;   // configure OC1 module to use the peripheral
    2e70:	60 c0 21    	mov.w     #0x1c06, w0
    2e72:	80 0c 88    	mov.w     w0, 0x190
                        //   clock (i.e., FCY, OCTSEL<2:0> = 0b111) and
                        //   and to operate in edge-aligned PWM mode
                        //   (OCM<2:0> = 0b110)
    OC1CON2 = 0x001F;   // configure OC1 module to syncrhonize to itself
    2e74:	f0 01 20    	mov.w     #0x1f, w0
    2e76:	90 0c 88    	mov.w     w0, 0x192
                        //   (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)

    OC1RS = (uint16_t)(FCY / 1e3 - 1.);     // configure period register to
    2e78:	f0 e7 23    	mov.w     #0x3e7f, w0
    2e7a:	a0 0c 88    	mov.w     w0, 0x194
                                            //   get a frequency of 1kHz
    OC1R = OC1RS >> 4; //OC1R = OC1RS >> 2;  // configure duty cycle to 25% (i.e., period / 4)
    2e7c:	a0 0c 80    	mov.w     0x194, w0
    2e7e:	44 00 de    	lsr.w     w0, #0x4, w0
    2e80:	b0 0c 88    	mov.w     w0, 0x196
    OC1TMR = 0;         // set OC1 timer count to 0
    2e82:	98 21 ef    	clr.w     0x198

    USB_setup_vendor_callback = vendor_requests;
    2e84:	20 b2 22    	mov.w     #0x2b22, w0
    2e86:	c0 40 88    	mov.w     w0, 0x818
    init_usb();
    2e88:	6d f9 07    	rcall     0x2164 <_init_usb> <.LFB3> <.LFE2>
    // while(1){
    //   modeControl();
    //   usb_service();
    // }
    while (USB_USWSTAT != CONFIG_STATE) {
    2e8a:	00 00 00    	nop       

00002e8c <.L44>:
    2e8c:	10 c8 bf    	mov.b     0x810, WREG
    2e8e:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    2e90:	fd ff 3a    	bra       NZ, 0x2e8c <.L44>

00002e92 <.L45>:
#ifndef USB_INTERRUPT
        usb_service();
        modeControl();
#endif
    }
    while (1) {
#ifndef USB_INTERRUPT
        usb_service();
        modeControl();
#endif
    }
    2e92:	ff ff 37    	bra       .

00002e94 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    2e94:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    2e96:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    2e98:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    2e9a:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    2e9c:	00 6c 20    	mov.w     #0x6c0, w0
    2e9e:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    2ea0:	00 68 20    	mov.w     #0x680, w0
    2ea2:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    2ea4:	11 3a 80    	mov.w     0x742, w1
    2ea6:	f0 0b 20    	mov.w     #0xbf, w0
    2ea8:	00 81 60    	and.w     w1, w0, w2
    2eaa:	60 04 20    	mov.w     #0x46, w0
    2eac:	71 05 20    	mov.w     #0x57, w1
    2eae:	23 74 20    	mov.w     #0x742, w3
    2eb0:	80 49 78    	mov.b     w0, [w3]
    2eb2:	81 49 78    	mov.b     w1, [w3]
    2eb4:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    2eb6:	1e 00 90    	mov.w     [w14+2], w0
    2eb8:	40 02 b0    	add.w     #0x24, w0
    2eba:	a1 c1 b3    	mov.b     #0x1a, w1
    2ebc:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    2ebe:	9e 00 78    	mov.w     [w14], w1
    2ec0:	75 80 40    	add.w     w1, #0x15, w0
    2ec2:	31 c0 b3    	mov.b     #0x3, w1
    2ec4:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    2ec6:	10 3a 80    	mov.w     0x742, w0
    2ec8:	00 01 78    	mov.w     w0, w2
    2eca:	02 60 a0    	bset.w    w2, #0x6
    2ecc:	60 04 20    	mov.w     #0x46, w0
    2ece:	71 05 20    	mov.w     #0x57, w1
    2ed0:	23 74 20    	mov.w     #0x742, w3
    2ed2:	80 49 78    	mov.b     w0, [w3]
    2ed4:	81 49 78    	mov.b     w1, [w3]
    2ed6:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    2ed8:	80 00 20    	mov.w     #0x8, w0
    2eda:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    2edc:	20 02 20    	mov.w     #0x22, w0
    2ede:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    2ee0:	c0 83 20    	mov.w     #0x83c, w0
    2ee2:	40 41 88    	mov.w     w0, 0x828
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    2ee4:	00 40 20    	mov.w     #0x400, w0
    2ee6:	50 41 88    	mov.w     w0, 0x82a
    U1_tx_buffer.head = 0;
    2ee8:	00 00 eb    	clr.w     w0
    2eea:	60 41 88    	mov.w     w0, 0x82c
    U1_tx_buffer.tail = 0;
    2eec:	00 00 eb    	clr.w     w0
    2eee:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_buffer.count = 0;
    2ef0:	00 00 eb    	clr.w     w0
    2ef2:	80 41 88    	mov.w     w0, 0x830
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    2ef4:	00 30 20    	mov.w     #0x300, w0
    2ef6:	30 41 88    	mov.w     w0, 0x826

    U1_rx_buffer.data = U1RXbuffer;
    2ef8:	c0 c3 20    	mov.w     #0xc3c, w0
    2efa:	90 41 88    	mov.w     w0, 0x832
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    2efc:	00 40 20    	mov.w     #0x400, w0
    2efe:	a0 41 88    	mov.w     w0, 0x834
    U1_rx_buffer.head = 0;
    2f00:	00 00 eb    	clr.w     w0
    2f02:	b0 41 88    	mov.w     w0, 0x836
    U1_rx_buffer.tail = 0;
    2f04:	00 00 eb    	clr.w     w0
    2f06:	c0 41 88    	mov.w     w0, 0x838
    U1_rx_buffer.count = 0;
    2f08:	00 00 eb    	clr.w     w0
    2f0a:	d0 41 88    	mov.w     w0, 0x83a

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    2f0c:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    2f0e:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    2f10:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    2f12:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    2f14:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    2f16:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    2f18:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    2f1a:	23 42 a8    	bset.b    0x223, #0x2
}
    2f1c:	00 80 fa    	ulnk      
    2f1e:	00 00 06    	return    

00002f20 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    2f20:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    2f22:	d0 41 80    	mov.w     0x83a, w0
}
    2f24:	00 80 fa    	ulnk      
    2f26:	00 00 06    	return    

00002f28 <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    2f28:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    2f2a:	11 11 80    	mov.w     0x222, w1
    2f2c:	00 40 20    	mov.w     #0x400, w0
    2f2e:	00 80 60    	and.w     w1, w0, w0
    2f30:	00 00 e0    	cp0.w     w0
    2f32:	01 00 3a    	bra       NZ, 0x2f36 <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    2f34:	23 42 a8    	bset.b    0x223, #0x2

00002f36 <.L15>:
}
    2f36:	00 80 fa    	ulnk      
    2f38:	00 00 06    	return    

00002f3a <_U1_putc>:

void U1_putc(uint8_t ch) {
    2f3a:	02 00 fa    	lnk       #0x2
    2f3c:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    2f3e:	00 00 00    	nop       

00002f40 <.L18>:
    2f40:	81 41 80    	mov.w     0x830, w1
    2f42:	50 41 80    	mov.w     0x82a, w0
    2f44:	80 8f 50    	sub.w     w1, w0, [w15]
    2f46:	fc ff 32    	bra       Z, 0x2f40 <.L18>

    disable_interrupts();
    2f48:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    2f4a:	41 41 80    	mov.w     0x828, w1
    2f4c:	70 41 80    	mov.w     0x82e, w0
    2f4e:	00 80 40    	add.w     w1, w0, w0
    2f50:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    2f52:	70 41 80    	mov.w     0x82e, w0
    2f54:	00 00 e8    	inc.w     w0, w0
    2f56:	70 41 88    	mov.w     w0, 0x82e
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    2f58:	71 41 80    	mov.w     0x82e, w1
    2f5a:	50 41 80    	mov.w     0x82a, w0
    2f5c:	80 8f 50    	sub.w     w1, w0, [w15]
    2f5e:	02 00 3a    	bra       NZ, 0x2f64 <.L19>
        U1_tx_buffer.tail = 0;
    2f60:	00 00 eb    	clr.w     w0
    2f62:	70 41 88    	mov.w     w0, 0x82e

00002f64 <.L19>:
    U1_tx_buffer.count++;
    2f64:	80 41 80    	mov.w     0x830, w0
    2f66:	00 00 e8    	inc.w     w0, w0
    2f68:	80 41 88    	mov.w     w0, 0x830
    enable_interrupts();
    2f6a:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    2f6c:	81 41 80    	mov.w     0x830, w1
    2f6e:	30 41 80    	mov.w     0x826, w0
    2f70:	80 8f 50    	sub.w     w1, w0, [w15]
    2f72:	01 00 39    	bra       NC, 0x2f76 <.L17>
        U1STAbits.UTXEN = 1;
    2f74:	23 42 a8    	bset.b    0x223, #0x2

00002f76 <.L17>:
}
    2f76:	00 80 fa    	ulnk      
    2f78:	00 00 06    	return    

00002f7a <_U1_getc>:

uint8_t U1_getc(void) {
    2f7a:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    2f7c:	00 00 00    	nop       

00002f7e <.L22>:
    2f7e:	d0 41 80    	mov.w     0x83a, w0
    2f80:	00 00 e0    	cp0.w     w0
    2f82:	fd ff 32    	bra       Z, 0x2f7e <.L22>

    disable_interrupts();
    2f84:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    2f86:	91 41 80    	mov.w     0x832, w1
    2f88:	b0 41 80    	mov.w     0x836, w0
    2f8a:	00 80 40    	add.w     w1, w0, w0
    2f8c:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    2f8e:	b0 41 80    	mov.w     0x836, w0
    2f90:	00 00 e8    	inc.w     w0, w0
    2f92:	b0 41 88    	mov.w     w0, 0x836
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    2f94:	b1 41 80    	mov.w     0x836, w1
    2f96:	a0 41 80    	mov.w     0x834, w0
    2f98:	80 8f 50    	sub.w     w1, w0, [w15]
    2f9a:	02 00 3a    	bra       NZ, 0x2fa0 <.L23>
        U1_rx_buffer.head = 0;
    2f9c:	00 00 eb    	clr.w     w0
    2f9e:	b0 41 88    	mov.w     w0, 0x836

00002fa0 <.L23>:
    U1_rx_buffer.count--;
    2fa0:	d0 41 80    	mov.w     0x83a, w0
    2fa2:	00 00 e9    	dec.w     w0, w0
    2fa4:	d0 41 88    	mov.w     w0, 0x83a
    enable_interrupts();
    2fa6:	52 20 ef    	clr.w     0x52

    return ch;
    2fa8:	1e 40 78    	mov.b     [w14], w0
}
    2faa:	00 80 fa    	ulnk      
    2fac:	00 00 06    	return    

00002fae <_U1_puts>:

void U1_puts(uint8_t *str) {
    2fae:	02 00 fa    	lnk       #0x2
    2fb0:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    2fb2:	04 00 37    	bra       0x2fbc <.L25>

00002fb4 <.L26>:
        U1_putc(*str++);
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	10 40 78    	mov.b     [w0], w0
    2fb8:	1e 0f e8    	inc.w     [w14], [w14]
    2fba:	bf ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>

00002fbc <.L25>:
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	10 40 78    	mov.b     [w0], w0
    2fc0:	00 04 e0    	cp0.b     w0
    2fc2:	f8 ff 3a    	bra       NZ, 0x2fb4 <.L26>
    U1_flush_tx_buffer();
    2fc4:	b1 ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    2fc6:	00 80 fa    	ulnk      
    2fc8:	00 00 06    	return    

00002fca <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    2fca:	04 00 fa    	lnk       #0x4
    2fcc:	00 0f 78    	mov.w     w0, [w14]
    2fce:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    2fd0:	1e 00 90    	mov.w     [w14+2], w0
    2fd2:	00 00 e0    	cp0.w     w0
    2fd4:	1a 00 32    	bra       Z, 0x300a <.L32>
        return;

    if (len == 1) {
    2fd6:	1e 00 90    	mov.w     [w14+2], w0
    2fd8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fda:	04 00 3a    	bra       NZ, 0x2fe4 <.L30>
        *str = '\0';
    2fdc:	1e 00 78    	mov.w     [w14], w0
    2fde:	80 40 eb    	clr.b     w1
    2fe0:	01 48 78    	mov.b     w1, [w0]
        return;
    2fe2:	14 00 37    	bra       0x300c <.L27>

00002fe4 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    2fe4:	ca ff 07    	rcall     0x2f7a <_U1_getc> <.LFB6> <.LFE5>
    2fe6:	9e 00 78    	mov.w     [w14], w1
    2fe8:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    2fea:	1e 00 78    	mov.w     [w14], w0
    2fec:	10 40 78    	mov.b     [w0], w0
    2fee:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2ff0:	08 00 32    	bra       Z, 0x3002 <.L31>
    2ff2:	1e 00 90    	mov.w     [w14+2], w0
    2ff4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2ff6:	05 00 32    	bra       Z, 0x3002 <.L31>
            break;
        str++;
    2ff8:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    2ffa:	1e 00 90    	mov.w     [w14+2], w0
    2ffc:	00 00 e9    	dec.w     w0, w0
    2ffe:	10 07 98    	mov.w     w0, [w14+2]
    }
    3000:	f1 ff 37    	bra       0x2fe4 <.L30>

00003002 <.L31>:
    *str = '\0';
    3002:	1e 00 78    	mov.w     [w14], w0
    3004:	80 40 eb    	clr.b     w1
    3006:	01 48 78    	mov.b     w1, [w0]
    3008:	01 00 37    	bra       0x300c <.L27>

0000300a <.L32>:
    300a:	00 00 00    	nop       

0000300c <.L27>:
}
    300c:	00 80 fa    	ulnk      
    300e:	00 00 06    	return    

00003010 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    3010:	08 00 fa    	lnk       #0x8
    3012:	20 07 98    	mov.w     w0, [w14+4]
    3014:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    3016:	3e 00 90    	mov.w     [w14+6], w0
    3018:	00 00 e0    	cp0.w     w0
    301a:	6f 00 32    	bra       Z, 0x30fa <.L46>
        return;

    if (len == 1) {
    301c:	3e 00 90    	mov.w     [w14+6], w0
    301e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3020:	04 00 3a    	bra       NZ, 0x302a <.L36>
        *str = '\0';
    3022:	2e 00 90    	mov.w     [w14+4], w0
    3024:	80 40 eb    	clr.b     w1
    3026:	01 48 78    	mov.b     w1, [w0]
        return;
    3028:	69 00 37    	bra       0x30fc <.L33>

0000302a <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    302a:	b0 c1 b3    	mov.b     #0x1b, w0
    302c:	86 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    302e:	70 c3 b3    	mov.b     #0x37, w0
    3030:	84 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3032:	7a ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    3034:	ae 00 90    	mov.w     [w14+4], w1
    3036:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    3038:	be 00 90    	mov.w     [w14+6], w1
    303a:	01 0f 78    	mov.w     w1, [w14]
    303c:	03 00 37    	bra       0x3044 <.L45>

0000303e <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    303e:	00 00 00    	nop       
    3040:	01 00 37    	bra       0x3044 <.L45>

00003042 <.L48>:
    3042:	00 00 00    	nop       

00003044 <.L45>:
    3044:	9a ff 07    	rcall     0x2f7a <_U1_getc> <.LFB6> <.LFE5>
    3046:	ae 00 90    	mov.w     [w14+4], w1
    3048:	80 48 78    	mov.b     w0, [w1]
    304a:	2e 00 90    	mov.w     [w14+4], w0
    304c:	10 40 78    	mov.b     [w0], w0
    304e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3050:	09 00 3a    	bra       NZ, 0x3064 <.L37>
    *str = '\0';                            // terminarte the string with null
    3052:	2e 00 90    	mov.w     [w14+4], w0
    3054:	80 40 eb    	clr.b     w1
    3056:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    3058:	a0 c0 b3    	mov.b     #0xa, w0
    305a:	6f ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    305c:	d0 c0 b3    	mov.b     #0xd, w0
    305e:	6d ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    3060:	63 ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3062:	4c 00 37    	bra       0x30fc <.L33>

00003064 <.L37>:
    3064:	2e 00 90    	mov.w     [w14+4], w0
    3066:	10 40 78    	mov.b     [w0], w0
    3068:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    306a:	10 00 3a    	bra       NZ, 0x308c <.L38>
    306c:	b0 c1 b3    	mov.b     #0x1b, w0
    306e:	65 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    3070:	80 c3 b3    	mov.b     #0x38, w0
    3072:	63 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    3074:	b0 c1 b3    	mov.b     #0x1b, w0
    3076:	61 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    3078:	b0 c5 b3    	mov.b     #0x5b, w0
    307a:	5f ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    307c:	b0 c4 b3    	mov.b     #0x4b, w0
    307e:	5d ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    3080:	53 ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    3082:	9e 00 90    	mov.w     [w14+2], w1
    3084:	21 07 98    	mov.w     w1, [w14+4]
    3086:	be 00 90    	mov.w     [w14+6], w1
    3088:	01 0f 78    	mov.w     w1, [w14]
    308a:	36 00 37    	bra       0x30f8 <.L39>

0000308c <.L38>:
    308c:	2e 00 90    	mov.w     [w14+4], w0
    308e:	10 40 78    	mov.b     [w0], w0
    3090:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3092:	05 00 32    	bra       Z, 0x309e <.L40>
    3094:	2e 00 90    	mov.w     [w14+4], w0
    3096:	90 40 78    	mov.b     [w0], w1
    3098:	f0 c7 b3    	mov.b     #0x7f, w0
    309a:	80 cf 50    	sub.b     w1, w0, [w15]
    309c:	14 00 3a    	bra       NZ, 0x30c6 <.L41>

0000309e <.L40>:
    309e:	ae 00 90    	mov.w     [w14+4], w1
    30a0:	1e 00 90    	mov.w     [w14+2], w0
    30a2:	80 8f 50    	sub.w     w1, w0, [w15]
    30a4:	0c 00 36    	bra       LEU, 0x30be <.L42>
    30a6:	80 c0 b3    	mov.b     #0x8, w0
    30a8:	48 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30aa:	00 c2 b3    	mov.b     #0x20, w0
    30ac:	46 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30ae:	80 c0 b3    	mov.b     #0x8, w0
    30b0:	44 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30b2:	3a ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30b4:	2e 00 90    	mov.w     [w14+4], w0
    30b6:	00 00 e9    	dec.w     w0, w0
    30b8:	20 07 98    	mov.w     w0, [w14+4]
    30ba:	1e 0f e8    	inc.w     [w14], [w14]
    30bc:	03 00 37    	bra       0x30c4 <.L43>

000030be <.L42>:
    30be:	70 c0 b3    	mov.b     #0x7, w0
    30c0:	3c ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30c2:	32 ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

000030c4 <.L43>:
    30c4:	19 00 37    	bra       0x30f8 <.L39>

000030c6 <.L41>:
    30c6:	1e 00 78    	mov.w     [w14], w0
    30c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    30ca:	04 00 3a    	bra       NZ, 0x30d4 <.L44>
    30cc:	70 c0 b3    	mov.b     #0x7, w0
    30ce:	35 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30d0:	2b ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30d2:	12 00 37    	bra       0x30f8 <.L39>

000030d4 <.L44>:
    30d4:	2e 00 90    	mov.w     [w14+4], w0
    30d6:	10 40 78    	mov.b     [w0], w0
    30d8:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    30da:	b1 ff 36    	bra       LEU, 0x303e <.L47>
    30dc:	2e 00 90    	mov.w     [w14+4], w0
    30de:	90 40 78    	mov.b     [w0], w1
    30e0:	e0 c7 b3    	mov.b     #0x7e, w0
    30e2:	80 cf 50    	sub.b     w1, w0, [w15]
    30e4:	ae ff 3e    	bra       GTU, 0x3042 <.L48>
    30e6:	2e 00 90    	mov.w     [w14+4], w0
    30e8:	10 40 78    	mov.b     [w0], w0
    30ea:	27 ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    30ec:	1d ff 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    30ee:	2e 00 90    	mov.w     [w14+4], w0
    30f0:	00 00 e8    	inc.w     w0, w0
    30f2:	20 07 98    	mov.w     w0, [w14+4]
    30f4:	1e 0f e9    	dec.w     [w14], [w14]
    30f6:	a6 ff 37    	bra       0x3044 <.L45>

000030f8 <.L39>:
    30f8:	a5 ff 37    	bra       0x3044 <.L45>

000030fa <.L46>:
    30fa:	00 00 00    	nop       

000030fc <.L33>:
}
    30fc:	00 80 fa    	ulnk      
    30fe:	00 00 06    	return    

00003100 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    3100:	08 00 fa    	lnk       #0x8
    3102:	10 07 98    	mov.w     w0, [w14+2]
    3104:	21 07 98    	mov.w     w1, [w14+4]
    3106:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    3108:	1e 00 90    	mov.w     [w14+2], w0
    310a:	60 00 40    	add.w     w0, #0x0, w0
    310c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    310e:	10 00 3e    	bra       GTU, 0x3130 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    3110:	00 00 eb    	clr.w     w0
    3112:	00 0f 78    	mov.w     w0, [w14]
    3114:	07 00 37    	bra       0x3124 <.L52>

00003116 <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    3116:	2e 00 90    	mov.w     [w14+4], w0
    3118:	10 40 78    	mov.b     [w0], w0
    311a:	ae 00 90    	mov.w     [w14+4], w1
    311c:	81 00 e8    	inc.w     w1, w1
    311e:	21 07 98    	mov.w     w1, [w14+4]
    3120:	0c ff 07    	rcall     0x2f3a <_U1_putc> <.LFB5> <.LFE4>
    3122:	1e 0f e8    	inc.w     [w14], [w14]

00003124 <.L52>:
    3124:	9e 00 78    	mov.w     [w14], w1
    3126:	3e 00 90    	mov.w     [w14+6], w0
    3128:	80 8f 50    	sub.w     w1, w0, [w15]
    312a:	f5 ff 39    	bra       NC, 0x3116 <.L53>
            U1_flush_tx_buffer();
    312c:	fd fe 07    	rcall     0x2f28 <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    312e:	01 00 37    	bra       0x3132 <.L54>

00003130 <.L55>:
        default:
            break;
    3130:	00 00 00    	nop       

00003132 <.L54>:
    }
    return len;
    3132:	3e 00 90    	mov.w     [w14+6], w0
}
    3134:	00 80 fa    	ulnk      
    3136:	00 00 06    	return    
Disassembly of section .dinit:

00003138 <.dinit>:
    3138:	24 08 00    	nop       
    313a:	02 00 00    	nop       
    313c:	82 00 00    	nop       
    313e:	02 00 00    	nop       
    3140:	1a 08 00    	nop       
    3142:	0a 00 00    	nop       
    3144:	80 00 00    	nop       
    3146:	c4 10 00    	nop       
    3148:	ce 00 00    	nop       
    314a:	80 00 00    	nop       
    314c:	00 12 00    	nop       
    314e:	80 00 00    	nop       
    3150:	80 00 00    	nop       
    3152:	00 08 00    	nop       
    3154:	1a 00 00    	nop       
    3156:	80 00 00    	nop       
    3158:	28 08 00    	nop       
    315a:	14 08 00    	nop       
    315c:	80 00 00    	nop       
    315e:	26 08 00    	nop       
    3160:	02 00 00    	nop       
    3162:	80 00 00    	nop       
    3164:	3c 10 00    	nop       
    3166:	88 00 00    	nop       
    3168:	82 00 00    	nop       
    316a:	01 00 00    	nop       
    316c:	00 62 10    	subr.b    w0, w0, [--w4]
    316e:	63 10 62    	and.w     w4, #0x3, [w0--]
    3170:	10 62 10    	subr.b    w0, [w0], [--w4]
    3172:	62 10 62    	and.w     w4, #0x2, [w0--]
    3174:	10 52 10    	subr.b    w0, [w0], [w4--]
	...
    3184:	00 02 08    	do        #0x200, 0x338a
    3186:	01 01 8a 
    3188:	10 8b 10    	subr.w    w1, [w0], [w6]
    318a:	8a 10 8a    	mov.w     w10, 0x4210
    318c:	10 8a 10    	subr.w    w1, [w0], [w4]
    318e:	8a 10 7a    	mov.w     w10, [w1--]
    3190:	10 00 00    	nop       
	...
    319e:	00 00 02    	call      0x2080000 <.LFE0+0x207cc8a>
    31a0:	08 02 02 
    31a2:	b2 10 b3    	ior.w     #0x10b, w2
    31a4:	10 b2 10    	.pword 0x10b210
    31a6:	b2 10 b2    	and.w     #0x10b, w2
    31a8:	10 b2 10    	.pword 0x10b210
    31aa:	a2 10 00    	nop       
	...
    31ba:	3c 10 64    	and.w     w8, [w12++], [w0--]
    31bc:	10 8c 10    	subr.w    w1, [w0], [w8]
	...
    31c6:	d2 11 00    	nop       
    31c8:	02 00 00    	nop       
    31ca:	80 00 00    	nop       
    31cc:	b4 11 00    	nop       
    31ce:	1a 00 00    	nop       
    31d0:	82 00 00    	nop       
    31d2:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    31d4:	74 7a 4c    	.pword 0x4c7a74
    31d6:	00 00 01    	call      w0
    31d8:	00 02 00    	nop       
    31da:	04 00 08    	do        #0x4, 0x51de
    31dc:	00 10 00 
    31de:	00 00 20    	mov.w     #0x0, w0
    31e0:	2b 2d 23    	mov.w     #0x32d2, w11
    31e2:	30 00 00    	nop       
    31e4:	d4 11 00    	nop       
    31e6:	02 00 00    	nop       
    31e8:	82 00 00    	nop       
    31ea:	04 00 00    	nop       
    31ec:	ce 11 00    	nop       
    31ee:	04 00 00    	nop       
    31f0:	80 00 00    	nop       
    31f2:	92 11 00    	nop       
    31f4:	22 00 00    	nop       
    31f6:	82 00 00    	nop       
    31f8:	30 31 32    	bra       Z, 0x945a
    31fa:	33 34 35    	bra       LT, 0x9a62
    31fc:	36 37 38    	bra       NOV, 0xa06a
    31fe:	39 41 42    	add.b     w4, [w9++], w2
    3200:	43 44 45    	add.b     w10, [--w3], w8
    3202:	46 00 30    	bra       OV, 0x3290
    3204:	31 32 33    	bra       N, 0x9668
    3206:	34 35 36    	bra       LEU, 0x9c70
    3208:	37 38 39    	bra       NC, 0xa278
    320a:	61 62 63    	and.b     w6, #0x1, [--w4]
    320c:	64 65 66    	and.b     w12, #0x4, [--w10]
    320e:	00 00 00    	nop       
    3210:	d6 11 00    	nop       
    3212:	02 00 00    	nop       
    3214:	80 00 00    	nop       
    3216:	00 00 00    	nop       
Disassembly of section .isr.text:

00003218 <__U1TXInterrupt>:
    U1MODEbits.UARTEN = 1;          // enable UART1 module
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    3218:	80 9f be    	mov.d     w0, [w15++]
    321a:	32 00 f8    	push      0x32
    321c:	34 00 f8    	push      0x34
    321e:	10 00 20    	mov.w     #0x1, w0
    3220:	a0 01 88    	mov.w     w0, 0x34
    3222:	00 20 20    	mov.w     #0x200, w0
    3224:	90 01 88    	mov.w     w0, 0x32
    3226:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    3228:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
    322a:	80 41 80    	mov.w     0x830, w0
    322c:	00 00 e0    	cp0.w     w0
    322e:	17 00 3a    	bra       NZ, 0x325e <.L8>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    3230:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
    3232:	16 00 37    	bra       0x3260 <.L4>

00003234 <.L7>:
        disable_interrupts();
    3234:	ff 3f fc    	disi      #0x3fff
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
    3236:	41 41 80    	mov.w     0x828, w1
    3238:	60 41 80    	mov.w     0x82c, w0
    323a:	00 80 40    	add.w     w1, w0, w0
    323c:	10 4f 78    	mov.b     [w0], [w14]
        U1_tx_buffer.head++;
    323e:	60 41 80    	mov.w     0x82c, w0
    3240:	00 00 e8    	inc.w     w0, w0
    3242:	60 41 88    	mov.w     w0, 0x82c
        if (U1_tx_buffer.head == U1_tx_buffer.length)
    3244:	61 41 80    	mov.w     0x82c, w1
    3246:	50 41 80    	mov.w     0x82a, w0
    3248:	80 8f 50    	sub.w     w1, w0, [w15]
    324a:	02 00 3a    	bra       NZ, 0x3250 <.L5>
            U1_tx_buffer.head = 0;
    324c:	00 00 eb    	clr.w     w0
    324e:	60 41 88    	mov.w     w0, 0x82c

00003250 <.L5>:
        U1_tx_buffer.count--;
    3250:	80 41 80    	mov.w     0x830, w0
    3252:	00 00 e9    	dec.w     w0, w0
    3254:	80 41 88    	mov.w     w0, 0x830
        enable_interrupts();
    3256:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    3258:	1e 80 fb    	ze        [w14], w0
    325a:	20 11 88    	mov.w     w0, 0x224
    325c:	01 00 37    	bra       0x3260 <.L4>

0000325e <.L8>:
    325e:	00 00 00    	nop       

00003260 <.L4>:
    3260:	11 11 80    	mov.w     0x222, w1
    3262:	00 20 20    	mov.w     #0x200, w0
    3264:	00 80 60    	and.w     w1, w0, w0
    3266:	00 00 e0    	cp0.w     w0
    3268:	03 00 3a    	bra       NZ, 0x3270 <.L2>
    326a:	80 41 80    	mov.w     0x830, w0
    326c:	00 00 e0    	cp0.w     w0
    326e:	e2 ff 3a    	bra       NZ, 0x3234 <.L7>

00003270 <.L2>:
    }
}
    3270:	00 80 fa    	ulnk      
    3272:	34 00 f9    	pop       0x34
    3274:	32 00 f9    	pop       0x32
    3276:	4f 00 be    	mov.d     [--w15], w0
    3278:	00 40 06    	retfie    

0000327a <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    327a:	80 9f be    	mov.d     w0, [w15++]
    327c:	32 00 f8    	push      0x32
    327e:	34 00 f8    	push      0x34
    3280:	10 00 20    	mov.w     #0x1, w0
    3282:	a0 01 88    	mov.w     w0, 0x34
    3284:	00 20 20    	mov.w     #0x200, w0
    3286:	90 01 88    	mov.w     w0, 0x32
    3288:	00 00 fa    	lnk       #0x0
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    328a:	85 60 a9    	bclr.b    0x85, #0x3

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
    328c:	14 00 37    	bra       0x32b6 <.L10>

0000328e <.L13>:
        disable_interrupts();
    328e:	ff 3f fc    	disi      #0x3fff
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
    3290:	91 41 80    	mov.w     0x832, w1
    3292:	c0 41 80    	mov.w     0x838, w0
    3294:	00 80 40    	add.w     w1, w0, w0
    3296:	31 11 80    	mov.w     0x226, w1
    3298:	81 40 78    	mov.b     w1, w1
    329a:	01 48 78    	mov.b     w1, [w0]
        U1_rx_buffer.tail++;
    329c:	c0 41 80    	mov.w     0x838, w0
    329e:	00 00 e8    	inc.w     w0, w0
    32a0:	c0 41 88    	mov.w     w0, 0x838
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
    32a2:	c1 41 80    	mov.w     0x838, w1
    32a4:	a0 41 80    	mov.w     0x834, w0
    32a6:	80 8f 50    	sub.w     w1, w0, [w15]
    32a8:	02 00 3a    	bra       NZ, 0x32ae <.L11>
            U1_rx_buffer.tail = 0;
    32aa:	00 00 eb    	clr.w     w0
    32ac:	c0 41 88    	mov.w     w0, 0x838

000032ae <.L11>:
        U1_rx_buffer.count++;
    32ae:	d0 41 80    	mov.w     0x83a, w0
    32b0:	00 00 e8    	inc.w     w0, w0
    32b2:	d0 41 88    	mov.w     w0, 0x83a
        enable_interrupts();
    32b4:	52 20 ef    	clr.w     0x52

000032b6 <.L10>:
    32b6:	10 11 80    	mov.w     0x222, w0
    32b8:	61 00 60    	and.w     w0, #0x1, w0
    32ba:	00 00 e0    	cp0.w     w0
    32bc:	04 00 32    	bra       Z, 0x32c6 <.L9>
    32be:	d1 41 80    	mov.w     0x83a, w1
    32c0:	a0 41 80    	mov.w     0x834, w0
    32c2:	80 8f 50    	sub.w     w1, w0, [w15]
    32c4:	e4 ff 3a    	bra       NZ, 0x328e <.L13>

000032c6 <.L9>:
    }
}
    32c6:	00 80 fa    	ulnk      
    32c8:	34 00 f9    	pop       0x34
    32ca:	32 00 f9    	pop       0x32
    32cc:	4f 00 be    	mov.d     [--w15], w0
    32ce:	00 40 06    	retfie    
Disassembly of section .text:

000032d0 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    32d0:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    32d2:	00 10 20    	mov.w     #0x100, w0
    32d4:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    32d6:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    32d8:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    32da:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    32dc:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    32de:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    32e0:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    32e2:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    32e4:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    32e6:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    32e8:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    32ea:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    32ec:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    32ee:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    32f0:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    32f2:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    32f4:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    32f6:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    32f8:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    32fa:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    32fc:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    32fe:	f0 03 20    	mov.w     #0x3f, w0
    3300:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    3302:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    3304:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    3306:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    3308:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    330a:	00 0e 20    	mov.w     #0xe0, w0
    330c:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    330e:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    3310:	00 c4 20    	mov.w     #0xc40, w0
    3312:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    3314:	50 00 20    	mov.w     #0x5, w0
    3316:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    3318:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    331a:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    331c:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    331e:	e8 02 a9    	bclr.b    0x2e8, #0x0
    3320:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    3322:	e8 22 a9    	bclr.b    0x2e8, #0x1
    3324:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    3326:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    3328:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    332a:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    332c:	00 80 fa    	ulnk      
    332e:	00 00 06    	return    

00003330 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    3330:	02 00 fa    	lnk       #0x2
    3332:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    3334:	9e 00 78    	mov.w     [w14], w1
    3336:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    3338:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    333a:	00 00 00    	nop       

0000333c <.L3>:
    333c:	00 19 80    	mov.w     0x320, w0
    333e:	61 00 60    	and.w     w0, #0x1, w0
    3340:	00 00 e0    	cp0.w     w0
    3342:	fc ff 32    	bra       Z, 0x333c <.L3>
    return ADC1BUF0;
    3344:	00 18 80    	mov.w     0x300, w0
}
    3346:	00 80 fa    	ulnk      
    3348:	00 00 06    	return    
Disassembly of section .isr.text:

0000334a <__USB1Interrupt>:
    334a:	36 00 f8    	push      0x36
    334c:	80 9f be    	mov.d     w0, [w15++]
    334e:	82 9f be    	mov.d     w2, [w15++]
    3350:	84 9f be    	mov.d     w4, [w15++]
    3352:	86 9f be    	mov.d     w6, [w15++]
    3354:	32 00 f8    	push      0x32
    3356:	34 00 f8    	push      0x34
    3358:	10 00 20    	mov.w     #0x1, w0
    335a:	a0 01 88    	mov.w     w0, 0x34
    335c:	00 20 20    	mov.w     #0x200, w0
    335e:	90 01 88    	mov.w     w0, 0x32
    3360:	00 00 fa    	lnk       #0x0
    3362:	3d f7 07    	rcall     0x21de <_usb_service> <.LFB4> <.LFE3>
    3364:	00 80 fa    	ulnk      
    3366:	34 00 f9    	pop       0x34
    3368:	32 00 f9    	pop       0x32
    336a:	4f 03 be    	mov.d     [--w15], w6
    336c:	4f 02 be    	mov.d     [--w15], w4
    336e:	4f 01 be    	mov.d     [--w15], w2
    3370:	4f 00 be    	mov.d     [--w15], w0
    3372:	36 00 f9    	pop       0x36
    3374:	00 40 06    	retfie    
Disassembly of section .isr:

00003376 <__DefaultInterrupt>:
    3376:	00 40 da    	break     
    3378:	00 00 fe    	reset     
